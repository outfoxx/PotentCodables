{"abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"inlineContent":[{"type":"text","text":"JSON"}],"type":"strong"},{"text":", ","type":"text"},{"inlineContent":[{"text":"YAML","type":"text"}],"type":"strong"},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"text":"CBOR","type":"text"}]},{"text":" & ","type":"text"},{"inlineContent":[{"type":"text","text":"ASN.1"}],"type":"strong"},{"text":".","type":"text"}],"metadata":{"modules":[{"name":"PotentCodables"}],"title":"Getting Started with Potent Codables","roleHeading":"Article","role":"article"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","interfaceLanguage":"swift"},"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"],"anchor":"Usage","title":"Usage"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"PotentCodables provide standard "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"type":"text","text":"s for the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" framework. Additionally all"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"codeVoice","code":"Encoder"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s provide ehanched capabilities to make working with data formats easier and more"},{"text":" ","type":"text"},{"text":"powerful.","type":"text"}]},{"level":3,"type":"heading","anchor":"Standard-EncodersDecoders","text":"Standard Encoders\/Decoders"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are looking to use one of the powerful PotentCodables provided formats for encoding & decoding you only"},{"text":" ","type":"text"},{"text":"need to import the format you want to use and use the familiar ","type":"text"},{"type":"codeVoice","code":"Encoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" APIs as you would for"},{"text":" ","type":"text"},{"type":"text","text":"any other "},{"type":"codeVoice","code":"Codable"},{"text":" framework.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example encoding to YAML is essentially the same as encoding with Swift’s standard "},{"type":"codeVoice","code":"JSONEncoder"},{"text":". You just need","type":"text"},{"type":"text","text":" "},{"text":"to use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLEncoder"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import PotentYAML","","struct Engine {","  var name: String","  var cylinders: Int","}","","let v8Engine = Engine(name: \"V8\", cylinders: 8)","","let yamlData = try YAML.Encoder.default.encode(v8Engine)","print(String(data: yamlData, encoding: .utf8)!)"]},{"inlineContent":[{"text":"Produces the following YAML:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["---","name: V8","cylinders: 8","..."],"syntax":"yaml"},{"type":"paragraph","inlineContent":[{"text":"Similarly, to decode the YAML produced in the previous example you only need to use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLDecoder","type":"reference"},{"type":"text","text":"."}]},{"code":["import PotentYAML","","let someEngine = YAML.Encoder.default.decode(yamlData)"],"syntax":"swift","type":"codeListing"},{"content":[{"inlineContent":[{"text":"All provided Encoders and Decoders from a ","type":"text"},{"type":"codeVoice","code":"default"},{"type":"text","text":" for easy access to an encoder or decoder initialized"},{"text":" ","type":"text"},{"type":"text","text":"with default options. These are used througout the documentation."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You may have noticed you can use either "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/Encoder"},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLEncoder","isActive":true},{"type":"text","text":" to reference"},{"type":"text","text":" "},{"text":"the YAML encoder’s type. This is true for all PotentCodables formats and allows easy disambiguation when mixing with","type":"text"},{"text":" ","type":"text"},{"text":"other codable frameworks encoders & decoders like Foundation’s ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"JSONDecoder"},{"text":".","type":"text"}]}],"name":"Tip","type":"aside"},{"text":"Ecoding\/Decoding from Strings","level":3,"anchor":"EcodingDecoding-from-Strings","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All PotentCodables text based data formats like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML"},{"text":" can encode directly to and from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Strings in addition to the standard "},{"type":"codeVoice","code":"Data"},{"text":" encoding; this can save you the hassle of converting ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":" to ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" in"},{"text":" ","type":"text"},{"type":"text","text":"many cases."}]},{"type":"paragraph","inlineContent":[{"text":"The previous encoding example could be rewritten as follows:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import PotentYAML","","struct Engine {","  var name: String","  var cylinders: Int","}","","let v8Engine = Engine(name: \"V8\", cylinders: 8)","","let yamlData = try YAML.Encoder.default.encodeString(v8Engine)","print(String(data: yamlData, encoding: .utf8)!)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of PotentCodables text based formats provided "},{"code":"String","type":"codeVoice"},{"text":" support via the following protocols.","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EncodesToString"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DecodesFromString","isActive":true}]}]}],"type":"unorderedList"},{"level":3,"anchor":"EcodingDecoding-from-Tree-values","type":"heading","text":"Ecoding\/Decoding from Tree values."},{"inlineContent":[{"type":"text","text":"PotentCodables data formats are required to provide an in-memory representation known as a “tree value”. Tree values"},{"text":" ","type":"text"},{"text":"are Swift values that represent the natively encoded data. See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"},{"type":"text","text":" to learn more about tree values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"All PotentCodables encoders and decoders have the ability to encode to or decode from tree values."}],"type":"paragraph"},{"inlineContent":[{"text":"Reading our previous example ","type":"text"},{"code":"Engine","type":"codeVoice"},{"text":" struct from a ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"type":"text","text":" tree value is easy."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import PotentJSON","","struct Engine {","  var name: String","  var cylinders: Int","}","","let json: JSON = [","  \"name\": \"V8\",","  \"cylinders\": 8","]","","let someEngine = JSON.Decoder.default.decodeTree(Engine.self, from: json)"]},{"inlineContent":[{"text":"All PotentCodables data formats provided support for tree values via the following protocols.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EncodesToTree","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DecodesFromTree","type":"reference"}],"type":"paragraph"}]}]}]}],"references":{"doc://PotentCodables/documentation/PotentYAML":{"url":"\/documentation\/potentyaml","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML","role":"collection","abstract":[{"type":"text","text":"YAML 1.2 support for both YAML & JSON in a single framework."}],"title":"PotentYAML"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"title":"JSON","role":"symbol","url":"\/documentation\/potentjson\/json","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"JSON","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JSON"}],"abstract":[{"type":"text","text":"General JSON value."}]},"doc://PotentCodables/documentation/PotentYAML/YAML/Encoder":{"kind":"symbol","navigatorTitle":[{"text":"Encoder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/Encoder","abstract":[],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Encoder"}],"url":"\/documentation\/potentyaml\/yaml\/encoder","title":"YAML.Encoder"},"doc://PotentCodables/documentation/PotentYAML/YAMLEncoder":{"navigatorTitle":[{"kind":"identifier","text":"YAMLEncoder"}],"url":"\/documentation\/potentyaml\/yamlencoder","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"YAMLEncoder"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLEncoder","abstract":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLEncoder","isActive":true},{"text":" facilitates the encoding of ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" values into YAML values.","type":"text"}],"title":"YAMLEncoder"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","url":"\/documentation\/potentcodables","role":"collection","kind":"symbol","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"kind":"article","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"type":"topic","url":"\/documentation\/potentcodables\/data-formats","title":"Data Formats"},"doc://PotentCodables/documentation/PotentYAML/YAMLDecoder":{"kind":"symbol","type":"topic","role":"symbol","title":"YAMLDecoder","abstract":[{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLDecoder","type":"reference"},{"text":" facilitates the decoding of YAML into semantic ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" types."}],"navigatorTitle":[{"kind":"identifier","text":"YAMLDecoder"}],"url":"\/documentation\/potentyaml\/yamldecoder","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLDecoder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"YAMLDecoder","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentJSON":{"type":"topic","url":"\/documentation\/potentjson","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON","role":"collection","title":"PotentJSON","kind":"symbol","abstract":[{"text":"Enhanced, drop-in replacement for Foundation’s JSON support in pure Swift.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/EncodesToString":{"kind":"symbol","navigatorTitle":[{"text":"EncodesToString","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EncodesToString","abstract":[{"type":"text","text":"Encoders that target text formats support encoding to strings"},{"text":" ","type":"text"},{"text":"and encoding to data using a default string encoding.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"EncodesToString","kind":"identifier"}],"url":"\/documentation\/potentcodables\/encodestostring","title":"EncodesToString"},"doc://PotentCodables/documentation/PotentCodables/DecodesFromString":{"kind":"symbol","type":"topic","role":"symbol","title":"DecodesFromString","abstract":[{"text":"Decoders for text formats support decoding from strings and from","type":"text"},{"type":"text","text":" "},{"text":"data using a string encoding.","type":"text"}],"navigatorTitle":[{"text":"DecodesFromString","kind":"identifier"}],"url":"\/documentation\/potentcodables\/decodesfromstring","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DecodesFromString","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"DecodesFromString","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/TreeValues":{"kind":"article","role":"article","title":"Tree Values","url":"\/documentation\/potentcodables\/treevalues","abstract":[{"type":"text","text":"What are “tree values”?"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"},"doc://PotentCodables/documentation/PotentCodables/DecodesFromTree":{"kind":"symbol","type":"topic","role":"symbol","title":"DecodesFromTree","abstract":[{"type":"text","text":"All encoders support decoding from their native values."}],"navigatorTitle":[{"kind":"identifier","text":"DecodesFromTree"}],"url":"\/documentation\/potentcodables\/decodesfromtree","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DecodesFromTree","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"DecodesFromTree","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"kind":"symbol","navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","abstract":[{"text":"A ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value that allows encoding\/decoding values of any type or structure.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyValue"}],"url":"\/documentation\/potentcodables\/anyvalue","title":"AnyValue"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"kind":"article","type":"topic","role":"article","title":"Using AnyValue","abstract":[{"type":"text","text":"Decode and encode “any” structured value using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true}],"url":"\/documentation\/potentcodables\/using-anyvalue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"},"doc://PotentCodables/documentation/PotentCodables/EncodesToTree":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EncodesToTree"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EncodesToTree","abstract":[{"type":"text","text":"All encoders support encoding to their native values."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EncodesToTree"}],"url":"\/documentation\/potentcodables\/encodestotree","title":"EncodesToTree"}}}