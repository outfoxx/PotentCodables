{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"kind":"article","identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"seeAlsoSections":[{"anchor":"Advanced","generated":true,"title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"inlineContent":[{"text":"Polymorphic references for wrapped values (using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":") use the name "},{"code":"@type","type":"codeVoice"},{"type":"text","text":" for the"},{"text":" ","type":"text"},{"type":"text","text":"field containing the type id and the name "},{"type":"codeVoice","code":"value"},{"text":" for the field containing the wrapped value. References for embedded","type":"text"},{"type":"text","text":" "},{"text":"values (using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"text":") usethe name ","type":"text"},{"type":"codeVoice","code":"@type"},{"text":" for the field containing the type id. Both reference","type":"text"},{"type":"text","text":" "},{"type":"text","text":"structures use the "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" for type id generation and lookup."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" is simply a"},{"type":"text","text":" "},{"text":"type alias to the generic type ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"text":" that uses (","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"text":") for type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"handling and the key providers ("},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"type":"text","text":") and ("},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","type":"reference","isActive":true},{"type":"text","text":") to provide"},{"type":"text","text":" "},{"type":"text","text":"the names of the fields. Similarly, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":" is a type alias to","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to how your data needs to be structured."}],"type":"paragraph"},{"text":"Customizing Keys","anchor":"Customizing-Keys","type":"heading","level":3},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"text":" ","type":"text"},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"type":"text","text":" "},{"type":"text","text":"simple types."}],"type":"paragraph"},{"inlineContent":[{"text":"Here is the definition of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"text":" that provides the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"type":"text","text":" "},{"text":"field of a ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The following example creates a new reference type ","type":"text"},{"type":"codeVoice","code":"UnderscoreRef"},{"type":"text","text":" that uses the names "},{"code":"_type","type":"codeVoice"},{"text":" for the type id field","type":"text"},{"type":"text","text":" "},{"text":"and the name ","type":"text"},{"type":"codeVoice","code":"_value"},{"text":" for the value field.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"For "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"type":"text","text":" only a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true,"type":"reference"},{"text":" is required because all fields","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are contained in the same container."}],"type":"paragraph"},{"inlineContent":[{"text":"An embedded ","type":"text"},{"code":"UnderscoreEmbeddedRef","type":"codeVoice"},{"text":" similar to the above example would be created similarly.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"anchor":"Customizing-Type-Lookup","text":"Customizing Type Lookup","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"text":" ","type":"text"},{"text":"transformed back into the requested types. To enable extensability, and ensure security during","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"type":"text","text":" "},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index, used by "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":", is"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true,"type":"reference"},{"text":". The index has a simple global map of allowed types and their type ids.","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference","isActive":true},{"text":" uses the simple module local type name.","type":"text"}]},{"content":[{"inlineContent":[{"text":"","type":"text"},{"code":"DefaultTypeIndex","type":"codeVoice"},{"text":"’s map of allowed types is initially empty and will not allow any custom types during","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"before decoding values."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","type":"reference","isActive":true},{"text":" and define a new reference type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"sections":[],"metadata":{"roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Custom References","role":"article"},"references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","title":"typeKey","role":"symbol","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey"}],"url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","title":"DefaultTypeKey","role":"symbol","abstract":[{"text":"Default type key provider using ","type":"text"},{"code":"@type","type":"codeVoice"},{"type":"text","text":" as the "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","isActive":true}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DefaultTypeKey","kind":"identifier"}],"navigatorTitle":[{"text":"DefaultTypeKey","kind":"identifier"}],"url":"\/documentation\/potentcodables\/defaulttypekey","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mapAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"text":".Type]) -> [","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type]"}],"abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}],"title":"mapAllowedTypes(_:)","type":"topic","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"abstract":[{"text":"Default value key provider using ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" as the "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","isActive":true,"type":"reference"}],"title":"DefaultValueKey","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DefaultValueKey"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","url":"\/documentation\/potentcodables\/defaultvaluekey","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultValueKey"}]},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"title":"EmbeddedRef","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedRef"}],"url":"\/documentation\/potentcodables\/embeddedref","role":"symbol","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","navigatorTitle":[{"text":"EmbeddedRef","kind":"identifier"}],"abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"title":"Polymorphic Encoding & Decoding","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","type":"topic","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article","role":"article"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","title":"valueKey","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"valueKey"},{"text":": ","kind":"text"},{"text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier"}],"url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"text":" data formats easily.","type":"text"}],"title":"Implementing New Data Formats","type":"topic","url":"\/documentation\/potentcodables\/implementing-formats","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","role":"article","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"navigatorTitle":[{"text":"Ref","kind":"identifier"}],"type":"topic","title":"Ref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Ref","kind":"identifier"}],"url":"\/documentation\/potentcodables\/ref","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}]},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomRef"}],"navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/customref","type":"topic","abstract":[{"type":"text","text":"The implementation type for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" types.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","kind":"symbol","title":"CustomRef","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"title":"typeKey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey"}],"type":"topic","abstract":[],"url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","required":true,"kind":"symbol","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TypeKeyProvider","kind":"identifier"}],"abstract":[{"type":"text","text":"Provides a static "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","type":"reference"},{"text":" property that ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"text":" ","type":"text"},{"text":"type name.","type":"text"}],"title":"TypeKeyProvider","type":"topic","url":"\/documentation\/potentcodables\/typekeyprovider","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TypeKeyProvider"}]},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"title":"TypeIndex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TypeIndex","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"text":" ","type":"text"},{"text":"and generating type ids for types during encoding.","type":"text"}],"url":"\/documentation\/potentcodables\/typeindex","navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"url":"\/documentation\/potentcodables\/defaulttypeindex","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultTypeIndex"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","abstract":[{"text":"Default type index that uses a simple global map that can be updated","type":"text"},{"text":" ","type":"text"},{"text":"by clients.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","title":"DefaultTypeIndex","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addAllowedTypes"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"text":".Type])","kind":"text"}],"abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)"},{"type":"text","text":"."}],"title":"addAllowedTypes(_:)","type":"topic","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"title":"Encoder\/Decoder Protocols","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","type":"topic","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"text":"s and ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"url":"\/documentation\/potentcodables\/protocols","kind":"article","role":"article"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"CustomEmbeddedRef"}],"url":"\/documentation\/potentcodables\/customembeddedref","role":"symbol","kind":"symbol","abstract":[{"text":"The implementation type for ","type":"text"},{"type":"codeVoice","code":"EmbeddedRef"},{"type":"text","text":" types."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomEmbeddedRef"}],"title":"CustomEmbeddedRef","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","url":"\/documentation\/potentcodables","role":"collection","kind":"symbol","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]}}}