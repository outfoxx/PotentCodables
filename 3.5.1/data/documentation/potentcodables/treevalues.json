{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"hold the values in their exact serialized representation.  For example, "},{"code":"JSON","type":"codeVoice"},{"type":"text","text":" tree values store numbers as a"},{"text":" ","type":"text"},{"type":"text","text":"specialized "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"text":" that stores the exact number value as a string along with a number of other","type":"text"},{"text":" ","type":"text"},{"text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true,"type":"reference"},{"text":" and reading the exact decimal value serialized in JSON is available from tree values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" which extends the  "},{"type":"codeVoice","code":"SingleValueDecodingContainer"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"inlineContent":[{"text":"Decoding ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference","isActive":true},{"text":" values using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Each tree value has the ability to “unwrap” itself (using it’s ","type":"text"},{"type":"codeVoice","code":"unwrapped"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"text":"standard Swift type, returned as an  ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":". As an example, unwrappingthe the JSON value ","type":"text"},{"type":"codeVoice","code":"123.456"},{"type":"text","text":" result in a Swift"},{"type":"text","text":" "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Tree values are returned as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":" to allow easy support any possible tree value. For this reason the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"type":"text","text":" has a convenience method to access the unwrapped tree value without"},{"type":"text","text":" "},{"text":"excessive casting.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Decoding unwrapped "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"text":" values using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"roleHeading":"Article","role":"article","title":"Tree Values","modules":[{"name":"PotentCodables"}]},"abstract":[{"type":"text","text":"What are “tree values”?"}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"kind":"article","sections":[],"seeAlsoSections":[{"generated":true,"title":"Usage","anchor":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","url":"\/documentation\/potentcodables","role":"collection","kind":"symbol","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"type":"topic","url":"\/documentation\/potentjson\/json\/number","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","title":"JSON.Number","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Number"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Number"}],"abstract":[],"role":"symbol"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"title":"JSON","role":"symbol","url":"\/documentation\/potentjson\/json","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"JSON","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JSON"}],"abstract":[{"type":"text","text":"General JSON value."}]},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","title":"TreeValueDecodingContainer","abstract":[],"navigatorTitle":[{"text":"TreeValueDecodingContainer","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TreeValueDecodingContainer"}],"type":"topic","url":"\/documentation\/potentcodables\/treevaluedecodingcontainer"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"kind":"article","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"type":"topic","url":"\/documentation\/potentcodables\/data-formats","title":"Data Formats"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","kind":"article","abstract":[{"type":"text","text":"Get started using the powerful potent data formats "},{"inlineContent":[{"text":"JSON","type":"text"}],"type":"strong"},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"YAML"}],"type":"strong"},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"CBOR"}],"type":"strong"},{"text":" & ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"ASN.1"}]},{"type":"text","text":"."}],"url":"\/documentation\/potentcodables\/gettingstarted","title":"Getting Started with Potent Codables","role":"article","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"kind":"symbol","navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","abstract":[{"text":"A ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value that allows encoding\/decoding values of any type or structure.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyValue"}],"url":"\/documentation\/potentcodables\/anyvalue","title":"AnyValue"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"kind":"article","type":"topic","role":"article","title":"Using AnyValue","abstract":[{"type":"text","text":"Decode and encode “any” structured value using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true}],"url":"\/documentation\/potentcodables\/using-anyvalue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"}}}