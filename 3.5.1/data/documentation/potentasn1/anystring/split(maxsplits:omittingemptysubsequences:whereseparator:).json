{"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"type":"text","text":" "},{"type":"text","text":"that don’t contain elements satisfying the given predicate."}],"variants":[{"paths":["\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentASN1","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":" = true, ","kind":"text"},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":" "},{"kind":"internalParam","text":"isSeparator"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"kind":"text","text":"]"}]}]},{"kind":"parameters","parameters":[{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original collection containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"text":" ","type":"text"},{"text":"satisfying the ","type":"text"},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" predicate and for each element at the"},{"type":"text","text":" "},{"text":"start or end of the collection satisfying the ","type":"text"},{"type":"codeVoice","code":"isSeparator"},{"text":" ","type":"text"},{"type":"text","text":"predicate. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}],"name":"omittingEmptySubsequences"},{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that takes an element as an argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns a Boolean value indicating whether the collection should be","type":"text"},{"type":"text","text":" "},{"text":"split at that element.","type":"text"}]}],"name":"isSeparator"}]},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An array of subsequences, split from this collection’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}],"kind":"content"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting array consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" subsequences.","type":"text"},{"text":" ","type":"text"},{"text":"Elements that are used to split the sequence are not returned as part of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"any subsequence."}]},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" parameters when splitting a string using a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closure that matches spaces. The first use of "},{"type":"codeVoice","code":"split"},{"type":"text","text":" returns each word"},{"type":"text","text":" "},{"text":"that was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"text":" ","type":"text"},{"type":"text","text":"original string is split just once, into two new strings."}],"type":"paragraph"},{"syntax":null,"code":["print(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" "},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"were repeated."}]},{"type":"codeListing","syntax":null,"code":["print(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"name":"Complexity"}]}],"metadata":{"roleHeading":"Instance Method","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"},{"text":"]","kind":"text"}],"modules":[{"relatedModules":["Swift"],"name":"PotentASN1"}],"extendedModule":"Swift","externalID":"s:SlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF::SYNTHESIZED::s:10PotentASN19AnyStringV","symbolKind":"method","role":"symbol"},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://PotentCodables/documentation/PotentASN1/AnyString":{"kind":"symbol","navigatorTitle":[{"text":"AnyString","kind":"identifier"}],"abstract":[{"type":"text","text":"Allows encoding "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" ASN.1 string value while allowing control of the","type":"text"},{"text":" ","type":"text"},{"text":"specific ASN.1 tag.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","title":"AnyString","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyString"}],"type":"topic","url":"\/documentation\/potentasn1\/anystring"},"doc://PotentCodables/documentation/PotentASN1/AnyString/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"type":"text","text":" "},{"text":"that don’t contain elements satisfying the given predicate.","type":"text"}],"url":"\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"kind":"text","text":"]"}],"type":"topic"},"doc://PotentCodables/documentation/PotentASN1/AnyString/Collection-Implementations":{"role":"collectionGroup","kind":"article","url":"\/documentation\/potentasn1\/anystring\/collection-implementations","title":"Collection Implementations","abstract":[],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations"},"doc://PotentCodables/documentation/PotentASN1":{"kind":"symbol","abstract":[{"text":"Reading and writing ASN.1 encoded data, as well as schema oriented support for encoding and decoding.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1","title":"PotentASN1","role":"collection","type":"topic","url":"\/documentation\/potentasn1"}}}