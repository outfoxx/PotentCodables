{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they"},{"type":"text","text":" "},{"type":"text","text":"hold the values in their exact serialized representation.  For example, "},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" tree values store numbers as a"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" that stores the exact number value as a string along with a number of other"},{"type":"text","text":" "},{"type":"text","text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" and reading the exact decimal value serialized in JSON is available from tree values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" which extends the  "},{"type":"codeVoice","code":"SingleValueDecodingContainer"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decoding "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},{"type":"text","text":" values using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" as follows:"}]},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"type":"codeVoice","code":"unwrapped"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"type":"text","text":"standard Swift type, returned as an  "},{"type":"codeVoice","code":"Any"},{"type":"text","text":". As an example, unwrappingthe the JSON value "},{"type":"codeVoice","code":"123.456"},{"type":"text","text":" result in a Swift"},{"type":"text","text":" "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" to allow easy support any possible tree value. For this reason the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" has a convenience method to access the unwrapped tree value without"},{"type":"text","text":" "},{"type":"text","text":"excessive casting."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decoding unwrapped "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},{"type":"text","text":" values using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" as follows:"}]},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"What are “tree values”?"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Tree Values","role":"article","modules":[{"name":"PotentCodables"}]},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"seeAlsoSections":[{"title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"],"generated":true}],"references":{"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"role":"article","title":"Using AnyValue","abstract":[{"type":"text","text":"Decode and encode “any” structured value using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/using-anyvalue"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"role":"symbol","title":"AnyValue","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyValue"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyValue"}],"url":"\/documentation\/potentcodables\/anyvalue"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"role":"article","title":"Getting Started with Potent Codables","abstract":[{"type":"text","text":"Get started using the powerful potent data formats "},{"type":"strong","inlineContent":[{"type":"text","text":"JSON"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"YAML"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"CBOR"}]},{"type":"text","text":" & "},{"type":"strong","inlineContent":[{"type":"text","text":"ASN.1"}]},{"type":"text","text":"."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/gettingstarted"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"role":"symbol","title":"TreeValueDecodingContainer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeValueDecodingContainer"}],"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}],"url":"\/documentation\/potentcodables\/treevaluedecodingcontainer"},"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"role":"symbol","title":"JSON","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSON"}],"abstract":[{"type":"text","text":"General JSON value."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JSON"}],"url":"\/documentation\/potentjson\/json"},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"role":"symbol","title":"JSON.Number","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Number"}],"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Number"}],"url":"\/documentation\/potentjson\/json\/number"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"role":"article","title":"Data Formats","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/data-formats"}}}