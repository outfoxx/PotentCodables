{"interfaceLanguages":{"swift":[{"children":[{"title":"Basics","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/asn1-readingwriting","title":"Reading and Writing ASN.1","type":"article"},{"path":"\/documentation\/potentcodables\/asn1-schemaencodingdecoding","title":"Schema based Encoding and Decoding","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decoder\/init(schema:)","title":"init(schema: Schema)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decoder\/options","title":"var options: ASN1DecoderTransform.Options","type":"property"},{"path":"\/documentation\/potentasn1\/asn1decoder\/schema","title":"let schema: Schema","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decoder\/decode(_:from:)","title":"static func decode<T>(T.Type, from: Data) throws -> T","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decoder\/decodetree(_:from:)","title":"static func decodeTree<T>(T.Type, from: ASN1) throws -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decoder\/input","title":"ASN1Decoder.Input","type":"typealias"}],"path":"\/documentation\/potentasn1\/asn1decoder\/topleveldecoder-implementations","title":"TopLevelDecoder Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/asn1decoder","title":"ASN1Decoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encoder\/init(schema:)","title":"init(schema: Schema)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encoder\/options","title":"var options: ASN1EncoderTransform.Options","type":"property"},{"path":"\/documentation\/potentasn1\/asn1encoder\/schema","title":"let schema: Schema","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encoder\/encode(_:)","title":"static func encode<T>(T) throws -> Data","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encoder\/encodetree(_:)","title":"static func encodeTree<T>(T) throws -> ASN1","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encoder\/output","title":"ASN1Encoder.Output","type":"typealias"}],"path":"\/documentation\/potentasn1\/asn1encoder\/toplevelencoder-implementations","title":"TopLevelEncoder Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/asn1encoder","title":"ASN1Encoder","type":"class"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemastate\/decodingerror\/badvalue(_:_:)","title":"case badValue(Any, SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/decodingerror\/disallowedvalue(_:_:)","title":"case disallowedValue(Any, SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/decodingerror\/valueoutofrange(_:_:)","title":"case valueOutOfRange(Any, SchemaError.Context)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemastate\/decodingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentasn1\/schemastate\/decodingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/schemastate\/decodingerror","title":"SchemaState.DecodingError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemastate\/encodingerror\/badvalue(_:_:)","title":"case badValue(Any, SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/encodingerror\/disallowedvalue(_:_:)","title":"case disallowedValue(Any, SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/encodingerror\/valueoutofrange(_:_:)","title":"case valueOutOfRange(Any, SchemaError.Context)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemastate\/encodingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentasn1\/schemastate\/encodingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/schemastate\/encodingerror","title":"SchemaState.EncodingError","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/context\/codingpath","title":"let codingPath: [CodingKey]","type":"property"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/context\/debugdescription","title":"let debugDescription: String","type":"property"}],"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/context","title":"SchemaState.SchemaError.Context","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/ambiguousimplicittag(_:)","title":"case ambiguousImplicitTag(SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/nodynamictype(_:)","title":"case noDynamicType(SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/nodynamictypedefined(_:)","title":"case noDynamicTypeDefined(String)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/noscopeavailable","title":"case noScopeAvailable","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/noversion(_:)","title":"case noVersion(SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/noversiondefined(_:)","title":"case noVersionDefined(String)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/notcollection","title":"case notCollection","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/structuremismatch(_:)","title":"case structureMismatch(SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/undefinedfield(_:_:)","title":"case undefinedField(String, SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/unknowndynamicvalue(_:)","title":"case unknownDynamicValue(SchemaError.Context)","type":"case"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/versioncheck(_:)","title":"case versionCheck(SchemaError.Context)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentasn1\/schemastate\/schemaerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/schemastate\/schemaerror","title":"SchemaState.SchemaError","type":"enum"}],"path":"\/documentation\/potentasn1\/schemastate","title":"SchemaState","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemaspecified\/encoded()","title":"func encoded() throws -> Data","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schemaspecified\/asn1schema","title":"static var asn1Schema: Schema","type":"property"}],"path":"\/documentation\/potentasn1\/schemaspecified","title":"SchemaSpecified","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/tagged\/init(tag:value:)","title":"init?(tag: ASN1.AnyTag, value: Any?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/tagged\/tag","title":"var tag: ASN1.AnyTag","type":"property"},{"path":"\/documentation\/potentasn1\/tagged\/value","title":"var value: Any?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/tagged\/encode(schema:)","title":"func encode(schema: Schema) throws -> ASN1","type":"method"}],"path":"\/documentation\/potentasn1\/tagged","title":"Tagged","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/options\/keydecodingstrategy","title":"let keyDecodingStrategy: KeyDecodingStrategy","type":"property"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/options\/schema","title":"let schema: Schema","type":"property"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentasn1\/asn1decodertransform\/options","title":"ASN1DecoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/state","title":"ASN1DecoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/value","title":"ASN1DecoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/nilvalue","title":"static let nilValue: ASN1","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/intercepts(_:)-6m06k","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-1n2my","title":"static func unbox(ASN1, as: ZonedDate.Type, decoder: IVD) throws -> ZonedDate?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-2sgay","title":"static func unbox(ASN1, as: BigUInt.Type, decoder: IVD) throws -> BigUInt?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-32ifl","title":"static func unbox(ASN1, as: AnyTime.Type, decoder: IVD) throws -> AnyTime?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-39we","title":"static func unbox(ASN1, as: Int64.Type, decoder: IVD) throws -> Int64?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-46gjj","title":"static func unbox(ASN1, as: Float.Type, decoder: IVD) throws -> Float?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-4lyfy","title":"static func unbox(ASN1, as: UUID.Type, decoder: IVD) throws -> UUID?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-50ch2","title":"static func unbox(ASN1, as: Bool.Type, decoder: IVD) throws -> Bool?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-51k49","title":"static func unbox(ASN1, as: Data.Type, decoder: IVD) throws -> Data?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-5gbyi","title":"static func unbox(ASN1, as: UInt.Type, decoder: IVD) throws -> UInt?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-5k9ru","title":"static func unbox(ASN1, as: URL.Type, decoder: IVD) throws -> URL?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-5xc8m","title":"static func unbox(ASN1, as: Double.Type, decoder: IVD) throws -> Double?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-5y3h4","title":"static func unbox(ASN1, as: BitString.Type, decoder: IVD) throws -> BitString?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-64xb0","title":"static func unbox(ASN1, as: UInt64.Type, decoder: IVD) throws -> UInt64?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-667wf","title":"static func unbox(ASN1, as: UInt8.Type, decoder: IVD) throws -> UInt8?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-6lpf8","title":"static func unbox(ASN1, as: Int32.Type, decoder: IVD) throws -> Int32?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-6rfxi","title":"static func unbox(ASN1, as: UInt32.Type, decoder: IVD) throws -> UInt32?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-6yx4l","title":"static func unbox(ASN1, as: String.Type, decoder: IVD) throws -> String?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-7f23u","title":"static func unbox(ASN1, as: Decimal.Type, decoder: IVD) throws -> Decimal?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-7mlvv","title":"static func unbox(ASN1, as: Int.Type, decoder: IVD) throws -> Int?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-7vh3l","title":"static func unbox(ASN1, as: Int8.Type, decoder: IVD) throws -> Int8?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-7ya6m","title":"static func unbox(ASN1, as: Tagged.Type, decoder: IVD) throws -> Tagged?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-86w8o","title":"static func unbox(ASN1, as: Date.Type, decoder: IVD) throws -> Date?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-8hvkz","title":"static func unbox(ASN1, as: AnyString.Type, decoder: IVD) throws -> AnyString?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-8qatz","title":"static func unbox(ASN1, as: ObjectIdentifier.Type, decoder: IVD) throws -> ObjectIdentifier?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-8z4px","title":"static func unbox(ASN1, as: Int16.Type, decoder: IVD) throws -> Int16?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-9te85","title":"static func unbox(ASN1, as: AnyValue.Type, decoder: IVD) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-gjyy","title":"static func unbox(ASN1, as: BigInt.Type, decoder: IVD) throws -> BigInt?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:as:decoder:)-ynj2","title":"static func unbox(ASN1, as: UInt16.Type, decoder: IVD) throws -> UInt16?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:interceptedtype:decoder:)-1mzcx","title":"static func unbox(ASN1, interceptedType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/value(from:options:)","title":"static func value(from: Data, options: Options) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/valuetokeyedvalues(_:decoder:)","title":"static func valueToKeyedValues(ASN1, decoder: IVD) throws -> KeyedValues?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/valuetounkeyedvalues(_:decoder:)","title":"static func valueToUnkeyedValues(ASN1, decoder: IVD) throws -> UnkeyedValues?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/intercepts(_:)-61bth","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:interceptedtype:decoder:)-4ls0y","title":"static func unbox(Self.Value, interceptedType: Decodable.Type, decoder: Self.IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1decodertransform\/unbox(_:othertype:decoder:)","title":"static func unbox(Self.Value, otherType: Decodable.Type, decoder: Self.IVD) throws -> Any?","type":"method"}],"path":"\/documentation\/potentasn1\/asn1decodertransform\/internaldecodertransform-implementations","title":"InternalDecoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/asn1decodertransform","title":"ASN1DecoderTransform","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/options\/keyencodingstrategy","title":"let keyEncodingStrategy: KeyEncodingStrategy","type":"property"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/options\/schema","title":"var schema: Schema","type":"property"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentasn1\/asn1encodertransform\/options","title":"ASN1EncoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/state","title":"ASN1EncoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/value","title":"ASN1EncoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/emptykeyedcontainer","title":"static var emptyKeyedContainer: ASN1","type":"property"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/emptyunkeyedcontainer","title":"static var emptyUnkeyedContainer: ASN1","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-12kb8","title":"static func box(UInt32, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-1c4fg","title":"static func box(Float, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-1ckyo","title":"static func box(UInt64, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-25kyr","title":"static func box(Int64, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-2cmu3","title":"static func box(Int32, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-3bn4b","title":"static func box(Int8, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-3p5aw","title":"static func box(UInt16, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-3x1a9","title":"static func box(String, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-4nowc","title":"static func box(Int, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-73iuj","title":"static func box(UInt, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-7izm7","title":"static func box(Int16, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-7kcim","title":"static func box(Double, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-82iam","title":"static func box(UInt8, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-89uec","title":"static func box(AnyValue, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:encoder:)-9vnc6","title":"static func box(Bool, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:interceptedtype:encoder:)-2wx76","title":"static func box(Any, interceptedType: Encodable.Type, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/boxnil(encoder:)","title":"static func boxNil(encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/data(from:options:)","title":"static func data(from: ASN1, options: Options) throws -> Data","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/intercepts(_:)-3xez8","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/keyedvaluestovalue(_:encoder:)","title":"static func keyedValuesToValue(KeyedValues, encoder: IVE) throws -> ASN1","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/unkeyedvaluestovalue(_:encoder:)","title":"static func unkeyedValuesToValue(UnkeyedValues, encoder: IVE) throws -> ASN1","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:interceptedtype:encoder:)-1onyz","title":"static func box(Any, interceptedType: Encodable.Type, encoder: Self.IVE) throws -> Self.Value","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/box(_:othertype:encoder:)","title":"static func box(Any, otherType: Encodable.Type, encoder: Self.IVE) throws -> Self.Value?","type":"method"},{"path":"\/documentation\/potentasn1\/asn1encodertransform\/intercepts(_:)-17rl1","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"}],"path":"\/documentation\/potentasn1\/asn1encodertransform\/internalencodertransform-implementations","title":"InternalEncoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/asn1encodertransform","title":"ASN1EncoderTransform","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/init(_:kind:)","title":"init(String, kind: Kind?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.property","title":"var kind: Kind?","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/storage","title":"var storage: String","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/bmp","title":"case bmp","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/character","title":"case character","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/general","title":"case general","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/graphic","title":"case graphic","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/ia5","title":"case ia5","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/numeric","title":"case numeric","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/printable","title":"case printable","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/teletex","title":"case teletex","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/universal","title":"case universal","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/utf8","title":"case utf8","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/videotex","title":"case videotex","type":"case"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/visible","title":"case visible","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/anystring\/kind-swift.enum","title":"AnyString.Kind","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/firstmatch(of:)","title":"func firstMatch<Output>(of: some RegexComponent) -> Regex<Output>.Match?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/firstrange(of:)-28rdx","title":"func firstRange(of: some RegexComponent) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/firstrange(of:)-92iy0","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/index(after:)","title":"func index(after: String.Index) -> String.Index","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/index(before:)","title":"func index(before: String.Index) -> String.Index","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/matches(of:)","title":"func matches<Output>(of: some RegexComponent) -> [Regex<Output>.Match]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/prefixmatch(of:)","title":"func prefixMatch<R>(of: R) -> Regex<R.RegexOutput>.Match?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/ranges(of:)-70ref","title":"func ranges(of: some RegexComponent) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/starts(with:)-9uuqe","title":"func starts(with: some RegexComponent) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/trimmingprefix(_:)-4tp3y","title":"func trimmingPrefix(some RegexComponent) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/wholematch(of:)","title":"func wholeMatch<R>(of: R) -> Regex<R.RegexOutput>.Match?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/subscript(_:)-6mwkc","title":"subscript(Range<String.Index>) -> Substring","type":"subscript"}],"path":"\/documentation\/potentasn1\/anystring\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/endindex","title":"var endIndex: String.Index","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/startindex","title":"var startIndex: String.Index","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/underestimatedcount-4qwrm","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/firstrange(of:)-44qox","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/map(_:)-87b21","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/ranges(of:)-4soxy","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/trimmingprefix(_:)-1eraz","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/subscript(_:)-4hdpw","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/potentasn1\/anystring\/subscript(_:)-6yzpu","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/potentasn1\/anystring\/subscript(_:)-w7e1","title":"subscript(String.Index) -> Character","type":"subscript"}],"path":"\/documentation\/potentasn1\/anystring\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/'...(_:)-5k73","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/'...(_:)-7x0jp","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/_(_:_:)-1vt9y","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/_(_:_:)-4na95","title":"static func < <RHS>(Self, RHS) -> Bool","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/_(_:_:)-8hat9","title":"static func > <RHS>(Self, RHS) -> Bool","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/_=(_:_:)-32km6","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/_=(_:_:)-5ecml","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/_=(_:_:)-5fopw","title":"static func >= <RHS>(Self, RHS) -> Bool","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/_=(_:_:)-6cj4r","title":"static func <= <RHS>(Self, RHS) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/anystring\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentasn1\/anystring\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/potentasn1\/anystring\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/potentasn1\/anystring\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/!=(_:_:)-5x6ao","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/potentasn1\/anystring\/==(_:_:)","title":"static func == <RHS>(Self, RHS) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/anystring\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentasn1\/anystring\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/potentasn1\/anystring\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/potentasn1\/anystring\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentasn1\/anystring\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/init(_:)","title":"init(String)","type":"init"}],"path":"\/documentation\/potentasn1\/anystring\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/underestimatedcount-665nk","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/flatmap(_:)-2poh","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/flatmap(_:)-86eou","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/map(_:)-3ljjp","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/sorted(using:)-29w83","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/sorted(using:)-5jgm4","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/starts(with:)-1ttn6","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/potentasn1\/anystring\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/!=(_:_:)-ep9j","title":"static func != <RHS>(Self, RHS) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/init(cstring:)","title":"init(cString: UnsafePointer<CChar>)","type":"init"},{"path":"\/documentation\/potentasn1\/anystring\/init(decoding:as:)","title":"init<C, Encoding>(decoding: C, as: Encoding.Type)","type":"init"},{"path":"\/documentation\/potentasn1\/anystring\/init(decodingcstring:as:)","title":"init<Encoding>(decodingCString: UnsafePointer<Encoding.CodeUnit>, as: Encoding.Type)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/capitalized","title":"var capitalized: String","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/decomposedstringwithcanonicalmapping","title":"var decomposedStringWithCanonicalMapping: String","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/decomposedstringwithcompatibilitymapping","title":"var decomposedStringWithCompatibilityMapping: String","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/fastestencoding","title":"var fastestEncoding: String.Encoding","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/hash","title":"var hash: Int","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/localizedcapitalized","title":"var localizedCapitalized: String","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/localizedlowercase","title":"var localizedLowercase: String","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/localizeduppercase","title":"var localizedUppercase: String","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/precomposedstringwithcanonicalmapping","title":"var precomposedStringWithCanonicalMapping: String","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/precomposedstringwithcompatibilitymapping","title":"var precomposedStringWithCompatibilityMapping: String","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/removingpercentencoding","title":"var removingPercentEncoding: String?","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/smallestencoding","title":"var smallestEncoding: String.Encoding","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/unicodescalars","title":"var unicodeScalars: String.UnicodeScalarView","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/utf16","title":"var utf16: String.UTF16View","type":"property"},{"path":"\/documentation\/potentasn1\/anystring\/utf8","title":"var utf8: String.UTF8View","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/addingpercentencoding(withallowedcharacters:)","title":"func addingPercentEncoding(withAllowedCharacters: CharacterSet) -> String?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/addingpercentescapes(using:)","title":"func addingPercentEscapes(using: String.Encoding) -> String?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/appending(_:)","title":"func appending<T>(T) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/appendingformat(_:_:)","title":"func appendingFormat<T>(T, CVarArg...) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/applyingtransform(_:reverse:)","title":"func applyingTransform(StringTransform, reverse: Bool) -> String?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/cstring(using:)","title":"func cString(using: String.Encoding) -> [CChar]?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/canbeconverted(to:)","title":"func canBeConverted(to: String.Encoding) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/capitalized(with:)","title":"func capitalized(with: Locale?) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/caseinsensitivecompare(_:)","title":"func caseInsensitiveCompare<T>(T) -> ComparisonResult","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/commonprefix(with:options:)","title":"func commonPrefix<T>(with: T, options: String.CompareOptions) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/compare(_:options:range:locale:)","title":"func compare<T>(T, options: String.CompareOptions, range: Range<Self.Index>?, locale: Locale?) -> ComparisonResult","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/completepath(into:casesensitive:matchesinto:filtertypes:)","title":"func completePath(into: UnsafeMutablePointer<String>?, caseSensitive: Bool, matchesInto: UnsafeMutablePointer<[String]>?, filterTypes: [String]?) -> Int","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/components(separatedby:)","title":"func components(separatedBy: CharacterSet) -> [String]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/data(using:allowlossyconversion:)","title":"func data(using: String.Encoding, allowLossyConversion: Bool) -> Data?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/enumeratelines(invoking:)","title":"func enumerateLines(invoking: (String, inout Bool) -> Void)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/enumeratelinguistictags(in:scheme:options:orthography:invoking:)","title":"func enumerateLinguisticTags<T, R>(in: R, scheme: T, options: NSLinguisticTagger.Options, orthography: NSOrthography?, invoking: (String, Range<Self.Index>, Range<Self.Index>, inout Bool) -> Void)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/enumeratesubstrings(in:options:_:)","title":"func enumerateSubstrings<R>(in: R, options: String.EnumerationOptions, (String?, Range<Self.Index>, Range<Self.Index>, inout Bool) -> Void)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/folding(options:locale:)","title":"func folding(options: String.CompareOptions, locale: Locale?) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/getbytes(_:maxlength:usedlength:encoding:options:range:remaining:)","title":"func getBytes<R>(inout [UInt8], maxLength: Int, usedLength: UnsafeMutablePointer<Int>, encoding: String.Encoding, options: String.EncodingConversionOptions, range: R, remaining: UnsafeMutablePointer<Range<Self.Index>>) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/getcstring(_:maxlength:encoding:)","title":"func getCString(inout [CChar], maxLength: Int, encoding: String.Encoding) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/getlinestart(_:end:contentsend:for:)","title":"func getLineStart<R>(UnsafeMutablePointer<Self.Index>, end: UnsafeMutablePointer<Self.Index>, contentsEnd: UnsafeMutablePointer<Self.Index>, for: R)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/getparagraphstart(_:end:contentsend:for:)","title":"func getParagraphStart<R>(UnsafeMutablePointer<Self.Index>, end: UnsafeMutablePointer<Self.Index>, contentsEnd: UnsafeMutablePointer<Self.Index>, for: R)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/hasprefix(_:)","title":"func hasPrefix<Prefix>(Prefix) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/hassuffix(_:)","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/lengthofbytes(using:)","title":"func lengthOfBytes(using: String.Encoding) -> Int","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/linerange(for:)","title":"func lineRange<R>(for: R) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/linguistictags(in:scheme:options:orthography:tokenranges:)","title":"func linguisticTags<T, R>(in: R, scheme: T, options: NSLinguisticTagger.Options, orthography: NSOrthography?, tokenRanges: UnsafeMutablePointer<[Range<Self.Index>]>?) -> [String]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/localizedcaseinsensitivecompare(_:)","title":"func localizedCaseInsensitiveCompare<T>(T) -> ComparisonResult","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/localizedcaseinsensitivecontains(_:)","title":"func localizedCaseInsensitiveContains<T>(T) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/localizedcompare(_:)","title":"func localizedCompare<T>(T) -> ComparisonResult","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/localizedstandardcompare(_:)","title":"func localizedStandardCompare<T>(T) -> ComparisonResult","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/localizedstandardcontains(_:)","title":"func localizedStandardContains<T>(T) -> Bool","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/localizedstandardrange(of:)","title":"func localizedStandardRange<T>(of: T) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/lowercased()","title":"func lowercased() -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/lowercased(with:)","title":"func lowercased(with: Locale?) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/maximumlengthofbytes(using:)","title":"func maximumLengthOfBytes(using: String.Encoding) -> Int","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/padding(tolength:withpad:startingat:)","title":"func padding<T>(toLength: Int, withPad: T, startingAt: Int) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/paragraphrange(for:)","title":"func paragraphRange<R>(for: R) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/propertylist()","title":"func propertyList() -> Any","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/propertylistfromstringsfileformat()","title":"func propertyListFromStringsFileFormat() -> [String : String]","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/range(of:options:range:locale:)","title":"func range<T>(of: T, options: String.CompareOptions, range: Range<Self.Index>?, locale: Locale?) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/rangeofcharacter(from:options:range:)","title":"func rangeOfCharacter(from: CharacterSet, options: String.CompareOptions, range: Range<Self.Index>?) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/rangeofcomposedcharactersequence(at:)","title":"func rangeOfComposedCharacterSequence(at: Self.Index) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/rangeofcomposedcharactersequences(for:)","title":"func rangeOfComposedCharacterSequences<R>(for: R) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/replacingcharacters(in:with:)","title":"func replacingCharacters<T, R>(in: R, with: T) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/replacingoccurrences(of:with:options:range:)","title":"func replacingOccurrences<Target, Replacement>(of: Target, with: Replacement, options: String.CompareOptions, range: Range<Self.Index>?) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/replacingpercentescapes(using:)","title":"func replacingPercentEscapes(using: String.Encoding) -> String?","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/substring(from:)","title":"func substring(from: Self.Index) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/substring(to:)","title":"func substring(to: Self.Index) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/substring(with:)","title":"func substring(with: Range<Self.Index>) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/trimmingcharacters(in:)","title":"func trimmingCharacters(in: CharacterSet) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/uppercased()","title":"func uppercased() -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/uppercased(with:)","title":"func uppercased(with: Locale?) -> String","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/withcstring(_:)","title":"func withCString<Result>((UnsafePointer<CChar>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/withcstring(encodedas:_:)","title":"func withCString<Result, Encoding>(encodedAs: Encoding.Type, (UnsafePointer<Encoding.CodeUnit>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/write(to:atomically:encoding:)","title":"func write(to: URL, atomically: Bool, encoding: String.Encoding) throws","type":"method"},{"path":"\/documentation\/potentasn1\/anystring\/write(tofile:atomically:encoding:)","title":"func write<T>(toFile: T, atomically: Bool, encoding: String.Encoding) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/utf16view","title":"AnyString.UTF16View","type":"typealias"},{"path":"\/documentation\/potentasn1\/anystring\/utf8view","title":"AnyString.UTF8View","type":"typealias"},{"path":"\/documentation\/potentasn1\/anystring\/unicodescalarview","title":"AnyString.UnicodeScalarView","type":"typealias"}],"path":"\/documentation\/potentasn1\/anystring\/stringprotocol-implementations","title":"StringProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/write(_:)","title":"func write(String)","type":"method"}],"path":"\/documentation\/potentasn1\/anystring\/textoutputstream-implementations","title":"TextOutputStream Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anystring\/write(to:)","title":"func write<Target>(to: inout Target)","type":"method"}],"path":"\/documentation\/potentasn1\/anystring\/textoutputstreamable-implementations","title":"TextOutputStreamable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/anystring","title":"AnyString","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/init(_:kind:)","title":"init(ZonedDate, kind: Kind?)","type":"init"},{"path":"\/documentation\/potentasn1\/anytime\/init(date:timezone:kind:)","title":"init(date: Date, timeZone: TimeZone, kind: Kind?)","type":"init"},{"path":"\/documentation\/potentasn1\/anytime\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.property","title":"var kind: Kind?","type":"property"},{"path":"\/documentation\/potentasn1\/anytime\/zoneddate","title":"var zonedDate: ZonedDate","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/generalized","title":"case generalized","type":"case"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/utc","title":"case utc","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/anytime\/kind-swift.enum","title":"AnyTime.Kind","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/anytime\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/anytime\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/anytime","title":"AnyTime","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/bitstring\/init(bitflags:)-60zna","title":"init?(bitFlags: String)","type":"init"},{"path":"\/documentation\/potentasn1\/bitstring\/init(bitflags:)-8pvcc","title":"init(bitFlags: [Bool])","type":"init"},{"path":"\/documentation\/potentasn1\/bitstring\/init(bitpattern:)","title":"init<I>(bitPattern: I)","type":"init"},{"path":"\/documentation\/potentasn1\/bitstring\/init(bytes:)","title":"init(bytes: Data)","type":"init"},{"path":"\/documentation\/potentasn1\/bitstring\/init(length:bytes:)","title":"init(length: Int, bytes: Data)","type":"init"},{"path":"\/documentation\/potentasn1\/bitstring\/init(octets:)","title":"init<C>(octets: C)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/bitstring\/bitflagstring","title":"var bitFlagString: String","type":"property"},{"path":"\/documentation\/potentasn1\/bitstring\/bitflags","title":"var bitFlags: [Bool]","type":"property"},{"path":"\/documentation\/potentasn1\/bitstring\/bytes","title":"var bytes: Data","type":"property"},{"path":"\/documentation\/potentasn1\/bitstring\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/potentasn1\/bitstring\/length","title":"var length: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/bitstring\/copyoctets(into:)","title":"func copyOctets<C>(into: inout C)","type":"method"},{"path":"\/documentation\/potentasn1\/bitstring\/integer(_:)","title":"func integer<I>(I.Type) -> I","type":"method"},{"path":"\/documentation\/potentasn1\/bitstring\/octets(max:)","title":"func octets(max: Int?) -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/bitstring\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/potentasn1\/bitstring\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/bitstring\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/potentasn1\/bitstring\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/bitstring\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/bitstring\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/bitstring","title":"BitString","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/init(_:)-4887r","title":"init?(String)","type":"init"},{"path":"\/documentation\/potentasn1\/objectidentifier\/init(_:)-6s00m","title":"init([UInt64])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/asn1","title":"var asn1: ASN1","type":"property"},{"path":"\/documentation\/potentasn1\/objectidentifier\/fields","title":"var fields: [UInt64]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentasn1\/objectidentifier\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/potentasn1\/objectidentifier\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/potentasn1\/objectidentifier\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/objectidentifier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/init(arrayliteral:)","title":"init(arrayLiteral: UInt64...)","type":"init"}],"path":"\/documentation\/potentasn1\/objectidentifier\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentasn1\/objectidentifier\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/potentasn1\/objectidentifier\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/objectidentifier\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentasn1\/objectidentifier\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/objectidentifier","title":"ObjectIdentifier","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/suffixeddateformatter\/init(basepattern:secondspattern:checkhasseconds:)","title":"init(basePattern: String, secondsPattern: String, checkHasSeconds: (String) -> Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/suffixeddateformatter\/date(from:)","title":"func date(from: String) -> ZonedDate?","type":"method"}],"path":"\/documentation\/potentasn1\/suffixeddateformatter","title":"SuffixedDateFormatter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/taggedvalue\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/potentasn1\/taggedvalue\/init(tag:data:)","title":"init(tag: UInt8, data: Data)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/taggedvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/taggedvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/taggedvalue","title":"TaggedValue","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/==(_:_:)-46ewv","title":"func == (ASN1.AnyTag, ASN1.Tag) -> Bool","type":"op"},{"path":"\/documentation\/potentasn1\/==(_:_:)-9vscu","title":"func == (ASN1.Tag, ASN1.AnyTag) -> Bool","type":"op"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/oid","title":"OID","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/bitstring(_:_:)","title":"case bitString(Int, Data)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/bmpstring(_:)","title":"case bmpString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/boolean(_:)","title":"case boolean(Bool)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/characterstring(_:)","title":"case characterString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/default(_:)","title":"case `default`(ASN1)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/generalstring(_:)","title":"case generalString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/generalizedtime(_:)","title":"case generalizedTime(ZonedDate)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/graphicstring(_:)","title":"case graphicString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/ia5string(_:)","title":"case ia5String(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/integer(_:)","title":"case integer(BigInt)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/null","title":"case null","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/numericstring(_:)","title":"case numericString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/objectidentifier(_:)","title":"case objectIdentifier([UInt64])","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/octetstring(_:)","title":"case octetString(Data)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/printablestring(_:)","title":"case printableString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/real(_:)","title":"case real(Decimal)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/sequence(_:)","title":"case sequence([ASN1])","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/set(_:)","title":"case set([ASN1])","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tagged(_:_:)","title":"case tagged(UInt8, Data)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/teletexstring(_:)","title":"case teletexString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/universalstring(_:)","title":"case universalString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/utctime(_:)","title":"case utcTime(ZonedDate)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/utf8string(_:)","title":"case utf8String(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/videotexstring(_:)","title":"case videotexString(String)","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/visiblestring(_:)","title":"case visibleString(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/absolute","title":"var absolute: ASN1","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/anytag-swift.property","title":"var anyTag: AnyTag","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/bitstringvalue","title":"var bitStringValue: BitString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/bmpstringvalue","title":"var bmpStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/booleanvalue","title":"var booleanValue: Bool?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/characterstringvalue","title":"var characterStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/collectionvalue","title":"var collectionValue: [ASN1]?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/currentvalue","title":"var currentValue: Any?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/generalstringvalue","title":"var generalStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/generalizedtimevalue","title":"var generalizedTimeValue: AnyTime?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/graphicstringvalue","title":"var graphicStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/ia5stringvalue","title":"var ia5StringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/integervalue","title":"var integerValue: ASN1.Integer?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/knowntag","title":"var knownTag: Tag?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/numericstringvalue","title":"var numericStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/objectidentifiervalue","title":"var objectIdentifierValue: ObjectIdentifier?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/octetstringvalue","title":"var octetStringValue: Data?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/printablestringvalue","title":"var printableStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/realvalue","title":"var realValue: Decimal?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/sequencevalue","title":"var sequenceValue: [ASN1]?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/setvalue","title":"var setValue: [ASN1]?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/stringvalue","title":"var stringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/tagname","title":"var tagName: String","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/taggedvalue","title":"var taggedValue: TaggedValue?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/teletexstringvalue","title":"var teletexStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/timevalue","title":"var timeValue: AnyTime?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/universalstringvalue","title":"var universalStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/utctimevalue","title":"var utcTimeValue: AnyTime?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/utf8stringvalue","title":"var utf8StringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/videotexstringvalue","title":"var videotexStringValue: AnyString?","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/visiblestringvalue","title":"var visibleStringValue: AnyString?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/anytag-swift.typealias","title":"ASN1.AnyTag","type":"typealias"},{"path":"\/documentation\/potentasn1\/asn1\/decoder","title":"ASN1.Decoder","type":"typealias"},{"path":"\/documentation\/potentasn1\/asn1\/encoder","title":"ASN1.Encoder","type":"typealias"},{"path":"\/documentation\/potentasn1\/asn1\/integer","title":"ASN1.Integer","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/bitstring","title":"case bitString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/bmpstring","title":"case bmpString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/boolean","title":"case boolean","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/characterstring","title":"case characterString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/embedded","title":"case embedded","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/enumerated","title":"case enumerated","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/external","title":"case external","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/generalstring","title":"case generalString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/generalizedtime","title":"case generalizedTime","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/graphicstring","title":"case graphicString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/ia5string","title":"case ia5String","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/integer","title":"case integer","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/null","title":"case null","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/numericstring","title":"case numericString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/objectdescriptor","title":"case objectDescriptor","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/objectidentifier","title":"case objectIdentifier","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/octetstring","title":"case octetString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/printablestring","title":"case printableString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/real","title":"case real","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/relativeoid","title":"case relativeOID","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/sequence","title":"case sequence","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/set","title":"case set","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/teletexstring","title":"case teletexString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/universalstring","title":"case universalString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/utctime","title":"case utcTime","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/utf8string","title":"case utf8String","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/videotexstring","title":"case videotexString","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/visiblestring","title":"case visibleString","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/init(rawvalue:)","title":"init?(rawValue: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/constructed","title":"var constructed: AnyTag","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/primitive","title":"var primitive: AnyTag","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/universal","title":"var universal: AnyTag","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/tag(from:in:constructed:)","title":"static func tag(from: UInt8, in: Class, constructed: Bool) -> AnyTag","type":"method"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/value(from:in:)","title":"static func value(from: AnyTag, in: Class) -> AnyTag","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/application","title":"case application","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/contextspecific","title":"case contextSpecific","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/private","title":"case `private`","type":"case"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/universal","title":"case universal","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/init(rawvalue:)","title":"init?(rawValue: UInt8)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/potentasn1\/asn1\/tag\/class\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/asn1\/tag\/class","title":"ASN1.Tag.Class","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentasn1\/asn1\/tag\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/asn1\/tag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/potentasn1\/asn1\/tag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/potentasn1\/asn1\/tag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/asn1\/tag","title":"ASN1.Tag","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/init(from:)","title":"init(from: Swift.Decoder) throws","type":"init"}],"path":"\/documentation\/potentasn1\/asn1\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/encode(to:)","title":"func encode(to: Swift.Encoder) throws","type":"method"}],"path":"\/documentation\/potentasn1\/asn1\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/asn1\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/asn1\/unwrapped","title":"var unwrapped: Any?","type":"property"}],"path":"\/documentation\/potentasn1\/asn1\/value-implementations","title":"Value Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/asn1","title":"ASN1","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1serialization\/asn1(fromder:)","title":"static func asn1(fromDER: Data) throws -> [ASN1]","type":"method"},{"path":"\/documentation\/potentasn1\/asn1serialization\/der(from:)-2cciq","title":"static func der(from: [ASN1]) throws -> Data","type":"method"},{"path":"\/documentation\/potentasn1\/asn1serialization\/der(from:)-7ylvr","title":"static func der(from: ASN1) throws -> Data","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/invalidgeneralizedtime","title":"case invalidGeneralizedTime","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/invalidobjectidentifierlength","title":"case invalidObjectIdentifierLength","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/invalidstringcharacters","title":"case invalidStringCharacters","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/invalidstringencoding","title":"case invalidStringEncoding","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/invalidtaggeditem","title":"case invalidTaggedItem","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/invalidutctime","title":"case invalidUTCTime","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/lengthoverflow","title":"case lengthOverflow","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/nonconstructedcollection","title":"case nonConstructedCollection","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/unexpectedeof","title":"case unexpectedEOF","type":"case"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/unsupportedreal","title":"case unsupportedReal","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/asn1serialization\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/asn1serialization\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentasn1\/asn1serialization\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/asn1serialization\/error","title":"ASN1Serialization.Error","type":"enum"}],"path":"\/documentation\/potentasn1\/asn1serialization","title":"ASN1Serialization","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/any","title":"case any","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/bitstring(size:)","title":"case bitString(size: Size?)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/boolean(default:)","title":"case boolean(default: Bool?)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/choiceof(_:)","title":"case choiceOf([Schema])","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/dynamic(unknowntypeschema:_:)","title":"case dynamic(unknownTypeSchema: Schema?, DynamicMap)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/explicit(_:in:_:)","title":"case explicit(UInt8, in: ASN1.Tag.Class, Schema)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/implicit(_:in:_:)","title":"case implicit(UInt8, in: ASN1.Tag.Class, Schema)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/integer(allowed:default:)","title":"case integer(allowed: Swift.Range<BigInt>?, default: BigInt?)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/nothing","title":"case nothing","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/null","title":"case null","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/objectidentifier(allowed:)","title":"case objectIdentifier(allowed: Set<OID>?)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/octetstring(size:)","title":"case octetString(size: Size?)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/optional(_:)","title":"case optional(Schema)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/real","title":"case real","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/sequence(_:)","title":"case sequence(StructureSequenceMap)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/sequenceof(_:size:)","title":"case sequenceOf(Schema, size: Size?)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/setof(_:size:)","title":"case setOf(Schema, size: Size?)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/string(kind:size:)","title":"case string(kind: AnyString.Kind, size: Size?)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/time(kind:)","title":"case time(kind: AnyTime.Kind)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/type(_:)","title":"case type(Schema)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/version(_:)","title":"case version(Schema)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/versioned(range:_:)","title":"case versioned(range: ClosedRange<BigInt>, Schema)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/defaultvalue","title":"var defaultValue: ASN1?","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isbitstring","title":"var isBitString: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isboolean","title":"var isBoolean: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/iscollection","title":"var isCollection: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isdynamic","title":"var isDynamic: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isinteger","title":"var isInteger: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isobjectidentifier","title":"var isObjectIdentifier: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isoctetstring","title":"var isOctetString: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isoptional","title":"var isOptional: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isreal","title":"var isReal: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/issequence","title":"var isSequence: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/issequenceof","title":"var isSequenceOf: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/issetof","title":"var isSetOf: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isstring","title":"var isString: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/istime","title":"var isTime: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/isversioned","title":"var isVersioned: Bool","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/possibletags","title":"var possibleTags: [ASN1.AnyTag]?","type":"property"},{"path":"\/documentation\/potentasn1\/schema\/unwrapdirectives","title":"var unwrapDirectives: Schema","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/defaultvalueencoded()","title":"func defaultValueEncoded() throws -> ASN1?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/dynamicmap","title":"Schema.DynamicMap","type":"typealias"},{"path":"\/documentation\/potentasn1\/schema\/structuresequencemap","title":"Schema.StructureSequenceMap","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/size\/is(_:)","title":"case `is`(Int)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/size\/max(_:)","title":"case max(Int)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/size\/min(_:)","title":"case min(Int)","type":"case"},{"path":"\/documentation\/potentasn1\/schema\/size\/range(_:_:)","title":"case range(Int, Int)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/size\/contains(_:)","title":"func contains(Int) -> Bool","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/size\/in(_:)","title":"static func `in`(ClosedRange<Int>) -> Size","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/size\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentasn1\/schema\/size\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/size\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/schema\/size\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/schema\/size","title":"Schema.Size","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentasn1\/schema\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentasn1\/schema\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentasn1\/schema\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentasn1\/schema","title":"Schema","type":"enum"}],"path":"\/documentation\/potentasn1","title":"PotentASN1","type":"module"},{"children":[{"title":"Codable","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/cbor-serialization","title":"Reading and Writing CBOR","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordatastream\/init(data:offset:)","title":"init(data: Data, offset: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordatastream\/data","title":"var data: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordatastream\/readbyte()","title":"func readByte() throws -> UInt8","type":"method"},{"path":"\/documentation\/potentcbor\/cbordatastream\/readbytes(count:)","title":"func readBytes(count: Int) throws -> Data","type":"method"},{"path":"\/documentation\/potentcbor\/cbordatastream\/readbytes(into:)","title":"func readBytes<T>(into: UnsafeMutablePointer<T>) throws","type":"method"},{"path":"\/documentation\/potentcbor\/cbordatastream\/reset()","title":"func reset()","type":"method"},{"path":"\/documentation\/potentcbor\/cbordatastream\/writebyte(_:)","title":"func writeByte(UInt8) throws","type":"method"},{"path":"\/documentation\/potentcbor\/cbordatastream\/writebytes(_:)-2w8p7","title":"func writeBytes(Data) throws","type":"method"},{"path":"\/documentation\/potentcbor\/cbordatastream\/writebytes(_:)-3bzr","title":"func writeBytes(UnsafeBufferPointer<UInt8>) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordatastream\/readint(_:)","title":"func readInt<T>(T.Type) throws -> T","type":"method"}],"path":"\/documentation\/potentcbor\/cbordatastream\/cborinputstream-implementations","title":"CBORInputStream Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordatastream\/writeint(_:)","title":"func writeInt<T>(T) throws","type":"method"}],"path":"\/documentation\/potentcbor\/cbordatastream\/cboroutputstream-implementations","title":"CBOROutputStream Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cbordatastream","title":"CBORDataStream","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecoder\/options","title":"var options: CBORDecoderTransform.Options","type":"property"},{"path":"\/documentation\/potentcbor\/cbordecoder\/untaggeddatedecodingstrategy-swift.property","title":"var untaggedDateDecodingStrategy: UntaggedDateDecodingStrategy","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecoder\/default","title":"static let `default`: CBORDecoder","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecoder\/untaggeddatedecodingstrategy-swift.enum\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/potentcbor\/cbordecoder\/untaggeddatedecodingstrategy-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"},{"path":"\/documentation\/potentcbor\/cbordecoder\/untaggeddatedecodingstrategy-swift.enum\/unitssince1970","title":"case unitsSince1970","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecoder\/untaggeddatedecodingstrategy-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentcbor\/cbordecoder\/untaggeddatedecodingstrategy-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cbordecoder\/untaggeddatedecodingstrategy-swift.enum","title":"CBORDecoder.UntaggedDateDecodingStrategy","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecoder\/input","title":"CBORDecoder.Input","type":"typealias"}],"path":"\/documentation\/potentcbor\/cbordecoder\/topleveldecoder-implementations","title":"TopLevelDecoder Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cbordecoder","title":"CBORDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencoder\/dateencodingstrategy-swift.property","title":"var dateEncodingStrategy: DateEncodingStrategy","type":"property"},{"path":"\/documentation\/potentcbor\/cborencoder\/options","title":"var options: CBOREncoderTransform.Options","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencoder\/default","title":"static let `default`: CBOREncoder","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencoder\/dateencodingstrategy-swift.enum\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/potentcbor\/cborencoder\/dateencodingstrategy-swift.enum\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/potentcbor\/cborencoder\/dateencodingstrategy-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencoder\/dateencodingstrategy-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentcbor\/cborencoder\/dateencodingstrategy-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cborencoder\/dateencodingstrategy-swift.enum","title":"CBOREncoder.DateEncodingStrategy","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencoder\/output","title":"CBOREncoder.Output","type":"typealias"}],"path":"\/documentation\/potentcbor\/cborencoder\/toplevelencoder-implementations","title":"TopLevelEncoder Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cborencoder","title":"CBOREncoder","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborinputstream\/readbyte()","title":"func readByte() throws -> UInt8","type":"method"},{"path":"\/documentation\/potentcbor\/cborinputstream\/readbytes(count:)","title":"func readBytes(count: Int) throws -> Data","type":"method"},{"path":"\/documentation\/potentcbor\/cborinputstream\/readbytes(into:)","title":"func readBytes<T>(into: UnsafeMutablePointer<T>) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/potentcbor\/cborinputstream\/readint(_:)-25iq3","title":"func readInt<T>(T.Type) throws -> T","type":"method"}],"title":"CBORInputStream Implementations","type":"groupMarker"}],"path":"\/documentation\/potentcbor\/cborinputstream\/readint(_:)-9jfmr","title":"func readInt<T>(T.Type) throws -> T","type":"method"}],"path":"\/documentation\/potentcbor\/cborinputstream","title":"CBORInputStream","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cboroutputstream\/writebyte(_:)","title":"func writeByte(UInt8) throws","type":"method"},{"path":"\/documentation\/potentcbor\/cboroutputstream\/writebytes(_:)-913xc","title":"func writeBytes(UnsafeBufferPointer<UInt8>) throws","type":"method"},{"path":"\/documentation\/potentcbor\/cboroutputstream\/writebytes(_:)-ftde","title":"func writeBytes(Data) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/potentcbor\/cboroutputstream\/writeint(_:)-6zqn7","title":"func writeInt<T>(T) throws","type":"method"}],"title":"CBOROutputStream Implementations","type":"groupMarker"}],"path":"\/documentation\/potentcbor\/cboroutputstream\/writeint(_:)-28n2f","title":"func writeInt<T>(T) throws","type":"method"}],"path":"\/documentation\/potentcbor\/cboroutputstream","title":"CBOROutputStream","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/options\/keydecodingstrategy","title":"let keyDecodingStrategy: KeyDecodingStrategy","type":"property"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/options\/untaggeddatedecodingstrategy","title":"let untaggedDateDecodingStrategy: CBORDecoder.UntaggedDateDecodingStrategy","type":"property"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentcbor\/cbordecodertransform\/options","title":"CBORDecoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/state","title":"CBORDecoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/value","title":"CBORDecoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/nilvalue","title":"static let nilValue: CBOR","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/intercepts(_:)-36pj9","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-11466","title":"static func unbox(CBOR, as: String.Type, decoder: IVD) throws -> String?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-11lrw","title":"static func unbox(CBOR, as: UInt32.Type, decoder: IVD) throws -> UInt32?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-1mjvp","title":"static func unbox(CBOR, as: URL.Type, decoder: IVD) throws -> URL?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-2ovjf","title":"static func unbox(CBOR, as: BigUInt.Type, decoder: IVD) throws -> BigUInt?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-3mh7g","title":"static func unbox(CBOR, as: UInt.Type, decoder: IVD) throws -> UInt?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-3pblr","title":"static func unbox(CBOR, as: Bool.Type, decoder: IVD) throws -> Bool?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-4x0z8","title":"static func unbox(CBOR, as: Int16.Type, decoder: IVD) throws -> Int16?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-5au52","title":"static func unbox(CBOR, as: Double.Type, decoder: IVD) throws -> Double?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-5pd12","title":"static func unbox(CBOR, as: UInt8.Type, decoder: IVD) throws -> UInt8?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-5rb99","title":"static func unbox(CBOR, as: Date.Type, decoder: IVD) throws -> Date?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-67xpt","title":"static func unbox(CBOR, as: Int64.Type, decoder: IVD) throws -> Int64?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-6fjeh","title":"static func unbox(CBOR, as: CBOR.Half.Type, decoder: IVD) throws -> CBOR.Half?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-6ug1l","title":"static func unbox(CBOR, as: Data.Type, decoder: IVD) throws -> Data?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-7av0s","title":"static func unbox(CBOR, as: UUID.Type, decoder: IVD) throws -> UUID?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-7i12q","title":"static func unbox(CBOR, as: AnyValue.Type, decoder: IVD) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-7s7y1","title":"static func unbox(CBOR, as: BigInt.Type, decoder: IVD) throws -> BigInt?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-7yg4d","title":"static func unbox(CBOR, as: UInt64.Type, decoder: IVD) throws -> UInt64?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-88nuh","title":"static func unbox(CBOR, as: Decimal.Type, decoder: IVD) throws -> Decimal?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-91wwk","title":"static func unbox(CBOR, as: Int8.Type, decoder: IVD) throws -> Int8?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-9cjrq","title":"static func unbox(CBOR, as: UInt16.Type, decoder: IVD) throws -> UInt16?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-9ftnm","title":"static func unbox(CBOR, as: Int32.Type, decoder: IVD) throws -> Int32?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-9he27","title":"static func unbox(CBOR, as: Int.Type, decoder: IVD) throws -> Int?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:as:decoder:)-xdfq","title":"static func unbox(CBOR, as: Float.Type, decoder: IVD) throws -> Float?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:interceptedtype:decoder:)-51m8w","title":"static func unbox(CBOR, interceptedType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:type:decoder:)-32sx7","title":"static func unbox<T>(CBOR, type: T.Type, decoder: IVD) throws -> T?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:type:decoder:)-5rv2b","title":"static func unbox(CBOR, type: Decimal.Type, decoder: IVD) throws -> Decimal?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:type:decoder:)-72nvj","title":"static func unbox<T>(CBOR, type: T.Type, decoder: IVD) throws -> T?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/value(from:options:)","title":"static func value(from: Data, options: Options) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/valuetokeyedvalues(_:decoder:)","title":"static func valueToKeyedValues(CBOR, decoder: IVD) throws -> KeyedValues?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/valuetounkeyedvalues(_:decoder:)","title":"static func valueToUnkeyedValues(CBOR, decoder: IVD) throws -> UnkeyedValues?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/intercepts(_:)-29flr","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:interceptedtype:decoder:)-db5k","title":"static func unbox(Self.Value, interceptedType: Decodable.Type, decoder: Self.IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentcbor\/cbordecodertransform\/unbox(_:othertype:decoder:)","title":"static func unbox(Self.Value, otherType: Decodable.Type, decoder: Self.IVD) throws -> Any?","type":"method"}],"path":"\/documentation\/potentcbor\/cbordecodertransform\/internaldecodertransform-implementations","title":"InternalDecoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cbordecodertransform","title":"CBORDecoderTransform","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/options\/dateencodingstrategy","title":"let dateEncodingStrategy: CBOREncoder.DateEncodingStrategy","type":"property"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/options\/keyencodingstrategy","title":"let keyEncodingStrategy: KeyEncodingStrategy","type":"property"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentcbor\/cborencodertransform\/options","title":"CBOREncoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/state","title":"CBOREncoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/value","title":"CBOREncoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/emptykeyedcontainer","title":"static var emptyKeyedContainer: CBOR","type":"property"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/emptyunkeyedcontainer","title":"static var emptyUnkeyedContainer: CBOR","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-1ixcs","title":"static func box(Float, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-1kf9g","title":"static func box(URL, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-1ox3p","title":"static func box(CBOR.Half, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-1r1m8","title":"static func box(BigUInt, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-1x0n0","title":"static func box(Date, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-2bo4r","title":"static func box(Int8, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-2cgry","title":"static func box(UInt32, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-2kr9t","title":"static func box(UInt16, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-2u8tb","title":"static func box(Int, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-3o53e","title":"static func box(Double, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-3vyco","title":"static func box(UInt, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-4fo0s","title":"static func box(Decimal, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-4fo6c","title":"static func box(UUID, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-4pm9w","title":"static func box(String, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-4wz9g","title":"static func box(Data, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-5qmbs","title":"static func box(UInt64, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-6lyrj","title":"static func box(Int32, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-7jfo4","title":"static func box(Int64, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-7qy8","title":"static func box(AnyValue, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-8c4x2","title":"static func box(Bool, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-8rp6o","title":"static func box(Int16, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-9rpxz","title":"static func box(UInt8, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:encoder:)-9szn2","title":"static func box(BigInt, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:interceptedtype:encoder:)-9tmrt","title":"static func box(Any, interceptedType: Encodable.Type, encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/boxnil(encoder:)","title":"static func boxNil(encoder: IVE) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/data(from:options:)","title":"static func data(from: CBOR, options: Options) throws -> Data","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/intercepts(_:)-14zw2","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/keyedvaluestovalue(_:encoder:)","title":"static func keyedValuesToValue(KeyedValues, encoder: IVE) -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/unkeyedvaluestovalue(_:encoder:)","title":"static func unkeyedValuesToValue(UnkeyedValues, encoder: IVE) -> CBOR","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:interceptedtype:encoder:)-9w7b9","title":"static func box(Any, interceptedType: Encodable.Type, encoder: Self.IVE) throws -> Self.Value","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/box(_:othertype:encoder:)","title":"static func box(Any, otherType: Encodable.Type, encoder: Self.IVE) throws -> Self.Value?","type":"method"},{"path":"\/documentation\/potentcbor\/cborencodertransform\/intercepts(_:)-6cmh1","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"}],"path":"\/documentation\/potentcbor\/cborencodertransform\/internalencodertransform-implementations","title":"InternalEncoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cborencodertransform","title":"CBOREncoderTransform","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/init(rawvalue:)","title":"init(rawValue: UInt64)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/rawvalue","title":"let rawValue: UInt64","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/base64","title":"static let base64: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/base64url","title":"static let base64Url: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/bigfloat","title":"static let bigfloat: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/decimalfraction","title":"static let decimalFraction: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/encodedcbordataitem","title":"static let encodedCBORDataItem: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/epochdatetime","title":"static let epochDateTime: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/expectedconversiontobase16encoding","title":"static let expectedConversionToBase16Encoding: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/expectedconversiontobase64encoding","title":"static let expectedConversionToBase64Encoding: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/expectedconversiontobase64urlencoding","title":"static let expectedConversionToBase64URLEncoding: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/iso8601datetime","title":"static let iso8601DateTime: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/mimemessage","title":"static let mimeMessage: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/negativebignum","title":"static let negativeBignum: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/positivebignum","title":"static let positiveBignum: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/regularexpression","title":"static let regularExpression: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/selfdescribecbor","title":"static let selfDescribeCBOR: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/uri","title":"static let uri: CBOR.Tag","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/uuid","title":"static let uuid: CBOR.Tag","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentcbor\/cbor\/tag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/tag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/potentcbor\/cbor\/tag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cbor\/tag","title":"CBOR.Tag","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/array(_:)","title":"case array(Array)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/boolean(_:)","title":"case boolean(Bool)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/bytestring(_:)","title":"case byteString(Data)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/double(_:)","title":"case double(Double)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/float(_:)","title":"case float(Float)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/half(_:)","title":"case half(Half)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/map(_:)","title":"case map(Map)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/negativeint(_:)","title":"case negativeInt(UInt64)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/null","title":"case null","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/simple(_:)","title":"case simple(UInt8)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/tagged(_:_:)","title":"case tagged(Tag, CBOR)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/undefined","title":"case undefined","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/unsignedint(_:)","title":"case unsignedInt(UInt64)","type":"case"},{"path":"\/documentation\/potentcbor\/cbor\/utf8string(_:)","title":"case utf8String(String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-1w70j","title":"init(Bool)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-2dasr","title":"init(Int64)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-4n19i","title":"init(Half)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-4t4ui","title":"init(Int)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-6bssb","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-87xe7","title":"init(Swift.Double)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-8jl8x","title":"init(String)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-8n58f","title":"init(UInt)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-9oqo2","title":"init(Swift.Float)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(_:)-9yhja","title":"init(Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/arrayvalue","title":"var arrayValue: Array?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/booleanvalue","title":"var booleanValue: Bool?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/bytesstringvalue","title":"var bytesStringValue: Data?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/doublevalue","title":"var doubleValue: Double?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/floatvalue","title":"var floatValue: Float?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/halfvalue","title":"var halfValue: Half?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/mapvalue","title":"var mapValue: Map?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/numbervalue","title":"var numberValue: Double?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/simplevalue","title":"var simpleValue: UInt8?","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/untagged","title":"var untagged: CBOR","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/utf8stringvalue","title":"var utf8StringValue: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/floatingpointvalue()","title":"func floatingPointValue<T>() -> T?","type":"method"},{"path":"\/documentation\/potentcbor\/cbor\/integervalue()","title":"func integerValue<T>() -> T?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/subscript(_:)","title":"subscript(CBOR) -> CBOR?","type":"subscript"},{"path":"\/documentation\/potentcbor\/cbor\/subscript(dynamicmember:)","title":"subscript(dynamicMember _: CBOR) -> CBOR?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/array","title":"CBOR.Array","type":"typealias"},{"path":"\/documentation\/potentcbor\/cbor\/decoder","title":"CBOR.Decoder","type":"typealias"},{"path":"\/documentation\/potentcbor\/cbor\/double","title":"CBOR.Double","type":"typealias"},{"path":"\/documentation\/potentcbor\/cbor\/encoder","title":"CBOR.Encoder","type":"typealias"},{"path":"\/documentation\/potentcbor\/cbor\/float","title":"CBOR.Float","type":"typealias"},{"path":"\/documentation\/potentcbor\/cbor\/half","title":"CBOR.Half","type":"typealias"},{"path":"\/documentation\/potentcbor\/cbor\/map","title":"CBOR.Map","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentcbor\/cbor\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(arrayliteral:)","title":"init(arrayLiteral: CBOR...)","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (CBOR, CBOR)...)","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(extendedgraphemeclusterliteral:)-543x7","title":"init(extendedGraphemeClusterLiteral: String)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(extendedgraphemeclusterliteral:)-7mm4g","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(nilliteral:)","title":"init(nilLiteral: ())","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebynilliteral-implementations","title":"ExpressibleByNilLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/init(unicodescalarliteral:)-4y2ri","title":"init(unicodeScalarLiteral: String)","type":"init"},{"path":"\/documentation\/potentcbor\/cbor\/init(unicodescalarliteral:)-8b9xu","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentcbor\/cbor\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cbor\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/potentcbor\/cbor\/unwrapped","title":"var unwrapped: Any?","type":"property"}],"path":"\/documentation\/potentcbor\/cbor\/value-implementations","title":"Value Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cbor","title":"CBOR","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborserialization\/cbor(from:)-1i445","title":"static func cbor(from: Data) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborserialization\/cbor(from:)-64jyj","title":"static func cbor(from: CBORInputStream) throws -> CBOR","type":"method"},{"path":"\/documentation\/potentcbor\/cborserialization\/data(from:)","title":"static func data(from: CBOR) throws -> Data","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/invalidbreak","title":"case invalidBreak","type":"case"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/invalidindefiniteelement","title":"case invalidIndefiniteElement","type":"case"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/invalidintegersize","title":"case invalidIntegerSize","type":"case"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/invaliditemtype","title":"case invalidItemType","type":"case"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/invalidutf8string","title":"case invalidUTF8String","type":"case"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/sequencetoolong","title":"case sequenceTooLong","type":"case"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/unexpectedendofstream","title":"case unexpectedEndOfStream","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentcbor\/cborserialization\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcbor\/cborserialization\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentcbor\/cborserialization\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentcbor\/cborserialization\/error","title":"CBORSerialization.Error","type":"enum"}],"path":"\/documentation\/potentcbor\/cborserialization","title":"CBORSerialization","type":"enum"}],"path":"\/documentation\/potentcbor","title":"PotentCBOR","type":"module"},{"children":[{"title":"Usage","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/gettingstarted","title":"Getting Started with Potent Codables","type":"article"},{"path":"\/documentation\/potentcodables\/data-formats","title":"Data Formats","type":"article"},{"path":"\/documentation\/potentcodables\/using-anyvalue","title":"Using AnyValue","type":"article"},{"path":"\/documentation\/potentcodables\/treevalues","title":"Tree Values","type":"article"},{"title":"Advanced","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/polymorphicencodingdecoding","title":"Polymorphic Encoding & Decoding","type":"article"},{"path":"\/documentation\/potentcodables\/custom-references","title":"Custom References","type":"article"},{"path":"\/documentation\/potentcodables\/implementing-formats","title":"Implementing New Data Formats","type":"article"},{"path":"\/documentation\/potentcodables\/protocols","title":"Encoder\/Decoder Protocols","type":"article"},{"title":"Other","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/combine","title":"Combine","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecoder\/options","title":"var options: AnyValueDecoderTransform.Options","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecoder\/default","title":"static let `default`: AnyValueDecoder","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecoder\/decode(_:from:)","title":"func decode<T>(T.Type, from: AnyValue) throws -> T","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecoder\/input","title":"AnyValueDecoder.Input","type":"typealias"}],"path":"\/documentation\/potentcodables\/anyvaluedecoder\/topleveldecoder-implementations","title":"TopLevelDecoder Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/anyvaluedecoder","title":"AnyValueDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencoder\/options","title":"var options: AnyValueEncoderTransform.Options","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencoder\/default","title":"static let `default`: AnyValueEncoder","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencoder\/encode(_:)","title":"func encode<T>(T) throws -> AnyValue","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencoder\/output","title":"AnyValueEncoder.Output","type":"typealias"}],"path":"\/documentation\/potentcodables\/anyvalueencoder\/toplevelencoder-implementations","title":"TopLevelEncoder Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/anyvalueencoder","title":"AnyValueEncoder","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/codingpath","title":"var codingPath: [CodingKey]","type":"property"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/options","title":"let options: Transform.Options","type":"property"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/state","title":"var state: Transform.State?","type":"property"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/container(keyedby:)","title":"func container<Key>(keyedBy: Key.Type) throws -> KeyedDecodingContainer<Key>","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/singlevaluecontainer()","title":"func singleValueContainer() throws -> SingleValueDecodingContainer","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/subdecode(with:block:)","title":"func subDecode<T>(with: Value, block: (Decoder) throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/unbox(value:as:)","title":"func unbox(value: Value, as: Decodable.Type) throws -> Any?","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/unkeyedcontainer()","title":"func unkeyedContainer() throws -> UnkeyedDecodingContainer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-1jm9o","title":"func decode(Int8.Type) throws -> Int8","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-1vgpu","title":"func decode(UInt64.Type) throws -> UInt64","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-1x9c7","title":"func decode(String.Type) throws -> String","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-50zwa","title":"func decode(Int.Type) throws -> Int","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-59z71","title":"func decode<T>(T.Type) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-5qz4","title":"func decode(Float.Type) throws -> Float","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-5wtk2","title":"func decode(UInt32.Type) throws -> UInt32","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-6ldyn","title":"func decode(Int64.Type) throws -> Int64","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-75035","title":"func decode(Bool.Type) throws -> Bool","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-75mni","title":"func decode(UInt8.Type) throws -> UInt8","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-8rm08","title":"func decode(Int16.Type) throws -> Int16","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-99zwp","title":"func decode(Int32.Type) throws -> Int32","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-fyot","title":"func decode(Double.Type) throws -> Double","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-kkno","title":"func decode(UInt.Type) throws -> UInt","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(_:)-kze1","title":"func decode(UInt16.Type) throws -> UInt16","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-3d7zl","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-3f8fh","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-57mw7","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-5ybyv","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-6fsx6","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-7keml","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-81ga3","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-84js8","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-8mi9b","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-97hx5","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-et82","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-t0hs","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decode(using:)-z1iw","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decodenil()","title":"func decodeNil() -> Bool","type":"method"}],"path":"\/documentation\/potentcodables\/internalvaluedecoder\/singlevaluedecodingcontainer-implementations","title":"SingleValueDecodingContainer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decodetreevalue()","title":"func decodeTreeValue() -> Any?","type":"method"},{"path":"\/documentation\/potentcodables\/internalvaluedecoder\/decodeunwrappedvalue()","title":"func decodeUnwrappedValue() -> Any?","type":"method"}],"path":"\/documentation\/potentcodables\/internalvaluedecoder\/treevaluedecodingcontainer-implementations","title":"TreeValueDecodingContainer Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/internalvaluedecoder","title":"InternalValueDecoder","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/codingpath","title":"var codingPath: [CodingKey]","type":"property"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/containercount","title":"var containerCount: Int","type":"property"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/options","title":"let options: Transform.Options","type":"property"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/state","title":"var state: Transform.State?","type":"property"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/box(value:)","title":"func box(value: Encodable) throws -> Value?","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/container(depth:)","title":"func container(depth: Int) -> Any","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/container(keyedby:)","title":"func container<Key>(keyedBy: Key.Type) -> KeyedEncodingContainer<Key>","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/poprolledupcontainer()","title":"func popRolledUpContainer() throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/singlevaluecontainer()","title":"func singleValueContainer() -> SingleValueEncodingContainer","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/subencode(_:)","title":"func subEncode((SubEncoder<Value, Transform>) throws -> Void) throws -> Value?","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/unkeyedcontainer()","title":"func unkeyedContainer() -> UnkeyedEncodingContainer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-2bbx8","title":"func encode(UInt32) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-2mpxk","title":"func encode(String) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-3lndl","title":"func encode(UInt8) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-4lkgd","title":"func encode(Int64) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-4s1ku","title":"func encode(UInt16) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-5jls4","title":"func encode(Int32) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-5kaii","title":"func encode(UInt) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-5whz9","title":"func encode(UInt64) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-6p9qz","title":"func encode(Int8) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-6q26e","title":"func encode(Int) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-6tf7x","title":"func encode(Float) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-6z8qr","title":"func encode(Double) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-76dn5","title":"func encode(Bool) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-7hq6b","title":"func encode(Int16) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:)-9jagg","title":"func encode<T>(T) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-1jcwi","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-2vekw","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-35khi","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-43q7s","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-4g4q3","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-4jbbo","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-50buw","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-5n6pk","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-6ec94","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-6irht","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-72mpa","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-7xnl1","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-97tc0","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-9ebl4","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encode(_:using:)-xnxq","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/internalvalueencoder\/encodenil()","title":"func encodeNil() throws","type":"method"}],"path":"\/documentation\/potentcodables\/internalvalueencoder\/singlevalueencodingcontainer-implementations","title":"SingleValueEncodingContainer Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/internalvalueencoder","title":"InternalValueEncoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyedcontainer\/init()","title":"init()","type":"init"},{"path":"\/documentation\/potentcodables\/keyedcontainer\/init(backing:)","title":"init<T>(backing: OrderedDictionary<String, T>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyedcontainer\/backing","title":"var backing: OrderedDictionary<String, Any>","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyedcontainer\/subscript(_:)","title":"subscript(String) -> Any?","type":"subscript"}],"path":"\/documentation\/potentcodables\/keyedcontainer","title":"KeyedContainer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/init(key:container:decoder:)","title":"init(key: K, container: KeyedDecodingContainer<K>, decoder: Decoder)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/codingpath","title":"var codingPath: [CodingKey]","type":"property"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/container(keyedby:)","title":"func container<Key>(keyedBy: Key.Type) throws -> KeyedDecodingContainer<Key>","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-10eob","title":"func decode(Int64.Type) throws -> Int64","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-1rt4v","title":"func decode(UInt16.Type) throws -> UInt16","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-28bic","title":"func decode(String.Type) throws -> String","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-2wvq0","title":"func decode(UInt64.Type) throws -> UInt64","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-3600l","title":"func decode(Int.Type) throws -> Int","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-3ily0","title":"func decode(Bool.Type) throws -> Bool","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-3zat8","title":"func decode(UInt.Type) throws -> UInt","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-5nq4m","title":"func decode<T>(T.Type) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-65heu","title":"func decode(Int16.Type) throws -> Int16","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-7bw4l","title":"func decode(Int8.Type) throws -> Int8","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-7jdof","title":"func decode(UInt8.Type) throws -> UInt8","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-95o2l","title":"func decode(UInt32.Type) throws -> UInt32","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-9c9p3","title":"func decode(Double.Type) throws -> Double","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-9mhaw","title":"func decode(Float.Type) throws -> Float","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(_:)-9r2i5","title":"func decode(Int32.Type) throws -> Int32","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decodenil()","title":"func decodeNil() -> Bool","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/singlevaluecontainer()","title":"func singleValueContainer() throws -> SingleValueDecodingContainer","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/unkeyedcontainer()","title":"func unkeyedContainer() throws -> UnkeyedDecodingContainer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-124cj","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-1b030","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-2jilt","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-3p5a3","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-4b1mr","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-62gkr","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-64he4","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-8b788","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-8flbu","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-91fc3","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-9wt8k","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-ae3c","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"},{"path":"\/documentation\/potentcodables\/keyednesteddecoder\/decode(using:)-ctt6","title":"func decode<Transformer>(using: Transformer) throws -> Transformer.Target","type":"method"}],"path":"\/documentation\/potentcodables\/keyednesteddecoder\/singlevaluedecodingcontainer-implementations","title":"SingleValueDecodingContainer Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/keyednesteddecoder","title":"KeyedNestedDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/init(key:container:encoder:)","title":"init(key: K, container: KeyedEncodingContainer<K>, encoder: Encoder)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/codingpath","title":"var codingPath: [CodingKey]","type":"property"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/container(keyedby:)","title":"func container<Key>(keyedBy: Key.Type) -> KeyedEncodingContainer<Key>","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-1t2aw","title":"func encode(Int) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-2g4hy","title":"func encode(Int8) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-2o9l3","title":"func encode(Bool) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-2wid1","title":"func encode(Double) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-326tv","title":"func encode(Float) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-3lz9w","title":"func encode(Int16) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-3rt9u","title":"func encode(UInt8) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-4iiz0","title":"func encode(UInt) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-4ri1k","title":"func encode(UInt16) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-787p6","title":"func encode(UInt32) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-7ay3q","title":"func encode(Int32) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-7g3ha","title":"func encode(String) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-90tu3","title":"func encode(UInt64) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-9dkkb","title":"func encode<T>(T) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-wiky","title":"func encode(Int64) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encodenil()","title":"func encodeNil() throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/singlevaluecontainer()","title":"func singleValueContainer() -> SingleValueEncodingContainer","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/unkeyedcontainer()","title":"func unkeyedContainer() -> UnkeyedEncodingContainer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-11ocl","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-1ius8","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-22f8u","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-2a348","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-3bupm","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-43zg9","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-56s5a","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-6qjgw","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-76xur","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-7x3lv","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-8rhua","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-8tucj","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-9g1v0","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-9z7mo","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"},{"path":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:using:)-m2w9","title":"func encode<Transformer>(Transformer.Target, using: Transformer) throws","type":"method"}],"path":"\/documentation\/potentcodables\/keyednestedencoder\/singlevalueencodingcontainer-implementations","title":"SingleValueEncodingContainer Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/keyednestedencoder","title":"KeyedNestedEncoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/unkeyedcontainer\/init(backing:)","title":"init(backing: [Any])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/unkeyedcontainer\/backing","title":"var backing: [Any]","type":"property"},{"path":"\/documentation\/potentcodables\/unkeyedcontainer\/count","title":"var count: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/unkeyedcontainer\/append(_:)","title":"func append(Any)","type":"method"},{"path":"\/documentation\/potentcodables\/unkeyedcontainer\/insert(_:at:)","title":"func insert(Any, at: Int)","type":"method"}],"path":"\/documentation\/potentcodables\/unkeyedcontainer","title":"UnkeyedContainer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valuedecoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valuedecoder\/keydecodingstrategy","title":"var keyDecodingStrategy: KeyDecodingStrategy","type":"property"},{"path":"\/documentation\/potentcodables\/valuedecoder\/options-swift.property","title":"var options: Transform.Options","type":"property"},{"path":"\/documentation\/potentcodables\/valuedecoder\/state","title":"var state: Transform.State?","type":"property"},{"path":"\/documentation\/potentcodables\/valuedecoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valuedecoder\/decode(_:from:)-1ed4n","title":"func decode<T>(T.Type, from: Data) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/valuedecoder\/decode(_:from:)-4wc1o","title":"func decode<T>(T.Type, from: String) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/valuedecoder\/decodeifpresent(_:from:)-63p09","title":"func decodeIfPresent<T>(T.Type, from: String) throws -> T?","type":"method"},{"path":"\/documentation\/potentcodables\/valuedecoder\/decodeifpresent(_:from:)-9st40","title":"func decodeIfPresent<T>(T.Type, from: Data) throws -> T?","type":"method"},{"path":"\/documentation\/potentcodables\/valuedecoder\/decodetree(_:from:)","title":"func decodeTree<T>(T.Type, from: Value) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/valuedecoder\/decodetreeifpresent(_:from:)","title":"func decodeTreeIfPresent<T>(T.Type, from: Value) throws -> T?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valuedecoder\/options-swift.typealias","title":"ValueDecoder.Options","type":"typealias"}],"path":"\/documentation\/potentcodables\/valuedecoder","title":"ValueDecoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valueencoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valueencoder\/keyencodingstrategy","title":"var keyEncodingStrategy: KeyEncodingStrategy","type":"property"},{"path":"\/documentation\/potentcodables\/valueencoder\/options","title":"var options: Transform.Options","type":"property"},{"path":"\/documentation\/potentcodables\/valueencoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valueencoder\/encode(_:)","title":"func encode<T>(T) throws -> Data","type":"method"},{"path":"\/documentation\/potentcodables\/valueencoder\/encodestring(_:)","title":"func encodeString<T>(T) throws -> String","type":"method"},{"path":"\/documentation\/potentcodables\/valueencoder\/encodetree(_:)","title":"func encodeTree<T>(T) throws -> Value","type":"method"}],"path":"\/documentation\/potentcodables\/valueencoder","title":"ValueEncoder","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/decodesfromdata\/decode(_:from:)","title":"func decode<T>(T.Type, from: Data) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/decodesfromdata\/decodeifpresent(_:from:)","title":"func decodeIfPresent<T>(T.Type, from: Data) throws -> T?","type":"method"}],"path":"\/documentation\/potentcodables\/decodesfromdata","title":"DecodesFromData","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/decodesfromstring\/decode(_:from:)","title":"func decode<T>(T.Type, from: String) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/decodesfromstring\/decodeifpresent(_:from:)","title":"func decodeIfPresent<T>(T.Type, from: String) throws -> T?","type":"method"}],"path":"\/documentation\/potentcodables\/decodesfromstring","title":"DecodesFromString","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/decodesfromtree\/value","title":"Value","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/decodesfromtree\/decodetree(_:from:)","title":"func decodeTree<T>(T.Type, from: Value) throws -> T","type":"method"},{"path":"\/documentation\/potentcodables\/decodesfromtree\/decodetreeifpresent(_:from:)","title":"func decodeTreeIfPresent<T>(T.Type, from: Value) throws -> T?","type":"method"}],"path":"\/documentation\/potentcodables\/decodesfromtree","title":"DecodesFromTree","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/encodestodata\/encode(_:)","title":"func encode<T>(T) throws -> Data","type":"method"}],"path":"\/documentation\/potentcodables\/encodestodata","title":"EncodesToData","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/encodestostring\/encodestring(_:)","title":"func encodeString<T>(T) throws -> String","type":"method"}],"path":"\/documentation\/potentcodables\/encodestostring","title":"EncodesToString","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/encodestotree\/value","title":"Value","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/encodestotree\/encodetree(_:)","title":"func encodeTree<T>(T) throws -> Value","type":"method"}],"path":"\/documentation\/potentcodables\/encodestotree","title":"EncodesToTree","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internaldecoderoptions\/keydecodingstrategy","title":"var keyDecodingStrategy: KeyDecodingStrategy","type":"property"},{"path":"\/documentation\/potentcodables\/internaldecoderoptions\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentcodables\/internaldecoderoptions","title":"InternalDecoderOptions","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/options","title":"Options","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/state","title":"State","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/value","title":"Value","type":"associatedtype"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/ivd","title":"InternalDecoderTransform.IVD","type":"typealias"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/keyedvalues","title":"InternalDecoderTransform.KeyedValues","type":"typealias"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unkeyedvalues","title":"InternalDecoderTransform.UnkeyedValues","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/nilvalue","title":"static var nilValue: Value","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/potentcodables\/internaldecodertransform\/intercepts(_:)-6s2cz","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"}],"title":"InternalDecoderTransform Implementations","type":"groupMarker"}],"path":"\/documentation\/potentcodables\/internaldecodertransform\/intercepts(_:)-1kmqs","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-10wtz","title":"static func unbox(Value, as: Int32.Type, decoder: IVD) throws -> Int32?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-15eh8","title":"static func unbox(Value, as: UInt32.Type, decoder: IVD) throws -> UInt32?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-1lyqg","title":"static func unbox(Value, as: Float.Type, decoder: IVD) throws -> Float?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-27lma","title":"static func unbox(Value, as: Int64.Type, decoder: IVD) throws -> Int64?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-3gm78","title":"static func unbox(Value, as: Double.Type, decoder: IVD) throws -> Double?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-491a9","title":"static func unbox(Value, as: UInt16.Type, decoder: IVD) throws -> UInt16?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-5uclt","title":"static func unbox(Value, as: UInt64.Type, decoder: IVD) throws -> UInt64?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-7ge5b","title":"static func unbox(Value, as: UInt.Type, decoder: IVD) throws -> UInt?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-7oo39","title":"static func unbox(Value, as: String.Type, decoder: IVD) throws -> String?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-7u3mh","title":"static func unbox(Value, as: UInt8.Type, decoder: IVD) throws -> UInt8?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-93sta","title":"static func unbox(Value, as: Int.Type, decoder: IVD) throws -> Int?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-9d4by","title":"static func unbox(Value, as: Bool.Type, decoder: IVD) throws -> Bool?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-c9qy","title":"static func unbox(Value, as: Int8.Type, decoder: IVD) throws -> Int8?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:as:decoder:)-f177","title":"static func unbox(Value, as: Int16.Type, decoder: IVD) throws -> Int16?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:interceptedtype:decoder:)-26ys8","title":"static func unbox(Value, interceptedType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"}],"title":"InternalDecoderTransform Implementations","type":"groupMarker"}],"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:interceptedtype:decoder:)-3osiz","title":"static func unbox(Value, interceptedType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:othertype:decoder:)-935tt","title":"static func unbox(Value, otherType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"}],"title":"InternalDecoderTransform Implementations","type":"groupMarker"}],"path":"\/documentation\/potentcodables\/internaldecodertransform\/unbox(_:othertype:decoder:)-51q9l","title":"static func unbox(Value, otherType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/valuetokeyedvalues(_:decoder:)","title":"static func valueToKeyedValues(Value, decoder: IVD) throws -> KeyedValues?","type":"method"},{"path":"\/documentation\/potentcodables\/internaldecodertransform\/valuetounkeyedvalues(_:decoder:)","title":"static func valueToUnkeyedValues(Value, decoder: IVD) throws -> UnkeyedValues?","type":"method"}],"path":"\/documentation\/potentcodables\/internaldecodertransform","title":"InternalDecoderTransform","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalencoderoptions\/keyencodingstrategy","title":"var keyEncodingStrategy: KeyEncodingStrategy","type":"property"},{"path":"\/documentation\/potentcodables\/internalencoderoptions\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentcodables\/internalencoderoptions","title":"InternalEncoderOptions","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/options","title":"Options","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/state","title":"State","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/value","title":"Value","type":"associatedtype"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/ive","title":"InternalEncoderTransform.IVE","type":"typealias"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/keyedvalues","title":"InternalEncoderTransform.KeyedValues","type":"typealias"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/unkeyedvalues","title":"InternalEncoderTransform.UnkeyedValues","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/emptykeyedcontainer","title":"static var emptyKeyedContainer: Value","type":"property"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/emptyunkeyedcontainer","title":"static var emptyUnkeyedContainer: Value","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-1qqaq","title":"static func box(Int, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-1xdbj","title":"static func box(UInt16, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-2kg99","title":"static func box(UInt64, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-2odto","title":"static func box(Int16, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-30l7h","title":"static func box(Int64, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-499v","title":"static func box(String, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-4j1dl","title":"static func box(Int32, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-5c04m","title":"static func box(Bool, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-626cx","title":"static func box(Float, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-8kwcz","title":"static func box(Int8, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-8q5a3","title":"static func box(UInt32, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-8wwr8","title":"static func box(Double, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-9495z","title":"static func box(UInt8, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:encoder:)-djbm","title":"static func box(UInt, encoder: IVE) throws -> Value","type":"method"},{"children":[{"children":[{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:interceptedtype:encoder:)-6seum","title":"static func box(Any, interceptedType: Encodable.Type, encoder: IVE) throws -> Value","type":"method"}],"title":"InternalEncoderTransform Implementations","type":"groupMarker"}],"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:interceptedtype:encoder:)-6x8w1","title":"static func box(Any, interceptedType: Encodable.Type, encoder: IVE) throws -> Value","type":"method"},{"children":[{"children":[{"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:othertype:encoder:)-681l","title":"static func box(Any, otherType: Encodable.Type, encoder: IVE) throws -> Value?","type":"method"}],"title":"InternalEncoderTransform Implementations","type":"groupMarker"}],"path":"\/documentation\/potentcodables\/internalencodertransform\/box(_:othertype:encoder:)-rkni","title":"static func box(Any, otherType: Encodable.Type, encoder: IVE) throws -> Value?","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/boxnil(encoder:)","title":"static func boxNil(encoder: IVE) throws -> Value","type":"method"},{"children":[{"children":[{"path":"\/documentation\/potentcodables\/internalencodertransform\/intercepts(_:)-1awe0","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"}],"title":"InternalEncoderTransform Implementations","type":"groupMarker"}],"path":"\/documentation\/potentcodables\/internalencodertransform\/intercepts(_:)-7wdji","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/keyedvaluestovalue(_:encoder:)","title":"static func keyedValuesToValue(KeyedValues, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/internalencodertransform\/unkeyedvaluestovalue(_:encoder:)","title":"static func unkeyedValuesToValue(UnkeyedValues, encoder: IVE) throws -> Value","type":"method"}],"path":"\/documentation\/potentcodables\/internalencodertransform","title":"InternalEncoderTransform","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvaluedeserializer\/options","title":"Options","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/internalvaluedeserializer\/value","title":"Value","type":"associatedtype"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvaluedeserializer\/value(from:options:)","title":"static func value(from: Data, options: Options) throws -> Value","type":"method"}],"path":"\/documentation\/potentcodables\/internalvaluedeserializer","title":"InternalValueDeserializer","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvalueparser\/options","title":"Options","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/internalvalueparser\/value","title":"Value","type":"associatedtype"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvalueparser\/value(from:options:)","title":"static func value(from: String, options: Options) throws -> Value","type":"method"}],"path":"\/documentation\/potentcodables\/internalvalueparser","title":"InternalValueParser","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvalueserializer\/options","title":"Options","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/internalvalueserializer\/value","title":"Value","type":"associatedtype"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvalueserializer\/data(from:options:)","title":"static func data(from: Value, options: Options) throws -> Data","type":"method"}],"path":"\/documentation\/potentcodables\/internalvalueserializer","title":"InternalValueSerializer","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvaluestringifier\/options","title":"Options","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/internalvaluestringifier\/value","title":"Value","type":"associatedtype"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/internalvaluestringifier\/string(from:options:)","title":"static func string(from: Value, options: Options) throws -> String","type":"method"}],"path":"\/documentation\/potentcodables\/internalvaluestringifier","title":"InternalValueStringifier","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/treevaluedecodingcontainer\/decodetreevalue()","title":"func decodeTreeValue() -> Any?","type":"method"},{"path":"\/documentation\/potentcodables\/treevaluedecodingcontainer\/decodeunwrappedvalue()","title":"func decodeUnwrappedValue() -> Any?","type":"method"}],"path":"\/documentation\/potentcodables\/treevaluedecodingcontainer","title":"TreeValueDecodingContainer","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/typeindex\/findtype(id:)","title":"static func findType(id: String) -> Decodable.Type?","type":"method"},{"path":"\/documentation\/potentcodables\/typeindex\/typeid(of:)","title":"static func typeId(of: Any.Type) -> String","type":"method"}],"path":"\/documentation\/potentcodables\/typeindex","title":"TypeIndex","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/typekeyprovider\/typekey","title":"static var typeKey: AnyCodingKey","type":"property"}],"path":"\/documentation\/potentcodables\/typekeyprovider","title":"TypeKeyProvider","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/value\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/potentcodables\/value\/unwrapped","title":"var unwrapped: Any?","type":"property"}],"path":"\/documentation\/potentcodables\/value","title":"Value","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valuedecodingtransformer\/source","title":"Source","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/valuedecodingtransformer\/target","title":"Target","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valuedecodingtransformer\/decode(_:)","title":"func decode(Source) throws -> Target","type":"method"}],"path":"\/documentation\/potentcodables\/valuedecodingtransformer","title":"ValueDecodingTransformer","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valueencodingtransformer\/source","title":"Source","type":"associatedtype"},{"path":"\/documentation\/potentcodables\/valueencodingtransformer\/target","title":"Target","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valueencodingtransformer\/encode(_:)","title":"func encode(Target) throws -> Source","type":"method"}],"path":"\/documentation\/potentcodables\/valueencodingtransformer","title":"ValueEncodingTransformer","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valuekeyprovider\/valuekey","title":"static var valueKey: AnyCodingKey","type":"property"}],"path":"\/documentation\/potentcodables\/valuekeyprovider","title":"ValueKeyProvider","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/valuestringdictionarydecodablemarker\/elementtype","title":"static var elementType: Decodable.Type","type":"property"}],"path":"\/documentation\/potentcodables\/valuestringdictionarydecodablemarker","title":"ValueStringDictionaryDecodableMarker","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(_:)","title":"init<Key>(Key)","type":"init"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(index:)","title":"init(index: Int)","type":"init"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(intvalue:)","title":"init(intValue: Int)","type":"init"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(stringvalue:)","title":"init(stringValue: String)","type":"init"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(stringvalue:intvalue:)","title":"init(stringValue: String, intValue: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/intvalue","title":"var intValue: Int?","type":"property"},{"path":"\/documentation\/potentcodables\/anycodingkey\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/key()","title":"func key<K>() throws -> K","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/potentcodables\/anycodingkey\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentcodables\/anycodingkey\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentcodables\/anycodingkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentcodables\/anycodingkey\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/potentcodables\/anycodingkey\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/potentcodables\/anycodingkey\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anycodingkey\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentcodables\/anycodingkey\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/anycodingkey","title":"AnyCodingKey","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/options\/keydecodingstrategy","title":"let keyDecodingStrategy: KeyDecodingStrategy","type":"property"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/options","title":"AnyValueDecoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/state","title":"AnyValueDecoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/value","title":"AnyValueDecoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/nilvalue","title":"static var nilValue: AnyValue","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/intercepts(_:)-8ha2r","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-1o5ak","title":"static func unbox(AnyValue, as: Bool.Type, decoder: IVD) throws -> Bool?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-1tcna","title":"static func unbox(AnyValue, as: Int8.Type, decoder: IVD) throws -> Int8?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-3vj32","title":"static func unbox(AnyValue, as: UInt64.Type, decoder: IVD) throws -> UInt64?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-4laeu","title":"static func unbox(AnyValue, as: Float.Type, decoder: IVD) throws -> Float?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-4mqzn","title":"static func unbox(AnyValue, as: BigInt.Type, decoder: IVD) throws -> BigInt?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-4vetr","title":"static func unbox(AnyValue, as: UInt8.Type, decoder: IVD) throws -> UInt8?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-5hg7v","title":"static func unbox(AnyValue, as: BigUInt.Type, decoder: IVD) throws -> BigUInt?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-62iu9","title":"static func unbox(AnyValue, as: UInt16.Type, decoder: IVD) throws -> UInt16?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-62nv9","title":"static func unbox(AnyValue, as: Int16.Type, decoder: IVD) throws -> Int16?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-67hbp","title":"static func unbox(AnyValue, as: Int32.Type, decoder: IVD) throws -> Int32?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-6aezr","title":"static func unbox(AnyValue, as: UInt32.Type, decoder: IVD) throws -> UInt32?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-6s0ia","title":"static func unbox(AnyValue, as: UInt.Type, decoder: IVD) throws -> UInt?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-71buz","title":"static func unbox(AnyValue, as: Int.Type, decoder: IVD) throws -> Int?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-758mq","title":"static func unbox(AnyValue, as: Data.Type, decoder: IVD) throws -> Data?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-76aqp","title":"static func unbox(AnyValue, as: Date.Type, decoder: IVD) throws -> Date?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-7awgy","title":"static func unbox(AnyValue, as: Float16.Type, decoder: IVD) throws -> Float16?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-7c1a7","title":"static func unbox(AnyValue, as: URL.Type, decoder: IVD) throws -> URL?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-7c7o","title":"static func unbox(AnyValue, as: UUID.Type, decoder: IVD) throws -> UUID?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-7pg8u","title":"static func unbox(AnyValue, as: Int64.Type, decoder: IVD) throws -> Int64?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-88ama","title":"static func unbox(AnyValue, as: String.Type, decoder: IVD) throws -> String?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-8e3by","title":"static func unbox(AnyValue, as: Double.Type, decoder: IVD) throws -> Double?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:as:decoder:)-8zuuo","title":"static func unbox(AnyValue, as: Decimal.Type, decoder: IVD) throws -> Decimal?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:interceptedtype:decoder:)-8jo7h","title":"static func unbox(AnyValue, interceptedType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/valuetokeyedvalues(_:decoder:)","title":"static func valueToKeyedValues(AnyValue, decoder: IVD) throws -> KeyedValues?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/valuetounkeyedvalues(_:decoder:)","title":"static func valueToUnkeyedValues(AnyValue, decoder: IVD) throws -> UnkeyedValues?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/intercepts(_:)-44f3x","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:interceptedtype:decoder:)-2pj02","title":"static func unbox(Value, interceptedType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/unbox(_:othertype:decoder:)","title":"static func unbox(Value, otherType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"}],"path":"\/documentation\/potentcodables\/anyvaluedecodertransform\/internaldecodertransform-implementations","title":"InternalDecoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/anyvaluedecodertransform","title":"AnyValueDecoderTransform","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/options\/keyencodingstrategy","title":"let keyEncodingStrategy: KeyEncodingStrategy","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/options","title":"AnyValueEncoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/state","title":"AnyValueEncoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/value","title":"AnyValueEncoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/emptykeyedcontainer","title":"static var emptyKeyedContainer: AnyValue","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/emptyunkeyedcontainer","title":"static var emptyUnkeyedContainer: AnyValue","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-1lt8m","title":"static func box(Double, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-26bjr","title":"static func box(UInt64, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-2k51i","title":"static func box(UInt32, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-3sicb","title":"static func box(URL, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-3u4fc","title":"static func box(Data, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-4cqsx","title":"static func box(BigUInt, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-4tuvr","title":"static func box(UUID, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-4ueyl","title":"static func box(Int32, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-5phv0","title":"static func box(Float16, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-61z8","title":"static func box(Int, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-66kv","title":"static func box(UInt, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-6n9kw","title":"static func box(BigInt, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-6wz0x","title":"static func box(Float, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-7f3ok","title":"static func box(Int64, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-7za3d","title":"static func box(Int8, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-8vwoi","title":"static func box(UInt16, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-8xel8","title":"static func box(Int16, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-8z4pi","title":"static func box(Bool, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-9bf5j","title":"static func box(Date, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-9fedp","title":"static func box(Decimal, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-g7f0","title":"static func box(UInt8, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:encoder:)-od21","title":"static func box(String, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:interceptedtype:encoder:)-55xrb","title":"static func box(Any, interceptedType: Encodable.Type, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/boxnil(encoder:)","title":"static func boxNil(encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/intercepts(_:)-5nsur","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/keyedvaluestovalue(_:encoder:)","title":"static func keyedValuesToValue(KeyedValues, encoder: IVE) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/unkeyedvaluestovalue(_:encoder:)","title":"static func unkeyedValuesToValue(UnkeyedValues, encoder: IVE) throws -> AnyValue","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:interceptedtype:encoder:)-8h3rf","title":"static func box(Any, interceptedType: Encodable.Type, encoder: IVE) throws -> Value","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/box(_:othertype:encoder:)","title":"static func box(Any, otherType: Encodable.Type, encoder: IVE) throws -> Value?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/intercepts(_:)-63o4i","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"}],"path":"\/documentation\/potentcodables\/anyvalueencodertransform\/internalencodertransform-implementations","title":"InternalEncoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/anyvalueencodertransform","title":"AnyValueEncoderTransform","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customembeddedref\/value-swift.struct\/init(_:)-1vo4n","title":"init<T>(T?)","type":"init"},{"path":"\/documentation\/potentcodables\/customembeddedref\/value-swift.struct\/init(_:)-591o9","title":"init(Any)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customembeddedref\/value-swift.struct\/value","title":"let value: Any?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customembeddedref\/value-swift.struct\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/potentcodables\/customembeddedref\/value-swift.struct","title":"CustomEmbeddedRef.Value","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customembeddedref\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customembeddedref\/value-swift.property","title":"let value: Any","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customembeddedref\/as(_:)","title":"func `as`<V>(V.Type) throws -> V","type":"method"}],"path":"\/documentation\/potentcodables\/customembeddedref","title":"CustomEmbeddedRef","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customref\/value-swift.struct\/init(_:)-6d2cr","title":"init<T>(T?)","type":"init"},{"path":"\/documentation\/potentcodables\/customref\/value-swift.struct\/init(_:)-744g7","title":"init(Any)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customref\/value-swift.struct\/value","title":"let value: Any?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customref\/value-swift.struct\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/potentcodables\/customref\/value-swift.struct","title":"CustomRef.Value","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customref\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customref\/value-swift.property","title":"let value: Any","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/customref\/as(_:)","title":"func `as`<V>(V.Type) throws -> V","type":"method"}],"path":"\/documentation\/potentcodables\/customref","title":"CustomRef","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","title":"static func addAllowedTypes([Decodable.Type])","type":"method"},{"path":"\/documentation\/potentcodables\/defaulttypeindex\/findtype(id:)","title":"static func findType(id: String) -> Decodable.Type?","type":"method"},{"path":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","title":"static func mapAllowedTypes([Decodable.Type]) -> [String : Decodable.Type]","type":"method"},{"path":"\/documentation\/potentcodables\/defaulttypeindex\/setallowedtypes(_:)","title":"static func setAllowedTypes([Decodable.Type])","type":"method"},{"path":"\/documentation\/potentcodables\/defaulttypeindex\/typeid(of:)","title":"static func typeId(of: Any.Type) -> String","type":"method"}],"path":"\/documentation\/potentcodables\/defaulttypeindex","title":"DefaultTypeIndex","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/defaulttypekey\/typekey","title":"static var typeKey: AnyCodingKey","type":"property"}],"path":"\/documentation\/potentcodables\/defaulttypekey","title":"DefaultTypeKey","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","title":"static var valueKey: AnyCodingKey","type":"property"}],"path":"\/documentation\/potentcodables\/defaultvaluekey","title":"DefaultValueKey","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/subencoder\/encoder","title":"let encoder: InternalValueEncoder<Value, Transform>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/subencoder\/keyedcontainer()","title":"func keyedContainer() -> KeyedContainer","type":"method"},{"path":"\/documentation\/potentcodables\/subencoder\/unkeyedcontainer()","title":"func unkeyedContainer() -> UnkeyedContainer","type":"method"},{"path":"\/documentation\/potentcodables\/subencoder\/withcodingkey(_:_:)","title":"func withCodingKey(CodingKey, () throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/potentcodables\/subencoder","title":"SubEncoder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/zoneddate\/init(date:timezone:)","title":"init(date: Date, timeZone: TimeZone)","type":"init"},{"path":"\/documentation\/potentcodables\/zoneddate\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/potentcodables\/zoneddate\/init(iso8601encoded:)","title":"init?(iso8601Encoded: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/zoneddate\/date","title":"var date: Date","type":"property"},{"path":"\/documentation\/potentcodables\/zoneddate\/timezone","title":"var timeZone: TimeZone","type":"property"},{"path":"\/documentation\/potentcodables\/zoneddate\/utcdate","title":"var utcDate: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/zoneddate\/iso8601encodedstring()","title":"func iso8601EncodedString() -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/zoneddate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentcodables\/zoneddate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/zoneddate","title":"ZonedDate","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/embeddedref","title":"EmbeddedRef","type":"typealias"},{"path":"\/documentation\/potentcodables\/float16","title":"Float16","type":"typealias"},{"path":"\/documentation\/potentcodables\/ref","title":"Ref","type":"typealias"},{"path":"\/documentation\/potentcodables\/valuecodingtransformer","title":"ValueCodingTransformer","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/array(_:)","title":"case array(AnyArray)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/bool(_:)","title":"case bool(Bool)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/data(_:)","title":"case data(Data)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/date(_:)","title":"case date(Date)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/decimal(_:)","title":"case decimal(Decimal)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/dictionary(_:)","title":"case dictionary(AnyDictionary)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/double(_:)","title":"case double(Double)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/float(_:)","title":"case float(Float)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/float16(_:)","title":"case float16(Float16)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/int16(_:)","title":"case int16(Int16)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/int32(_:)","title":"case int32(Int32)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/int64(_:)","title":"case int64(Int64)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/int8(_:)","title":"case int8(Int8)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/integer(_:)","title":"case integer(BigInt)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/nil","title":"case `nil`","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/string(_:)","title":"case string(String)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint16(_:)","title":"case uint16(UInt16)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint32(_:)","title":"case uint32(UInt32)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint64(_:)","title":"case uint64(UInt64)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint8(_:)","title":"case uint8(UInt8)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/unsignedinteger(_:)","title":"case unsignedInteger(BigUInt)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/url(_:)","title":"case url(URL)","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/uuid(_:)","title":"case uuid(UUID)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/arrayvalue","title":"var arrayValue: AnyArray?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/boolvalue","title":"var boolValue: Bool?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/datavalue","title":"var dataValue: Data?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/datevalue","title":"var dateValue: Date?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/decimalvalue","title":"var decimalValue: Decimal?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/dictionaryvalue","title":"var dictionaryValue: AnyDictionary?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/doublevalue","title":"var doubleValue: Double?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/float16value","title":"var float16Value: Float16?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/floatvalue","title":"var floatValue: Float?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/int16value","title":"var int16Value: Int16?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/int32value","title":"var int32Value: Int32?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/int64value","title":"var int64Value: Int64?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/int8value","title":"var int8Value: Int8?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/intvalue","title":"var intValue: Int?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/stringvalue","title":"var stringValue: String?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint16value","title":"var uint16Value: UInt16?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint32value","title":"var uint32Value: UInt32?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint64value","title":"var uint64Value: UInt64?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint8value","title":"var uint8Value: UInt8?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/uintvalue","title":"var uintValue: UInt?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/urlvalue","title":"var urlValue: URL?","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/uuidvalue","title":"var uuidValue: UUID?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/floatingpointvalue(_:)","title":"func floatingPointValue<F>(F.Type) -> F?","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalue\/integervalue(_:)","title":"func integerValue<I>(I.Type) -> I?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/subscript(_:)-6s9h6","title":"subscript(AnyValue) -> AnyValue?","type":"subscript"},{"path":"\/documentation\/potentcodables\/anyvalue\/subscript(_:)-70d9o","title":"subscript(Int) -> AnyValue?","type":"subscript"},{"path":"\/documentation\/potentcodables\/anyvalue\/subscript(dynamicmember:)","title":"subscript(dynamicMember _: String) -> AnyValue?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/anyarray","title":"AnyValue.AnyArray","type":"typealias"},{"path":"\/documentation\/potentcodables\/anyvalue\/anydictionary","title":"AnyValue.AnyDictionary","type":"typealias"},{"path":"\/documentation\/potentcodables\/anyvalue\/decoder","title":"AnyValue.Decoder","type":"typealias"},{"path":"\/documentation\/potentcodables\/anyvalue\/encoder","title":"AnyValue.Encoder","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/int(_:)","title":"static func int(Int) -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalue\/uint(_:)","title":"static func uint(UInt) -> AnyValue","type":"method"},{"path":"\/documentation\/potentcodables\/anyvalue\/wrapped(_:)","title":"static func wrapped(Any?) throws -> AnyValue","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/error\/unsupportedtype","title":"case unsupportedType","type":"case"},{"path":"\/documentation\/potentcodables\/anyvalue\/error\/unsupportedvalue(_:)","title":"case unsupportedValue(Any)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentcodables\/anyvalue\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/anyvalue\/error","title":"AnyValue.Error","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentcodables\/anyvalue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(from:)","title":"init(from: Swift.Decoder) throws","type":"init"}],"path":"\/documentation\/potentcodables\/anyvalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/encode(to:)","title":"func encode(to: Swift.Encoder) throws","type":"method"}],"path":"\/documentation\/potentcodables\/anyvalue\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentcodables\/anyvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(arrayliteral:)","title":"init(arrayLiteral: ArrayLiteralElement...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/arrayliteralelement","title":"AnyValue.ArrayLiteralElement","type":"typealias"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(booleanliteral:)","title":"init(booleanLiteral: BooleanLiteralType)","type":"init"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (Key, Value)...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/key","title":"AnyValue.Key","type":"typealias"},{"path":"\/documentation\/potentcodables\/anyvalue\/value","title":"AnyValue.Value","type":"typealias"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(floatliteral:)","title":"init(floatLiteral: FloatLiteralType)","type":"init"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(integerliteral:)","title":"init(integerLiteral: IntegerLiteralType)","type":"init"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(nilliteral:)","title":"init(nilLiteral: ())","type":"init"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebynilliteral-implementations","title":"ExpressibleByNilLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentcodables\/anyvalue\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/anyvalue\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/potentcodables\/anyvalue\/unwrapped","title":"var unwrapped: Any?","type":"property"}],"path":"\/documentation\/potentcodables\/anyvalue\/value-implementations","title":"Value Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/anyvalue","title":"AnyValue","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keydecodingstrategy\/convertfromsnakecase","title":"case convertFromSnakeCase","type":"case"},{"path":"\/documentation\/potentcodables\/keydecodingstrategy\/custom(_:)","title":"case custom(([CodingKey]) -> CodingKey)","type":"case"},{"path":"\/documentation\/potentcodables\/keydecodingstrategy\/usedefaultkeys","title":"case useDefaultKeys","type":"case"}],"path":"\/documentation\/potentcodables\/keydecodingstrategy","title":"KeyDecodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/keyencodingstrategy\/converttosnakecase","title":"case convertToSnakeCase","type":"case"},{"path":"\/documentation\/potentcodables\/keyencodingstrategy\/custom(_:)","title":"case custom((_ codingPath: [CodingKey]) -> CodingKey)","type":"case"},{"path":"\/documentation\/potentcodables\/keyencodingstrategy\/usedefaultkeys","title":"case useDefaultKeys","type":"case"}],"path":"\/documentation\/potentcodables\/keyencodingstrategy","title":"KeyEncodingStrategy","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/refs\/decodetype(from:forkey:using:)","title":"static func decodeType(from: Decoder, forKey: AnyCodingKey, using: TypeIndex.Type) throws -> Decodable.Type","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/refs\/error\/invalidvalue(_:)","title":"case invalidValue(String)","type":"case"},{"path":"\/documentation\/potentcodables\/refs\/error\/typenotfound(_:)","title":"case typeNotFound(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentcodables\/refs\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentcodables\/refs\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentcodables\/refs\/error","title":"Refs.Error","type":"enum"}],"path":"\/documentation\/potentcodables\/refs","title":"Refs","type":"enum"}],"path":"\/documentation\/potentcodables","title":"PotentCodables","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecoder\/datadecodingstrategy-swift.property","title":"var dataDecodingStrategy: DataDecodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsondecoder\/datedecodingstrategy-swift.property","title":"var dateDecodingStrategy: DateDecodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsondecoder\/nonconformingfloatdecodingstrategy-swift.property","title":"var nonConformingFloatDecodingStrategy: NonConformingFloatDecodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsondecoder\/options","title":"var options: JSONDecoderTransform.Options","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecoder\/default","title":"static let `default`: JSONDecoder","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecoder\/datadecodingstrategy-swift.enum\/base64","title":"case base64","type":"case"},{"path":"\/documentation\/potentjson\/jsondecoder\/datadecodingstrategy-swift.enum\/custom(_:)","title":"case custom((_ decoder: Decoder) throws -> Data)","type":"case"},{"path":"\/documentation\/potentjson\/jsondecoder\/datadecodingstrategy-swift.enum\/deferredtodata","title":"case deferredToData","type":"case"}],"path":"\/documentation\/potentjson\/jsondecoder\/datadecodingstrategy-swift.enum","title":"JSONDecoder.DataDecodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecoder\/datedecodingstrategy-swift.enum\/custom(_:)","title":"case custom((_ decoder: Decoder) throws -> Date)","type":"case"},{"path":"\/documentation\/potentjson\/jsondecoder\/datedecodingstrategy-swift.enum\/deferredtodate","title":"case deferredToDate","type":"case"},{"path":"\/documentation\/potentjson\/jsondecoder\/datedecodingstrategy-swift.enum\/formatted(_:)","title":"case formatted(DateFormatter)","type":"case"},{"path":"\/documentation\/potentjson\/jsondecoder\/datedecodingstrategy-swift.enum\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/potentjson\/jsondecoder\/datedecodingstrategy-swift.enum\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/potentjson\/jsondecoder\/datedecodingstrategy-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"}],"path":"\/documentation\/potentjson\/jsondecoder\/datedecodingstrategy-swift.enum","title":"JSONDecoder.DateDecodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecoder\/nonconformingfloatdecodingstrategy-swift.enum\/convertfromstring(positiveinfinity:negativeinfinity:nan:)","title":"case convertFromString(positiveInfinity: String, negativeInfinity: String, nan: String)","type":"case"},{"path":"\/documentation\/potentjson\/jsondecoder\/nonconformingfloatdecodingstrategy-swift.enum\/throw","title":"case `throw`","type":"case"}],"path":"\/documentation\/potentjson\/jsondecoder\/nonconformingfloatdecodingstrategy-swift.enum","title":"JSONDecoder.NonConformingFloatDecodingStrategy","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecoder\/input","title":"JSONDecoder.Input","type":"typealias"}],"path":"\/documentation\/potentjson\/jsondecoder\/topleveldecoder-implementations","title":"TopLevelDecoder Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsondecoder","title":"JSONDecoder","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/init(rawvalue:)","title":"init(rawValue: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/rawvalue","title":"let rawValue: UInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/escapeslashes","title":"static let escapeSlashes: JSONEncoder.OutputFormatting","type":"property"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/prettyprinted","title":"static let prettyPrinted: JSONEncoder.OutputFormatting","type":"property"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/sortedkeys","title":"static let sortedKeys: JSONEncoder.OutputFormatting","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct","title":"JSONEncoder.OutputFormatting","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/dataencodingstrategy-swift.property","title":"var dataEncodingStrategy: JSONEncoder.DataEncodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsonencoder\/dateencodingstrategy-swift.property","title":"var dateEncodingStrategy: DateEncodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsonencoder\/nonconformingfloatencodingstrategy-swift.property","title":"var nonConformingFloatEncodingStrategy: JSONEncoder.NonConformingFloatEncodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsonencoder\/options","title":"var options: JSONEncoderTransform.Options","type":"property"},{"path":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.property","title":"var outputFormatting: OutputFormatting","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/default","title":"static let `default`: JSONEncoder","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/dataencodingstrategy-swift.enum\/base64","title":"case base64","type":"case"},{"path":"\/documentation\/potentjson\/jsonencoder\/dataencodingstrategy-swift.enum\/custom(_:)","title":"case custom((Data, Encoder) throws -> Void)","type":"case"},{"path":"\/documentation\/potentjson\/jsonencoder\/dataencodingstrategy-swift.enum\/deferredtodata","title":"case deferredToData","type":"case"}],"path":"\/documentation\/potentjson\/jsonencoder\/dataencodingstrategy-swift.enum","title":"JSONEncoder.DataEncodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/dateencodingstrategy-swift.enum\/custom(_:)","title":"case custom((Date, Encoder) throws -> Void)","type":"case"},{"path":"\/documentation\/potentjson\/jsonencoder\/dateencodingstrategy-swift.enum\/deferredtodate","title":"case deferredToDate","type":"case"},{"path":"\/documentation\/potentjson\/jsonencoder\/dateencodingstrategy-swift.enum\/formatted(_:)","title":"case formatted(DateFormatter)","type":"case"},{"path":"\/documentation\/potentjson\/jsonencoder\/dateencodingstrategy-swift.enum\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/potentjson\/jsonencoder\/dateencodingstrategy-swift.enum\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/potentjson\/jsonencoder\/dateencodingstrategy-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"}],"path":"\/documentation\/potentjson\/jsonencoder\/dateencodingstrategy-swift.enum","title":"JSONEncoder.DateEncodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/nonconformingfloatencodingstrategy-swift.enum\/converttostring(positiveinfinity:negativeinfinity:nan:)","title":"case convertToString(positiveInfinity: String, negativeInfinity: String, nan: String)","type":"case"},{"path":"\/documentation\/potentjson\/jsonencoder\/nonconformingfloatencodingstrategy-swift.enum\/throw","title":"case `throw`","type":"case"}],"path":"\/documentation\/potentjson\/jsonencoder\/nonconformingfloatencodingstrategy-swift.enum","title":"JSONEncoder.NonConformingFloatEncodingStrategy","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencoder\/output","title":"JSONEncoder.Output","type":"typealias"}],"path":"\/documentation\/potentjson\/jsonencoder\/toplevelencoder-implementations","title":"TopLevelEncoder Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsonencoder","title":"JSONEncoder","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/options\/datadecodingstrategy","title":"let dataDecodingStrategy: JSONDecoder.DataDecodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/options\/datedecodingstrategy","title":"let dateDecodingStrategy: JSONDecoder.DateDecodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/options\/keydecodingstrategy","title":"let keyDecodingStrategy: KeyDecodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/options\/nonconformingfloatdecodingstrategy","title":"let nonConformingFloatDecodingStrategy: JSONDecoder.NonConformingFloatDecodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentjson\/jsondecodertransform\/options","title":"JSONDecoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/state","title":"JSONDecoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/value","title":"JSONDecoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/nilvalue","title":"static let nilValue: JSON","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/intercepts(_:)-5kbcq","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-103ck","title":"static func unbox(JSON, as: Float16.Type, decoder: IVD) throws -> Float16?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-2elrm","title":"static func unbox(JSON, as: BigUInt.Type, decoder: IVD) throws -> BigUInt?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-2ofoq","title":"static func unbox(JSON, as: URL.Type, decoder: IVD) throws -> URL?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-2zwuk","title":"static func unbox(JSON, as: Int64.Type, decoder: IVD) throws -> Int64?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-4juiu","title":"static func unbox(JSON, as: UInt.Type, decoder: IVD) throws -> UInt?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-4kpc7","title":"static func unbox(JSON, as: BigInt.Type, decoder: IVD) throws -> BigInt?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-4xbzo","title":"static func unbox(JSON, as: Float.Type, decoder: IVD) throws -> Float?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-5ec21","title":"static func unbox(JSON, as: String.Type, decoder: IVD) throws -> String?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-5etwq","title":"static func unbox(JSON, as: UInt64.Type, decoder: IVD) throws -> UInt64?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-5gfd0","title":"static func unbox(JSON, as: UInt32.Type, decoder: IVD) throws -> UInt32?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-5lbqd","title":"static func unbox(JSON, as: Date.Type, decoder: IVD) throws -> Date?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-6bmys","title":"static func unbox(JSON, as: Decimal.Type, decoder: IVD) throws -> Decimal?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-6du75","title":"static func unbox(JSON, as: Bool.Type, decoder: IVD) throws -> Bool?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-6pmna","title":"static func unbox(JSON, as: Data.Type, decoder: IVD) throws -> Data?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-7alka","title":"static func unbox(JSON, as: UInt8.Type, decoder: IVD) throws -> UInt8?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-8mljc","title":"static func unbox(JSON, as: AnyValue.Type, decoder: IVD) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-8z6yo","title":"static func unbox(JSON, as: Int8.Type, decoder: IVD) throws -> Int8?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-90pns","title":"static func unbox(JSON, as: UInt16.Type, decoder: IVD) throws -> UInt16?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-9gn8x","title":"static func unbox(JSON, as: UUID.Type, decoder: IVD) throws -> UUID?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-9ivcb","title":"static func unbox(JSON, as: Int32.Type, decoder: IVD) throws -> Int32?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-9k2tn","title":"static func unbox(JSON, as: Int.Type, decoder: IVD) throws -> Int?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-9tlnj","title":"static func unbox(JSON, as: Double.Type, decoder: IVD) throws -> Double?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:as:decoder:)-px7j","title":"static func unbox(JSON, as: Int16.Type, decoder: IVD) throws -> Int16?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:interceptedtype:decoder:)-1uzi1","title":"static func unbox(JSON, interceptedType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/value(from:options:)-1nihx","title":"static func value(from: String, options: Options) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/value(from:options:)-ssq7","title":"static func value(from: Data, options: Options) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/valuetokeyedvalues(_:decoder:)","title":"static func valueToKeyedValues(JSON, decoder: IVD) throws -> KeyedValues?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/valuetounkeyedvalues(_:decoder:)","title":"static func valueToUnkeyedValues(JSON, decoder: IVD) throws -> UnkeyedValues?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/intercepts(_:)-1tvhj","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:interceptedtype:decoder:)-9m5xc","title":"static func unbox(Self.Value, interceptedType: Decodable.Type, decoder: Self.IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentjson\/jsondecodertransform\/unbox(_:othertype:decoder:)","title":"static func unbox(Self.Value, otherType: Decodable.Type, decoder: Self.IVD) throws -> Any?","type":"method"}],"path":"\/documentation\/potentjson\/jsondecodertransform\/internaldecodertransform-implementations","title":"InternalDecoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsondecodertransform","title":"JSONDecoderTransform","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/options\/dataencodingstrategy","title":"let dataEncodingStrategy: JSONEncoder.DataEncodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/options\/dateencodingstrategy","title":"let dateEncodingStrategy: JSONEncoder.DateEncodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/options\/keyencodingstrategy","title":"let keyEncodingStrategy: KeyEncodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/options\/nonconformingfloatencodingstrategy","title":"let nonConformingFloatEncodingStrategy: JSONEncoder.NonConformingFloatEncodingStrategy","type":"property"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/options\/outputformatting","title":"let outputFormatting: JSONEncoder.OutputFormatting","type":"property"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentjson\/jsonencodertransform\/options","title":"JSONEncoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/state","title":"JSONEncoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/value","title":"JSONEncoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/emptykeyedcontainer","title":"static var emptyKeyedContainer: JSON","type":"property"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/emptyunkeyedcontainer","title":"static var emptyUnkeyedContainer: JSON","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-15tmt","title":"static func box(UInt8, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-1zlhp","title":"static func box(Float16, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-23x7g","title":"static func box(UInt16, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-28myb","title":"static func box(Int16, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-2plcy","title":"static func box(Int8, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-2ywca","title":"static func box(AnyValue, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-37se","title":"static func box(Date, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-3a4zn","title":"static func box(UInt, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-3hm0i","title":"static func box(Decimal, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-3syv2","title":"static func box(Int64, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-3ypn5","title":"static func box(Float, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-49yms","title":"static func box(BigUInt, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-4qrm9","title":"static func box(Int32, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-4sw52","title":"static func box(String, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-5cetk","title":"static func box(Double, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-5tjnz","title":"static func box(UInt64, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-6cp3y","title":"static func box(UUID, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-6mrw1","title":"static func box(URL, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-71oe4","title":"static func box(Bool, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-7w5aw","title":"static func box(Int, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-8qu9e","title":"static func box(Data, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-9n51m","title":"static func box(UInt32, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:encoder:)-xexw","title":"static func box(BigInt, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:interceptedtype:encoder:)-7i470","title":"static func box(Any, interceptedType: Encodable.Type, encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/boxnil(encoder:)","title":"static func boxNil(encoder: IVE) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/data(from:options:)","title":"static func data(from: JSON, options: Options) throws -> Data","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/intercepts(_:)-2ga6y","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/keyedvaluestovalue(_:encoder:)","title":"static func keyedValuesToValue(KeyedValues, encoder: IVE) -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/string(from:options:)","title":"static func string(from: JSON, options: Options) throws -> String","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/unkeyedvaluestovalue(_:encoder:)","title":"static func unkeyedValuesToValue(UnkeyedValues, encoder: IVE) -> JSON","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:interceptedtype:encoder:)-7a4gc","title":"static func box(Any, interceptedType: Encodable.Type, encoder: Self.IVE) throws -> Self.Value","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/box(_:othertype:encoder:)","title":"static func box(Any, otherType: Encodable.Type, encoder: Self.IVE) throws -> Self.Value?","type":"method"},{"path":"\/documentation\/potentjson\/jsonencodertransform\/intercepts(_:)-4y9u9","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"}],"path":"\/documentation\/potentjson\/jsonencodertransform\/internalencodertransform-implementations","title":"InternalEncoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsonencodertransform","title":"JSONEncoderTransform","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/number\/init(_:)-2ykve","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/potentjson\/json\/number\/init(_:)-3uh7k","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/potentjson\/json\/number\/init(_:)-493zq","title":"init(String)","type":"init"},{"path":"\/documentation\/potentjson\/json\/number\/init(_:)-986u5","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/potentjson\/json\/number\/init(_:isinteger:isnegative:)","title":"init(String, isInteger: Bool, isNegative: Bool)","type":"init"},{"path":"\/documentation\/potentjson\/json\/number\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/number\/doublevalue","title":"var doubleValue: Double?","type":"property"},{"path":"\/documentation\/potentjson\/json\/number\/floatvalue","title":"var floatValue: Float?","type":"property"},{"path":"\/documentation\/potentjson\/json\/number\/integervalue","title":"var integerValue: Int?","type":"property"},{"path":"\/documentation\/potentjson\/json\/number\/isinteger","title":"var isInteger: Bool","type":"property"},{"path":"\/documentation\/potentjson\/json\/number\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/potentjson\/json\/number\/numbervalue","title":"var numberValue: Any?","type":"property"},{"path":"\/documentation\/potentjson\/json\/number\/unsignedintegervalue","title":"var unsignedIntegerValue: UInt?","type":"property"},{"path":"\/documentation\/potentjson\/json\/number\/value","title":"var value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/number\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentjson\/json\/number\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/number\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentjson\/json\/number\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/number\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/potentjson\/json\/number\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/number\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/potentjson\/json\/number\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/number\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/potentjson\/json\/number\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/number\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentjson\/json\/number\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/json\/number","title":"JSON.Number","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/array(_:)","title":"case array(Array)","type":"case"},{"path":"\/documentation\/potentjson\/json\/bool(_:)","title":"case bool(Bool)","type":"case"},{"path":"\/documentation\/potentjson\/json\/null","title":"case null","type":"case"},{"path":"\/documentation\/potentjson\/json\/number(_:)","title":"case number(Number)","type":"case"},{"path":"\/documentation\/potentjson\/json\/object(_:)","title":"case object(Object)","type":"case"},{"path":"\/documentation\/potentjson\/json\/string(_:)","title":"case string(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/arrayvalue","title":"var arrayValue: Array?","type":"property"},{"path":"\/documentation\/potentjson\/json\/boolvalue","title":"var boolValue: Bool?","type":"property"},{"path":"\/documentation\/potentjson\/json\/doublevalue","title":"var doubleValue: Double?","type":"property"},{"path":"\/documentation\/potentjson\/json\/floatvalue","title":"var floatValue: Float?","type":"property"},{"path":"\/documentation\/potentjson\/json\/integervalue","title":"var integerValue: Int?","type":"property"},{"path":"\/documentation\/potentjson\/json\/numbervalue","title":"var numberValue: Any?","type":"property"},{"path":"\/documentation\/potentjson\/json\/objectvalue","title":"var objectValue: Object?","type":"property"},{"path":"\/documentation\/potentjson\/json\/stringvalue","title":"var stringValue: String?","type":"property"},{"path":"\/documentation\/potentjson\/json\/unsignedintegervalue","title":"var unsignedIntegerValue: UInt?","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/subscript(_:)-7zkjf","title":"subscript(String) -> JSON?","type":"subscript"},{"path":"\/documentation\/potentjson\/json\/subscript(_:)-iegw","title":"subscript(Int) -> JSON?","type":"subscript"},{"path":"\/documentation\/potentjson\/json\/subscript(dynamicmember:)","title":"subscript(dynamicMember _: String) -> JSON?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/array","title":"JSON.Array","type":"typealias"},{"path":"\/documentation\/potentjson\/json\/decoder","title":"JSON.Decoder","type":"typealias"},{"path":"\/documentation\/potentjson\/json\/encoder","title":"JSON.Encoder","type":"typealias"},{"path":"\/documentation\/potentjson\/json\/object","title":"JSON.Object","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentjson\/json\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentjson\/json\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(arrayliteral:)","title":"init(arrayLiteral: ArrayLiteralElement...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/arrayliteralelement","title":"JSON.ArrayLiteralElement","type":"typealias"}],"path":"\/documentation\/potentjson\/json\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(booleanliteral:)","title":"init(booleanLiteral: BooleanLiteralType)","type":"init"}],"path":"\/documentation\/potentjson\/json\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (Key, Value)...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/key","title":"JSON.Key","type":"typealias"},{"path":"\/documentation\/potentjson\/json\/value","title":"JSON.Value","type":"typealias"}],"path":"\/documentation\/potentjson\/json\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentjson\/json\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(floatliteral:)","title":"init(floatLiteral: FloatLiteralType)","type":"init"}],"path":"\/documentation\/potentjson\/json\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(integerliteral:)","title":"init(integerLiteral: IntegerLiteralType)","type":"init"}],"path":"\/documentation\/potentjson\/json\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(nilliteral:)","title":"init(nilLiteral: ())","type":"init"}],"path":"\/documentation\/potentjson\/json\/expressiblebynilliteral-implementations","title":"ExpressibleByNilLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/potentjson\/json\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentjson\/json\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/json\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/potentjson\/json\/unwrapped","title":"var unwrapped: Any?","type":"property"}],"path":"\/documentation\/potentjson\/json\/value-implementations","title":"Value Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/json","title":"JSON","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/init(rawvalue:)","title":"init(rawValue: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/rawvalue","title":"let rawValue: UInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/allowfragments","title":"static let allowFragments: JSONSerialization.ReadingOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsonserialization\/readingoptions","title":"JSONSerialization.ReadingOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/init(rawvalue:)","title":"init(rawValue: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/rawvalue","title":"let rawValue: UInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/escapeslashes","title":"static let escapeSlashes: JSONSerialization.WritingOptions","type":"property"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/prettyprinted","title":"static let prettyPrinted: JSONSerialization.WritingOptions","type":"property"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/sortedkeys","title":"static let sortedKeys: JSONSerialization.WritingOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsonserialization\/writingoptions","title":"JSONSerialization.WritingOptions","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/data(from:options:)","title":"static func data(from: JSON, options: WritingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/json(from:options:)-3zfva","title":"static func json(from: String, options: ReadingOptions) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/json(from:options:)-9y58r","title":"static func json(from: Data, options: ReadingOptions) throws -> JSON","type":"method"},{"path":"\/documentation\/potentjson\/jsonserialization\/string(from:options:)","title":"static func string(from: JSON, options: WritingOptions) throws -> String","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/fragmentdisallowed","title":"case fragmentDisallowed","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata(_:position:)","title":"case invalidData(InvalidData, position: Int)","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/novalue","title":"case noValue","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/unexpectedendofstream","title":"case unexpectedEndOfStream","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/expectedarrayseparator","title":"case expectedArraySeparator","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/expectedobjectkey","title":"case expectedObjectKey","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/expectedobjectseparator","title":"case expectedObjectSeparator","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/expectedobjectvalue","title":"case expectedObjectValue","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/invalidarray","title":"case invalidArray","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/invalidescapesequence","title":"case invalidEscapeSequence","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/invalidnumber","title":"case invalidNumber","type":"case"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/invalidstring","title":"case invalidString","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsonserialization\/error\/invaliddata","title":"JSONSerialization.Error.InvalidData","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentjson\/jsonserialization\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentjson\/jsonserialization\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentjson\/jsonserialization\/error","title":"JSONSerialization.Error","type":"enum"}],"path":"\/documentation\/potentjson\/jsonserialization","title":"JSONSerialization","type":"enum"}],"path":"\/documentation\/potentjson","title":"PotentJSON","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datadecodingstrategy-swift.property","title":"var dataDecodingStrategy: DataDecodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datedecodingstrategy-swift.property","title":"var dateDecodingStrategy: DateDecodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamldecoder\/options","title":"var options: YAMLDecoderTransform.Options","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecoder\/default","title":"static let `default`: YAMLDecoder","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datadecodingstrategy-swift.enum\/base64","title":"case base64","type":"case"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datadecodingstrategy-swift.enum\/custom(_:)","title":"case custom((_ decoder: Decoder) throws -> Data)","type":"case"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datadecodingstrategy-swift.enum\/deferredtodata","title":"case deferredToData","type":"case"}],"path":"\/documentation\/potentyaml\/yamldecoder\/datadecodingstrategy-swift.enum","title":"YAMLDecoder.DataDecodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datedecodingstrategy-swift.enum\/custom(_:)","title":"case custom((_ decoder: Decoder) throws -> Date)","type":"case"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datedecodingstrategy-swift.enum\/deferredtodate","title":"case deferredToDate","type":"case"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datedecodingstrategy-swift.enum\/formatted(_:)","title":"case formatted(DateFormatter)","type":"case"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datedecodingstrategy-swift.enum\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datedecodingstrategy-swift.enum\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/potentyaml\/yamldecoder\/datedecodingstrategy-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"}],"path":"\/documentation\/potentyaml\/yamldecoder\/datedecodingstrategy-swift.enum","title":"YAMLDecoder.DateDecodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecoder\/nonconformingfloatdecodingstrategy\/default","title":"case `default`","type":"case"},{"path":"\/documentation\/potentyaml\/yamldecoder\/nonconformingfloatdecodingstrategy\/throw","title":"case `throw`","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecoder\/nonconformingfloatdecodingstrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yamldecoder\/nonconformingfloatdecodingstrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yamldecoder\/nonconformingfloatdecodingstrategy","title":"YAMLDecoder.NonConformingFloatDecodingStrategy","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecoder\/input","title":"YAMLDecoder.Input","type":"typealias"}],"path":"\/documentation\/potentyaml\/yamldecoder\/topleveldecoder-implementations","title":"TopLevelDecoder Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yamldecoder","title":"YAMLDecoder","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/init(rawvalue:)","title":"init(rawValue: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/rawvalue","title":"let rawValue: UInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/sortedkeys","title":"static let sortedKeys: YAMLEncoder.OutputFormatting","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.struct","title":"YAMLEncoder.OutputFormatting","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dataencodingstrategy-swift.property","title":"var dataEncodingStrategy: YAMLEncoder.DataEncodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dateencodingstrategy-swift.property","title":"var dateEncodingStrategy: DateEncodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamlencoder\/options","title":"var options: YAMLEncoderTransform.Options","type":"property"},{"path":"\/documentation\/potentyaml\/yamlencoder\/outputformatting-swift.property","title":"var outputFormatting: OutputFormatting","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/default","title":"static let `default`: YAMLEncoder","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dataencodingstrategy-swift.enum\/base64","title":"case base64","type":"case"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dataencodingstrategy-swift.enum\/custom(_:)","title":"case custom((Data, Encoder) throws -> Void)","type":"case"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dataencodingstrategy-swift.enum\/deferredtodata","title":"case deferredToData","type":"case"}],"path":"\/documentation\/potentyaml\/yamlencoder\/dataencodingstrategy-swift.enum","title":"YAMLEncoder.DataEncodingStrategy","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dateencodingstrategy-swift.enum\/custom(_:)","title":"case custom((Date, Encoder) throws -> Void)","type":"case"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dateencodingstrategy-swift.enum\/deferredtodate","title":"case deferredToDate","type":"case"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dateencodingstrategy-swift.enum\/formatted(_:)","title":"case formatted(DateFormatter)","type":"case"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dateencodingstrategy-swift.enum\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dateencodingstrategy-swift.enum\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/potentyaml\/yamlencoder\/dateencodingstrategy-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"}],"path":"\/documentation\/potentyaml\/yamlencoder\/dateencodingstrategy-swift.enum","title":"YAMLEncoder.DateEncodingStrategy","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencoder\/output","title":"YAMLEncoder.Output","type":"typealias"}],"path":"\/documentation\/potentyaml\/yamlencoder\/toplevelencoder-implementations","title":"TopLevelEncoder Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yamlencoder","title":"YAMLEncoder","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/options\/datadecodingstrategy","title":"let dataDecodingStrategy: YAMLDecoder.DataDecodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/options\/datedecodingstrategy","title":"let dateDecodingStrategy: YAMLDecoder.DateDecodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/options\/keydecodingstrategy","title":"let keyDecodingStrategy: KeyDecodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentyaml\/yamldecodertransform\/options","title":"YAMLDecoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/state","title":"YAMLDecoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/value","title":"YAMLDecoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/nilvalue","title":"static let nilValue: YAML","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/intercepts(_:)-3x8ke","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-18hig","title":"static func unbox(YAML, as: Int32.Type, decoder: IVD) throws -> Int32?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-2qwp9","title":"static func unbox(YAML, as: Bool.Type, decoder: IVD) throws -> Bool?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-2xu5t","title":"static func unbox(YAML, as: UInt.Type, decoder: IVD) throws -> UInt?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-2zmz7","title":"static func unbox(YAML, as: Int64.Type, decoder: IVD) throws -> Int64?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-3o1ht","title":"static func unbox(YAML, as: URL.Type, decoder: IVD) throws -> URL?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-41yc9","title":"static func unbox(YAML, as: UInt8.Type, decoder: IVD) throws -> UInt8?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-48ba6","title":"static func unbox(YAML, as: Float16.Type, decoder: IVD) throws -> Float16?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-4ei1n","title":"static func unbox(YAML, as: Double.Type, decoder: IVD) throws -> Double?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-53h3g","title":"static func unbox(YAML, as: AnyValue.Type, decoder: IVD) throws -> AnyValue","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-5bgwb","title":"static func unbox(YAML, as: Decimal.Type, decoder: IVD) throws -> Decimal?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-6gm33","title":"static func unbox(YAML, as: BigInt.Type, decoder: IVD) throws -> BigInt?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-73mmq","title":"static func unbox(YAML, as: String.Type, decoder: IVD) throws -> String?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-77trx","title":"static func unbox(YAML, as: Int.Type, decoder: IVD) throws -> Int?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-78wmh","title":"static func unbox(YAML, as: BigUInt.Type, decoder: IVD) throws -> BigUInt?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-7h9do","title":"static func unbox(YAML, as: Int8.Type, decoder: IVD) throws -> Int8?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-80ffg","title":"static func unbox(YAML, as: UInt64.Type, decoder: IVD) throws -> UInt64?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-8gx5w","title":"static func unbox(YAML, as: UUID.Type, decoder: IVD) throws -> UUID?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-8hk70","title":"static func unbox(YAML, as: Data.Type, decoder: IVD) throws -> Data?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-9072p","title":"static func unbox(YAML, as: Float.Type, decoder: IVD) throws -> Float?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-98ryv","title":"static func unbox(YAML, as: Int16.Type, decoder: IVD) throws -> Int16?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-tmnl","title":"static func unbox(YAML, as: Date.Type, decoder: IVD) throws -> Date?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-v2hw","title":"static func unbox(YAML, as: UInt32.Type, decoder: IVD) throws -> UInt32?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:as:decoder:)-wd7o","title":"static func unbox(YAML, as: UInt16.Type, decoder: IVD) throws -> UInt16?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:interceptedtype:decoder:)-2ri8t","title":"static func unbox(YAML, interceptedType: Decodable.Type, decoder: IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/value(from:options:)-2kav6","title":"static func value(from: Data, options: Options) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/value(from:options:)-3qvdj","title":"static func value(from: String, options: Options) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/valuetokeyedvalues(_:decoder:)","title":"static func valueToKeyedValues(YAML, decoder: IVD) throws -> KeyedValues?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/valuetounkeyedvalues(_:decoder:)","title":"static func valueToUnkeyedValues(YAML, decoder: IVD) throws -> UnkeyedValues?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/intercepts(_:)-25rob","title":"static func intercepts(Decodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:interceptedtype:decoder:)-1f4qw","title":"static func unbox(Self.Value, interceptedType: Decodable.Type, decoder: Self.IVD) throws -> Any?","type":"method"},{"path":"\/documentation\/potentyaml\/yamldecodertransform\/unbox(_:othertype:decoder:)","title":"static func unbox(Self.Value, otherType: Decodable.Type, decoder: Self.IVD) throws -> Any?","type":"method"}],"path":"\/documentation\/potentyaml\/yamldecodertransform\/internaldecodertransform-implementations","title":"InternalDecoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yamldecodertransform","title":"YAMLDecoderTransform","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/options\/dataencodingstrategy","title":"let dataEncodingStrategy: YAMLEncoder.DataEncodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/options\/dateencodingstrategy","title":"let dateEncodingStrategy: YAMLEncoder.DateEncodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/options\/keyencodingstrategy","title":"let keyEncodingStrategy: KeyEncodingStrategy","type":"property"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/options\/outputformatting","title":"let outputFormatting: YAMLEncoder.OutputFormatting","type":"property"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/options\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"}],"path":"\/documentation\/potentyaml\/yamlencodertransform\/options","title":"YAMLEncoderTransform.Options","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/state","title":"YAMLEncoderTransform.State","type":"typealias"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/value","title":"YAMLEncoderTransform.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/emptykeyedcontainer","title":"static var emptyKeyedContainer: YAML","type":"property"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/emptyunkeyedcontainer","title":"static var emptyUnkeyedContainer: YAML","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-1a14m","title":"static func box(Int8, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-1iorh","title":"static func box(Int16, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-1n2qv","title":"static func box(UInt16, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-1xnwi","title":"static func box(Int64, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-1yi8u","title":"static func box(BigUInt, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-27uhf","title":"static func box(BigInt, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-2he5l","title":"static func box(Date, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-34pm0","title":"static func box(UInt, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-37ene","title":"static func box(UInt64, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-457fx","title":"static func box(UInt32, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-6x20k","title":"static func box(Bool, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-7ob9","title":"static func box(Decimal, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-82b0w","title":"static func box(UInt8, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-82dfr","title":"static func box(Data, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-8o60f","title":"static func box(UUID, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-8xa1m","title":"static func box(Float16, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-9kqwn","title":"static func box(Int32, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-9nruy","title":"static func box(AnyValue, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-9oexb","title":"static func box(String, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-9v6z5","title":"static func box(Double, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-f9i","title":"static func box(Float, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-q3j","title":"static func box(Int, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:encoder:)-qyey","title":"static func box(URL, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:interceptedtype:encoder:)-5bz06","title":"static func box(Any, interceptedType: Encodable.Type, encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/boxnil(encoder:)","title":"static func boxNil(encoder: IVE) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/data(from:options:)","title":"static func data(from: YAML, options: Options) throws -> Data","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/intercepts(_:)-5fm0k","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/keyedvaluestovalue(_:encoder:)","title":"static func keyedValuesToValue(KeyedValues, encoder: IVE) -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/string(from:options:)","title":"static func string(from: YAML, options: Options) throws -> String","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/unkeyedvaluestovalue(_:encoder:)","title":"static func unkeyedValuesToValue(UnkeyedValues, encoder: IVE) -> YAML","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:interceptedtype:encoder:)-81cpc","title":"static func box(Any, interceptedType: Encodable.Type, encoder: Self.IVE) throws -> Self.Value","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/box(_:othertype:encoder:)","title":"static func box(Any, otherType: Encodable.Type, encoder: Self.IVE) throws -> Self.Value?","type":"method"},{"path":"\/documentation\/potentyaml\/yamlencodertransform\/intercepts(_:)-2mmsk","title":"static func intercepts(Encodable.Type) -> Bool","type":"method"}],"path":"\/documentation\/potentyaml\/yamlencodertransform\/internalencodertransform-implementations","title":"InternalEncoderTransform Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yamlencodertransform","title":"YAMLEncoderTransform","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/mappingentry\/init(key:value:)-2883s","title":"init(key: YAML, value: YAML)","type":"init"},{"path":"\/documentation\/potentyaml\/yaml\/mappingentry\/init(key:value:)-45t3o","title":"init(key: String, value: YAML)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/mappingentry\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yaml\/mappingentry\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yaml\/mappingentry","title":"YAML.MappingEntry","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/==(_:_:)","title":"static func == (Number, Number) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(_:)-4hzqv","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(_:)-9j761","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(_:)-bdht","title":"init(String)","type":"init"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(_:)-k0y5","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(_:isinteger:isnegative:)","title":"init(String, isInteger: Bool, isNegative: Bool)","type":"init"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/doublevalue","title":"var doubleValue: Double?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/floatvalue","title":"var floatValue: Float?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/integervalue","title":"var integerValue: Int?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/isinfinity","title":"var isInfinity: Bool","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/isinteger","title":"var isInteger: Bool","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/isnan","title":"var isNaN: Bool","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/numbervalue","title":"var numberValue: Any?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/unsignedintegervalue","title":"var unsignedIntegerValue: UInt?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/number\/value","title":"var value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yaml\/number\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/number\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/number\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/number\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/number\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/number\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/number\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yaml\/number","title":"YAML.Number","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/init(_:)-84j2w","title":"init(String)","type":"init"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/init(_:)-hw76","title":"init?(String?)","type":"init"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/rawvalue","title":"let rawValue: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/bool","title":"static let bool: YAML.Tag","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/float","title":"static let float: YAML.Tag","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/int","title":"static let int: YAML.Tag","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/map","title":"static let map: YAML.Tag","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/null","title":"static let null: YAML.Tag","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/seq","title":"static let seq: YAML.Tag","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/str","title":"static let str: YAML.Tag","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yaml\/tag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/tag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/potentyaml\/yaml\/tag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yaml\/tag","title":"YAML.Tag","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/alias(_:)","title":"case alias(String)","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/bool(_:anchor:)","title":"case bool(Bool, anchor: Anchor?)","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/float(_:anchor:)","title":"case float(Number, anchor: Anchor?)","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/integer(_:anchor:)","title":"case integer(Number, anchor: Anchor?)","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/mapping(_:style:tag:anchor:)","title":"case mapping(Mapping, style: CollectionStyle, tag: Tag?, anchor: Anchor?)","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/null(anchor:)","title":"case null(anchor: Anchor?)","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/sequence(_:style:tag:anchor:)","title":"case sequence([YAML], style: CollectionStyle, tag: Tag?, anchor: Anchor?)","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/string(_:style:tag:anchor:)","title":"case string(String, style: StringStyle, tag: Tag?, anchor: Anchor?)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/boolvalue","title":"var boolValue: Bool?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/doublevalue","title":"var doubleValue: Double?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/floatvalue","title":"var floatValue: Float?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/integervalue","title":"var integerValue: Int?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/mappingvalue","title":"var mappingValue: Mapping?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/numbervalue","title":"var numberValue: Any?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/sequencevalue","title":"var sequenceValue: Sequence?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/stringvalue","title":"var stringValue: String?","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/unsignedintegervalue","title":"var unsignedIntegerValue: UInt?","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/subscript(_:)-1w49l","title":"subscript(Int) -> YAML?","type":"subscript"},{"path":"\/documentation\/potentyaml\/yaml\/subscript(_:)-5rsvl","title":"subscript(YAML) -> YAML?","type":"subscript"},{"path":"\/documentation\/potentyaml\/yaml\/subscript(_:)-9905a","title":"subscript(String) -> YAML?","type":"subscript"},{"path":"\/documentation\/potentyaml\/yaml\/subscript(dynamicmember:)","title":"subscript(dynamicMember _: String) -> YAML?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/anchor","title":"YAML.Anchor","type":"typealias"},{"path":"\/documentation\/potentyaml\/yaml\/decoder","title":"YAML.Decoder","type":"typealias"},{"path":"\/documentation\/potentyaml\/yaml\/encoder","title":"YAML.Encoder","type":"typealias"},{"path":"\/documentation\/potentyaml\/yaml\/mapping","title":"YAML.Mapping","type":"typealias"},{"path":"\/documentation\/potentyaml\/yaml\/sequence","title":"YAML.Sequence","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/any","title":"case any","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/block","title":"case block","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/flow","title":"case flow","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/init(rawvalue:)","title":"init?(rawValue: Int32)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/potentyaml\/yaml\/collectionstyle\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yaml\/collectionstyle","title":"YAML.CollectionStyle","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/any","title":"case any","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/doublequoted","title":"case doubleQuoted","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/folded","title":"case folded","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/literal","title":"case literal","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/plain","title":"case plain","type":"case"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/singlequoted","title":"case singleQuoted","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/init(rawvalue:)","title":"init?(rawValue: Int32)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/potentyaml\/yaml\/stringstyle\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yaml\/stringstyle","title":"YAML.StringStyle","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/potentyaml\/yaml\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/potentyaml\/yaml\/==(_:_:)","title":"static func == (YAML, YAML) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yaml\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(arrayliteral:)","title":"init(arrayLiteral: YAML...)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(booleanliteral:)","title":"init(booleanLiteral: BooleanLiteralType)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (YAML, YAML)...)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(floatliteral:)","title":"init(floatLiteral: FloatLiteralType)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(integerliteral:)","title":"init(integerLiteral: IntegerLiteralType)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(nilliteral:)","title":"init(nilLiteral: ())","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebynilliteral-implementations","title":"ExpressibleByNilLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/potentyaml\/yaml\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yaml\/isnull","title":"var isNull: Bool","type":"property"},{"path":"\/documentation\/potentyaml\/yaml\/unwrapped","title":"var unwrapped: Any?","type":"property"}],"path":"\/documentation\/potentyaml\/yaml\/value-implementations","title":"Value Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yaml","title":"YAML","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/init(rawvalue:)","title":"init(rawValue: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/rawvalue","title":"let rawValue: UInt","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/sortedkeys","title":"static let sortedKeys: YAMLSerialization.WritingOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yamlserialization\/writingoptions","title":"YAMLSerialization.WritingOptions","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/data(from:options:)","title":"static func data(from: YAML, options: WritingOptions) throws -> Data","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/string(from:options:)","title":"static func string(from: YAML, options: WritingOptions) throws -> String","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/yaml(from:)-4cuyd","title":"static func yaml(from: String) throws -> YAML","type":"method"},{"path":"\/documentation\/potentyaml\/yamlserialization\/yaml(from:)-7iozp","title":"static func yaml(from: Data) throws -> YAML","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/emiterror","title":"case emitError","type":"case"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/invalidtaggedbool","title":"case invalidTaggedBool","type":"case"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/invalidtoken","title":"case invalidToken","type":"case"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/parsererror(message:line:column:)","title":"case parserError(message: String, line: Int, column: Int)","type":"case"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/unabletocreateemitter","title":"case unableToCreateEmitter","type":"case"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/unabletocreateparser","title":"case unableToCreateParser","type":"case"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/unexpectedeof","title":"case unexpectedEOF","type":"case"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/unexpectedevent","title":"case unexpectedEvent","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/potentyaml\/yamlserialization\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/potentyaml\/yamlserialization\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/potentyaml\/yamlserialization\/error","title":"YAMLSerialization.Error","type":"enum"}],"path":"\/documentation\/potentyaml\/yamlserialization","title":"YAMLSerialization","type":"enum"}],"path":"\/documentation\/potentyaml","title":"PotentYAML","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}