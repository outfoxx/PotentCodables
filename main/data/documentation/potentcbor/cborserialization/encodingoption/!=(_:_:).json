{"variants":[{"paths":["\/documentation\/potentcbor\/cborserialization\/encodingoption\/!=(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization\/EncodingOption\/!=(_:_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are not equal."}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCBOR","doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization","doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization\/EncodingOption","doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization\/EncodingOption\/Equatable-Implementations"]]},"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"internalParam","text":"lhs"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"rhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"inlineContent":[{"text":"A value to compare.","type":"text"}],"type":"paragraph"}]},{"name":"rhs","content":[{"inlineContent":[{"text":"Another value to compare.","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inequality is the inverse of equality. For any values "},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"text":", ","type":"text"},{"code":"a != b","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"implies that "},{"code":"a == b","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"This is the default implementation of the not-equal-to operator ("},{"code":"!=","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"for any type that conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"type":"paragraph"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"roleHeading":"Operator","title":"!=(_:_:)","symbolKind":"op","modules":[{"name":"PotentCBOR","relatedModules":["Swift"]}],"extendedModule":"Swift","externalID":"s:SQsE2neoiySbx_xtFZ::SYNTHESIZED::s:10PotentCBOR17CBORSerializationO14EncodingOptionO","role":"symbol"},"references":{"doc://PotentCodables/documentation/PotentCBOR/CBORSerialization/EncodingOption/!=(_:_:)":{"url":"\/documentation\/potentcbor\/cborserialization\/encodingoption\/!=(_:_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are not equal."}],"kind":"symbol","type":"topic","title":"!=(_:_:)","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization\/EncodingOption\/!=(_:_:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}]},"doc://PotentCodables/documentation/PotentCBOR/CBORSerialization":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"CBORSerialization","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"CBORSerialization"}],"url":"\/documentation\/potentcbor\/cborserialization","kind":"symbol","role":"symbol","title":"CBORSerialization","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization","abstract":[{"type":"text","text":"Convenience API for serializing and deserialization CBOR items."}]},"doc://PotentCodables/documentation/PotentCBOR/CBORSerialization/EncodingOption":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization\/EncodingOption","abstract":[{"type":"text","text":"Options for encoding CBOR"}],"navigatorTitle":[{"kind":"identifier","text":"EncodingOption"}],"title":"CBORSerialization.EncodingOption","url":"\/documentation\/potentcbor\/cborserialization\/encodingoption","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"EncodingOption","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCBOR/CBORSerialization/EncodingOption/Equatable-Implementations":{"url":"\/documentation\/potentcbor\/cborserialization\/encodingoption\/equatable-implementations","abstract":[],"kind":"article","type":"topic","title":"Equatable Implementations","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization\/EncodingOption\/Equatable-Implementations","role":"collectionGroup"},"doc://PotentCodables/documentation/PotentCBOR":{"url":"\/documentation\/potentcbor","kind":"symbol","title":"PotentCBOR","role":"collection","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR","abstract":[{"text":"Complete support for Concise Binary Object Representation encoded data in pure Swift.","type":"text"}]}}}