{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"PotentCodables"}],"title":"Tree Values"},"kind":"article","hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they"},{"type":"text","text":" "},{"type":"text","text":"hold the values in their exact serialized representation.  For example, "},{"code":"JSON","type":"codeVoice"},{"type":"text","text":" tree values store numbers as a"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","type":"reference"},{"type":"text","text":" that stores the exact number value as a string along with a number of other"},{"type":"text","text":" "},{"text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" and reading the exact decimal value serialized in JSON is available from tree values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" which extends the  "},{"type":"codeVoice","code":"SingleValueDecodingContainer"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"text":"Decoding ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"text":" values using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"text":" as follows:","type":"text"}],"type":"paragraph"},{"code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"type":"codeVoice","code":"unwrapped"},{"type":"text","text":" property) into it’s the best available"},{"text":" ","type":"text"},{"type":"text","text":"standard Swift type, returned as an  "},{"type":"codeVoice","code":"Any"},{"type":"text","text":". As an example, unwrappingthe the JSON value "},{"type":"codeVoice","code":"123.456"},{"text":" result in a Swift","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Double"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Tree values are returned as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" to allow easy support any possible tree value. For this reason the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference","isActive":true},{"text":" has a convenience method to access the unwrapped tree value without","type":"text"},{"text":" ","type":"text"},{"text":"excessive casting.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Decoding unwrapped "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference"},{"type":"text","text":" values using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" as follows:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"],"type":"codeListing"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"What are “tree values”?","type":"text"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"],"anchor":"Usage","title":"Usage"}],"references":{"doc://PotentCodables/documentation/PotentJSON/JSON":{"title":"JSON","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"JSON","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","kind":"symbol","url":"\/documentation\/potentjson\/json","abstract":[{"type":"text","text":"General JSON value."}],"navigatorTitle":[{"text":"JSON","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Number","kind":"identifier"}],"title":"JSON.Number","kind":"symbol","abstract":[],"type":"topic","navigatorTitle":[{"text":"Number","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","url":"\/documentation\/potentjson\/json\/number"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","title":"PotentCodables","role":"collection","type":"topic","url":"\/documentation\/potentcodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"title":"Data Formats","url":"\/documentation\/potentcodables\/data-formats","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","role":"article","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"kind":"article","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"type":"topic","title":"AnyValue","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AnyValue","kind":"identifier"}],"navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"url":"\/documentation\/potentcodables\/anyvalue","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" value that allows encoding\/decoding values of any type or structure.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"title":"Using AnyValue","type":"topic","url":"\/documentation\/potentcodables\/using-anyvalue","role":"article","kind":"article","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"title":"Getting Started with Potent Codables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","url":"\/documentation\/potentcodables\/gettingstarted","role":"article","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"inlineContent":[{"type":"text","text":"JSON"}],"type":"strong"},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"YAML"}]},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"CBOR"}]},{"text":" & ","type":"text"},{"inlineContent":[{"text":"ASN.1","type":"text"}],"type":"strong"},{"type":"text","text":"."}],"kind":"article","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TreeValueDecodingContainer","kind":"identifier"}],"kind":"symbol","abstract":[],"type":"topic","url":"\/documentation\/potentcodables\/treevaluedecodingcontainer","title":"TreeValueDecodingContainer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}]}}}