{"sections":[],"abstract":[{"type":"text","text":"What are “tree values”?"}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they"},{"type":"text","text":" "},{"text":"hold the values in their exact serialized representation.  For example, ","type":"text"},{"type":"codeVoice","code":"JSON"},{"text":" tree values store numbers as a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","type":"reference","isActive":true},{"text":" that stores the exact number value as a string along with a number of other","type":"text"},{"type":"text","text":" "},{"type":"text","text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"text":" and reading the exact decimal value serialized in JSON is available from tree values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The decoders support accessing the tree value using specializations of the protocol","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" which extends the  "},{"type":"codeVoice","code":"SingleValueDecodingContainer"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"type":"text","text":"Decoding "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"type":"text","text":" values using the "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference"},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Each tree value has the ability to “unwrap” itself (using it’s ","type":"text"},{"code":"unwrapped","type":"codeVoice"},{"text":" property) into it’s the best available","type":"text"},{"text":" ","type":"text"},{"text":"standard Swift type, returned as an  ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":". As an example, unwrappingthe the JSON value "},{"type":"codeVoice","code":"123.456"},{"type":"text","text":" result in a Swift"},{"type":"text","text":" "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"type":"codeVoice","code":"Any"},{"text":" to allow easy support any possible tree value. For this reason the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true,"type":"reference"},{"type":"text","text":" has a convenience method to access the unwrapped tree value without"},{"type":"text","text":" "},{"text":"excessive casting.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Decoding unwrapped ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference"},{"text":" values using the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference","isActive":true},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"]}]}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"PotentCodables"}],"title":"Tree Values"},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"],"generated":true,"anchor":"Usage"}],"references":{"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"kind":"symbol","url":"\/documentation\/potentjson\/json\/number","title":"JSON.Number","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Number","kind":"identifier"}],"navigatorTitle":[{"text":"Number","kind":"identifier"}],"role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"title":"AnyValue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"topic","url":"\/documentation\/potentcodables\/anyvalue","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyValue"}],"kind":"symbol","abstract":[{"type":"text","text":"A "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"role":"symbol","navigatorTitle":[{"text":"AnyValue","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"title":"Getting Started with Potent Codables","role":"article","kind":"article","url":"\/documentation\/potentcodables\/gettingstarted","type":"topic","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"inlineContent":[{"text":"JSON","type":"text"}],"type":"strong"},{"text":", ","type":"text"},{"inlineContent":[{"type":"text","text":"YAML"}],"type":"strong"},{"type":"text","text":", "},{"inlineContent":[{"text":"CBOR","type":"text"}],"type":"strong"},{"type":"text","text":" & "},{"type":"strong","inlineContent":[{"type":"text","text":"ASN.1"}]},{"text":".","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"title":"JSON","url":"\/documentation\/potentjson\/json","kind":"symbol","abstract":[{"text":"General JSON value.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","role":"symbol","navigatorTitle":[{"text":"JSON","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"JSON","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"type":"topic","kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","role":"article","title":"Using AnyValue","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference","isActive":true}],"url":"\/documentation\/potentcodables\/using-anyvalue"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","url":"\/documentation\/potentcodables","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"type":"topic","role":"collection"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"role":"article","type":"topic","title":"Data Formats","kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","url":"\/documentation\/potentcodables\/data-formats"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","title":"TreeValueDecodingContainer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TreeValueDecodingContainer","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}],"url":"\/documentation\/potentcodables\/treevaluedecodingcontainer","type":"topic","role":"symbol"}}}