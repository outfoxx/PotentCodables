{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"sections":[],"metadata":{"modules":[{"name":"PotentCodables"}],"title":"Tree Values","role":"article","roleHeading":"Article"},"abstract":[{"type":"text","text":"What are “tree values”?"}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"type":"text","text":" "},{"text":"hold the values in their exact serialized representation.  For example, ","type":"text"},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" tree values store numbers as a"},{"text":" ","type":"text"},{"text":"specialized ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true},{"type":"text","text":" that stores the exact number value as a string along with a number of other"},{"text":" ","type":"text"},{"type":"text","text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true,"type":"reference"},{"text":" and reading the exact decimal value serialized in JSON is available from tree values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"text":" which extends the  ","type":"text"},{"code":"SingleValueDecodingContainer","type":"codeVoice"},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Decoding "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"type":"text","text":" values using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"type":"codeListing","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"type":"codeVoice","code":"unwrapped"},{"text":" property) into it’s the best available","type":"text"},{"type":"text","text":" "},{"type":"text","text":"standard Swift type, returned as an  "},{"code":"Any","type":"codeVoice"},{"text":". As an example, unwrappingthe the JSON value ","type":"text"},{"code":"123.456","type":"codeVoice"},{"text":" result in a Swift","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Double"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" to allow easy support any possible tree value. For this reason the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"type":"text","text":" has a convenience method to access the unwrapped tree value without"},{"type":"text","text":" "},{"type":"text","text":"excessive casting."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Decoding unwrapped "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},{"text":" values using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"text":" as follows:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"],"type":"codeListing"}],"kind":"content"}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"],"anchor":"Usage","title":"Usage","generated":true}],"references":{"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"abstract":[{"text":"A ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"navigatorTitle":[{"kind":"identifier","text":"AnyValue"}],"title":"AnyValue","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyValue"}],"kind":"symbol","url":"\/documentation\/potentcodables\/anyvalue","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"kind":"article","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","url":"\/documentation\/potentcodables\/data-formats","title":"Data Formats","type":"topic","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}]},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"kind":"article","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","url":"\/documentation\/potentcodables\/using-anyvalue","title":"Using AnyValue","type":"topic","abstract":[{"type":"text","text":"Decode and encode “any” structured value using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true,"type":"reference"}]},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","url":"\/documentation\/potentcodables\/gettingstarted","role":"article","title":"Getting Started with Potent Codables","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"type":"strong","inlineContent":[{"text":"JSON","type":"text"}]},{"type":"text","text":", "},{"inlineContent":[{"text":"YAML","type":"text"}],"type":"strong"},{"type":"text","text":", "},{"inlineContent":[{"text":"CBOR","type":"text"}],"type":"strong"},{"text":" & ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"ASN.1"}]},{"type":"text","text":"."}],"kind":"article","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"title":"TreeValueDecodingContainer","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TreeValueDecodingContainer","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}],"kind":"symbol","abstract":[],"url":"\/documentation\/potentcodables\/treevaluedecodingcontainer"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"type":"topic","abstract":[{"text":"General JSON value.","type":"text"}],"title":"JSON","kind":"symbol","url":"\/documentation\/potentjson\/json","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","navigatorTitle":[{"kind":"identifier","text":"JSON"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JSON"}]},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","abstract":[],"url":"\/documentation\/potentjson\/json\/number","title":"JSON.Number","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Number","kind":"identifier"}],"navigatorTitle":[{"text":"Number","kind":"identifier"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"type":"topic","url":"\/documentation\/potentcodables","role":"collection","title":"PotentCodables"}}}