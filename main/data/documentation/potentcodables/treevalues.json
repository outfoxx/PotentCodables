{"abstract":[{"type":"text","text":"What are “tree values”?"}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"type":"text","text":" "},{"text":"hold the values in their exact serialized representation.  For example, ","type":"text"},{"type":"codeVoice","code":"JSON"},{"text":" tree values store numbers as a","type":"text"},{"type":"text","text":" "},{"text":"specialized ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"text":" that stores the exact number value as a string along with a number of other","type":"text"},{"type":"text","text":" "},{"type":"text","text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true,"type":"reference"},{"text":" and reading the exact decimal value serialized in JSON is available from tree values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" which extends the  "},{"code":"SingleValueDecodingContainer","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decoding "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true,"type":"reference"},{"type":"text","text":" values using the "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference"},{"type":"text","text":" as follows:"}]},{"type":"codeListing","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Each tree value has the ability to “unwrap” itself (using it’s ","type":"text"},{"type":"codeVoice","code":"unwrapped"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"type":"text","text":"standard Swift type, returned as an  "},{"code":"Any","type":"codeVoice"},{"text":". As an example, unwrappingthe the JSON value ","type":"text"},{"code":"123.456","type":"codeVoice"},{"text":" result in a Swift","type":"text"},{"type":"text","text":" "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" to allow easy support any possible tree value. For this reason the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" has a convenience method to access the unwrapped tree value without","type":"text"},{"type":"text","text":" "},{"text":"excessive casting.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Decoding unwrapped "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},{"type":"text","text":" values using the "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"metadata":{"modules":[{"name":"PotentCodables"}],"roleHeading":"Article","role":"article","title":"Tree Values"},"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"title":"Usage","anchor":"Usage","generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"},"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"kind":"article","references":{"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"role":"article","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/using-anyvalue","title":"Using AnyValue","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference","isActive":true}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"kind":"article","role":"article","title":"Getting Started with Potent Codables","type":"topic","url":"\/documentation\/potentcodables\/gettingstarted","abstract":[{"type":"text","text":"Get started using the powerful potent data formats "},{"type":"strong","inlineContent":[{"text":"JSON","type":"text"}]},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"YAML"}],"type":"strong"},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"text":"CBOR","type":"text"}]},{"type":"text","text":" & "},{"inlineContent":[{"type":"text","text":"ASN.1"}],"type":"strong"},{"type":"text","text":"."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"role":"symbol","navigatorTitle":[{"text":"TreeValueDecodingContainer","kind":"identifier"}],"abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TreeValueDecodingContainer"}],"type":"topic","kind":"symbol","title":"TreeValueDecodingContainer","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","url":"\/documentation\/potentcodables\/treevaluedecodingcontainer"},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"title":"JSON.Number","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","abstract":[],"url":"\/documentation\/potentjson\/json\/number","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Number"}],"navigatorTitle":[{"kind":"identifier","text":"Number"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"title":"Data Formats","kind":"article","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"url":"\/documentation\/potentcodables\/data-formats","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"title":"AnyValue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","url":"\/documentation\/potentcodables\/anyvalue","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyValue"}],"navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"role":"symbol"},"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","url":"\/documentation\/potentcodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"role":"symbol","type":"topic","title":"JSON","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"JSON","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentjson\/json","navigatorTitle":[{"text":"JSON","kind":"identifier"}],"abstract":[{"text":"General JSON value.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"}}}