{"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"],"anchor":"Usage","title":"Usage"}],"sections":[],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"What are “tree values”?"}],"metadata":{"title":"Tree Values","roleHeading":"Article","role":"article","modules":[{"name":"PotentCodables"}]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"hold the values in their exact serialized representation.  For example, "},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" tree values store numbers as a"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" that stores the exact number value as a string along with a number of other"},{"type":"text","text":" "},{"type":"text","text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" and reading the exact decimal value serialized in JSON is available from tree values."}]},{"type":"paragraph","inlineContent":[{"text":"The decoders support accessing the tree value using specializations of the protocol","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference"},{"text":" which extends the  ","type":"text"},{"code":"SingleValueDecodingContainer","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"type":"text","text":"Decoding "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference","isActive":true},{"text":" values using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"]},{"inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"type":"codeVoice","code":"unwrapped"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"type":"text","text":"standard Swift type, returned as an  "},{"type":"codeVoice","code":"Any"},{"type":"text","text":". As an example, unwrappingthe the JSON value "},{"type":"codeVoice","code":"123.456"},{"text":" result in a Swift","type":"text"},{"text":" ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Tree values are returned as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" to allow easy support any possible tree value. For this reason the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"text":" has a convenience method to access the unwrapped tree value without","type":"text"},{"type":"text","text":" "},{"text":"excessive casting.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Decoding unwrapped ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true,"type":"reference"},{"text":" values using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" as follows:","type":"text"}]},{"syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"],"type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"references":{"doc://PotentCodables/documentation/PotentJSON/JSON":{"url":"\/documentation\/potentjson\/json","role":"symbol","type":"topic","title":"JSON","kind":"symbol","abstract":[{"type":"text","text":"General JSON value."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","navigatorTitle":[{"text":"JSON","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSON"}]},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Number","kind":"identifier"}],"navigatorTitle":[{"text":"Number","kind":"identifier"}],"role":"symbol","abstract":[],"title":"JSON.Number","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","url":"\/documentation\/potentjson\/json\/number","type":"topic","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference"}],"title":"Using AnyValue","kind":"article","type":"topic","role":"article","url":"\/documentation\/potentcodables\/using-anyvalue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"role":"symbol","title":"TreeValueDecodingContainer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TreeValueDecodingContainer"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","kind":"symbol","type":"topic","abstract":[],"navigatorTitle":[{"text":"TreeValueDecodingContainer","kind":"identifier"}],"url":"\/documentation\/potentcodables\/treevaluedecodingcontainer"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"type":"strong","inlineContent":[{"text":"JSON","type":"text"}]},{"text":", ","type":"text"},{"inlineContent":[{"text":"YAML","type":"text"}],"type":"strong"},{"text":", ","type":"text"},{"inlineContent":[{"type":"text","text":"CBOR"}],"type":"strong"},{"text":" & ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"ASN.1"}]},{"type":"text","text":"."}],"title":"Getting Started with Potent Codables","kind":"article","type":"topic","role":"article","url":"\/documentation\/potentcodables\/gettingstarted","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"role":"article","title":"Data Formats","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","kind":"article","type":"topic","abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"url":"\/documentation\/potentcodables\/data-formats"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"text":" system","type":"text"}],"url":"\/documentation\/potentcodables","title":"PotentCodables","role":"collection","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"url":"\/documentation\/potentcodables\/anyvalue","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"topic","navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"title":"AnyValue","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyValue","kind":"identifier"}]}}}