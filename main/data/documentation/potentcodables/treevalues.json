{"abstract":[{"text":"What are “tree values”?","type":"text"}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"type":"text","text":" "},{"type":"text","text":"hold the values in their exact serialized representation.  For example, "},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" tree values store numbers as a"},{"text":" ","type":"text"},{"type":"text","text":"specialized "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true,"type":"reference"},{"type":"text","text":" that stores the exact number value as a string along with a number of other"},{"text":" ","type":"text"},{"text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" and reading the exact decimal value serialized in JSON is available from tree values."}]},{"inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" which extends the  "},{"code":"SingleValueDecodingContainer","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Decoding ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},{"type":"text","text":" values using the "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"text":" as follows:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"code":"unwrapped","type":"codeVoice"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"text":"standard Swift type, returned as an  ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":". As an example, unwrappingthe the JSON value ","type":"text"},{"type":"codeVoice","code":"123.456"},{"text":" result in a Swift","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Double"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"code":"Any","type":"codeVoice"},{"text":" to allow easy support any possible tree value. For this reason the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" has a convenience method to access the unwrapped tree value without","type":"text"},{"type":"text","text":" "},{"text":"excessive casting.","type":"text"}]},{"inlineContent":[{"text":"Decoding unwrapped ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference"},{"type":"text","text":" values using the "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference","isActive":true},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"]}]}],"seeAlsoSections":[{"anchor":"Usage","generated":true,"title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"kind":"article","identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"metadata":{"role":"article","modules":[{"name":"PotentCodables"}],"title":"Tree Values","roleHeading":"Article"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","abstract":[],"kind":"symbol","title":"JSON.Number","url":"\/documentation\/potentjson\/json\/number","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Number"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Number","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"type":"topic","abstract":[{"text":"A ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value that allows encoding\/decoding values of any type or structure.","type":"text"}],"kind":"symbol","url":"\/documentation\/potentcodables\/anyvalue","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","title":"AnyValue","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyValue"}],"navigatorTitle":[{"kind":"identifier","text":"AnyValue"}]},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"url":"\/documentation\/potentcodables\/gettingstarted","role":"article","title":"Getting Started with Potent Codables","abstract":[{"type":"text","text":"Get started using the powerful potent data formats "},{"inlineContent":[{"text":"JSON","type":"text"}],"type":"strong"},{"text":", ","type":"text"},{"inlineContent":[{"type":"text","text":"YAML"}],"type":"strong"},{"text":", ","type":"text"},{"inlineContent":[{"text":"CBOR","type":"text"}],"type":"strong"},{"type":"text","text":" & "},{"type":"strong","inlineContent":[{"type":"text","text":"ASN.1"}]},{"text":".","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","type":"topic","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"kind":"symbol","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","title":"TreeValueDecodingContainer","type":"topic","navigatorTitle":[{"text":"TreeValueDecodingContainer","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TreeValueDecodingContainer","kind":"identifier"}],"url":"\/documentation\/potentcodables\/treevaluedecodingcontainer"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"role":"article","title":"Using AnyValue","url":"\/documentation\/potentcodables\/using-anyvalue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true}],"kind":"article","type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","title":"JSON","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JSON"}],"navigatorTitle":[{"kind":"identifier","text":"JSON"}],"role":"symbol","url":"\/documentation\/potentjson\/json","type":"topic","abstract":[{"text":"General JSON value.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables":{"title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"kind":"symbol","role":"collection","url":"\/documentation\/potentcodables","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"title":"Data Formats","url":"\/documentation\/potentcodables\/data-formats","kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","type":"topic","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"role":"article"}}}