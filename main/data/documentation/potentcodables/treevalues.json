{"seeAlsoSections":[{"anchor":"Usage","generated":true,"title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"What are “tree values”?"}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"type":"text","text":" "},{"type":"text","text":"hold the values in their exact serialized representation.  For example, "},{"code":"JSON","type":"codeVoice"},{"text":" tree values store numbers as a","type":"text"},{"text":" ","type":"text"},{"text":"specialized ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"text":" that stores the exact number value as a string along with a number of other","type":"text"},{"text":" ","type":"text"},{"text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"text":" and reading the exact decimal value serialized in JSON is available from tree values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The decoders support accessing the tree value using specializations of the protocol","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" which extends the  ","type":"text"},{"type":"codeVoice","code":"SingleValueDecodingContainer"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"text":"Decoding ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"type":"text","text":" values using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" as follows:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"]},{"inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"code":"unwrapped","type":"codeVoice"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"type":"text","text":"standard Swift type, returned as an  "},{"type":"codeVoice","code":"Any"},{"text":". As an example, unwrappingthe the JSON value ","type":"text"},{"type":"codeVoice","code":"123.456"},{"type":"text","text":" result in a Swift"},{"type":"text","text":" "},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Tree values are returned as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" to allow easy support any possible tree value. For this reason the"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference"},{"type":"text","text":" has a convenience method to access the unwrapped tree value without"},{"text":" ","type":"text"},{"type":"text","text":"excessive casting."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Decoding unwrapped ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},{"type":"text","text":" values using the "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true,"type":"reference"},{"text":" as follows:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"]}],"kind":"content"}],"kind":"article","metadata":{"roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Tree Values","role":"article"},"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"references":{"doc://PotentCodables/documentation/PotentJSON/JSON":{"role":"symbol","title":"JSON","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"JSON","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"JSON","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"General JSON value.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","url":"\/documentation\/potentjson\/json"},"doc://PotentCodables/documentation/PotentCodables":{"title":"PotentCodables","kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","url":"\/documentation\/potentcodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"kind":"article","role":"article","url":"\/documentation\/potentcodables\/data-formats","abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","title":"Data Formats"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"url":"\/documentation\/potentcodables\/using-anyvalue","type":"topic","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue"}],"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","title":"Using AnyValue","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"title":"Getting Started with Potent Codables","url":"\/documentation\/potentcodables\/gettingstarted","kind":"article","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"inlineContent":[{"text":"JSON","type":"text"}],"type":"strong"},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"text":"YAML","type":"text"}]},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"text":"CBOR","type":"text"}]},{"text":" & ","type":"text"},{"type":"strong","inlineContent":[{"text":"ASN.1","type":"text"}]},{"text":".","type":"text"}],"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","kind":"symbol","url":"\/documentation\/potentcodables\/treevaluedecodingcontainer","navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}],"abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TreeValueDecodingContainer","kind":"identifier"}],"title":"TreeValueDecodingContainer","role":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"url":"\/documentation\/potentcodables\/anyvalue","title":"AnyValue","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyValue"}],"abstract":[{"type":"text","text":"A "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyValue","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"type":"topic","navigatorTitle":[{"text":"Number","kind":"identifier"}],"role":"symbol","title":"JSON.Number","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Number","kind":"identifier"}],"url":"\/documentation\/potentjson\/json\/number","kind":"symbol","abstract":[]}}}