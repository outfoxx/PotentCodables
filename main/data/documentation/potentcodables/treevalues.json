{"seeAlsoSections":[{"generated":true,"title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"],"anchor":"Usage"}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"type":"text","text":" "},{"text":"hold the values in their exact serialized representation.  For example, ","type":"text"},{"code":"JSON","type":"codeVoice"},{"text":" tree values store numbers as a","type":"text"},{"text":" ","type":"text"},{"text":"specialized ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true,"type":"reference"},{"text":" that stores the exact number value as a string along with a number of other","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true},{"text":" and reading the exact decimal value serialized in JSON is available from tree values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" which extends the  ","type":"text"},{"type":"codeVoice","code":"SingleValueDecodingContainer"},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Decoding ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},{"type":"text","text":" values using the "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true,"type":"reference"},{"text":" as follows:","type":"text"}]},{"code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"type":"codeVoice","code":"unwrapped"},{"type":"text","text":" property) into it’s the best available"},{"text":" ","type":"text"},{"text":"standard Swift type, returned as an  ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":". As an example, unwrappingthe the JSON value ","type":"text"},{"type":"codeVoice","code":"123.456"},{"text":" result in a Swift","type":"text"},{"type":"text","text":" "},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"code":"Any","type":"codeVoice"},{"text":" to allow easy support any possible tree value. For this reason the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" has a convenience method to access the unwrapped tree value without"},{"type":"text","text":" "},{"type":"text","text":"excessive casting."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Decoding unwrapped "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"type":"text","text":" values using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"]}]}],"kind":"article","metadata":{"title":"Tree Values","role":"article","modules":[{"name":"PotentCodables"}],"roleHeading":"Article"},"abstract":[{"text":"What are “tree values”?","type":"text"}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://PotentCodables/documentation/PotentJSON/JSON":{"url":"\/documentation\/potentjson\/json","title":"JSON","navigatorTitle":[{"kind":"identifier","text":"JSON"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","abstract":[{"type":"text","text":"General JSON value."}],"type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSON","kind":"identifier"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"kind":"article","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","title":"Data Formats","role":"article","url":"\/documentation\/potentcodables\/data-formats","type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"abstract":[],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Number","kind":"identifier"}],"title":"JSON.Number","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","navigatorTitle":[{"kind":"identifier","text":"Number"}],"kind":"symbol","url":"\/documentation\/potentjson\/json\/number"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"url":"\/documentation\/potentcodables\/gettingstarted","title":"Getting Started with Potent Codables","kind":"article","abstract":[{"type":"text","text":"Get started using the powerful potent data formats "},{"inlineContent":[{"text":"JSON","type":"text"}],"type":"strong"},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"YAML"}]},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"CBOR"}],"type":"strong"},{"type":"text","text":" & "},{"inlineContent":[{"type":"text","text":"ASN.1"}],"type":"strong"},{"text":".","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","role":"article"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"kind":"article","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","title":"Using AnyValue","role":"article","url":"\/documentation\/potentcodables\/using-anyvalue","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}],"abstract":[],"title":"TreeValueDecodingContainer","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TreeValueDecodingContainer","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","url":"\/documentation\/potentcodables\/treevaluedecodingcontainer"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"url":"\/documentation\/potentcodables","role":"collection"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"type":"topic","role":"symbol","url":"\/documentation\/potentcodables\/anyvalue","navigatorTitle":[{"kind":"identifier","text":"AnyValue"}],"title":"AnyValue","kind":"symbol","abstract":[{"type":"text","text":"A "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"AnyValue","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue"}}}