{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"metadata":{"roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Tree Values","role":"article"},"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"anchor":"Usage","generated":true,"title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"]}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they"},{"type":"text","text":" "},{"type":"text","text":"hold the values in their exact serialized representation.  For example, "},{"code":"JSON","type":"codeVoice"},{"type":"text","text":" tree values store numbers as a"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","type":"reference","isActive":true},{"type":"text","text":" that stores the exact number value as a string along with a number of other"},{"type":"text","text":" "},{"text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" and reading the exact decimal value serialized in JSON is available from tree values."}]},{"inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" which extends the  ","type":"text"},{"code":"SingleValueDecodingContainer","type":"codeVoice"},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decoding "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"text":" values using the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true,"type":"reference"},{"type":"text","text":" as follows:"}]},{"code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"code":"unwrapped","type":"codeVoice"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"type":"text","text":"standard Swift type, returned as an  "},{"code":"Any","type":"codeVoice"},{"type":"text","text":". As an example, unwrappingthe the JSON value "},{"code":"123.456","type":"codeVoice"},{"type":"text","text":" result in a Swift"},{"type":"text","text":" "},{"type":"codeVoice","code":"Double"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"code":"Any","type":"codeVoice"},{"text":" to allow easy support any possible tree value. For this reason the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true,"type":"reference"},{"text":" has a convenience method to access the unwrapped tree value without","type":"text"},{"type":"text","text":" "},{"text":"excessive casting.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Decoding unwrapped ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference"},{"text":" values using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference"},{"text":" as follows:","type":"text"}]},{"code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"],"type":"codeListing","syntax":"swift"}]}],"kind":"article","abstract":[{"type":"text","text":"What are “tree values”?"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"},"references":{"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"type":"topic","abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"url":"\/documentation\/potentcodables\/data-formats","title":"Data Formats","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"type":"topic","kind":"article","url":"\/documentation\/potentcodables\/gettingstarted","role":"article","title":"Getting Started with Potent Codables","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"type":"strong","inlineContent":[{"text":"JSON","type":"text"}]},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"YAML"}],"type":"strong"},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"CBOR"}]},{"type":"text","text":" & "},{"inlineContent":[{"type":"text","text":"ASN.1"}],"type":"strong"},{"type":"text","text":"."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"text":" system","type":"text"}],"type":"topic","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","role":"collection","url":"\/documentation\/potentcodables"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"type":"topic","kind":"article","url":"\/documentation\/potentcodables\/using-anyvalue","role":"article","title":"Using AnyValue","abstract":[{"type":"text","text":"Decode and encode “any” structured value using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference","isActive":true}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"url":"\/documentation\/potentcodables\/treevaluedecodingcontainer","title":"TreeValueDecodingContainer","abstract":[],"type":"topic","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","kind":"symbol","navigatorTitle":[{"text":"TreeValueDecodingContainer","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TreeValueDecodingContainer","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"title":"JSON.Number","url":"\/documentation\/potentjson\/json\/number","type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","role":"symbol","navigatorTitle":[{"text":"Number","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Number","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"url":"\/documentation\/potentcodables\/anyvalue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyValue"}],"abstract":[{"type":"text","text":"A "},{"code":"Codable","type":"codeVoice"},{"text":" value that allows encoding\/decoding values of any type or structure.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"title":"AnyValue","role":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"navigatorTitle":[{"text":"JSON","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","url":"\/documentation\/potentjson\/json","abstract":[{"type":"text","text":"General JSON value."}],"role":"symbol","kind":"symbol","type":"topic","title":"JSON","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSON"}]}}}