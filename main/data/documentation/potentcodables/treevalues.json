{"metadata":{"title":"Tree Values","modules":[{"name":"PotentCodables"}],"roleHeading":"Article","role":"article"},"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"abstract":[{"text":"What are “tree values”?","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"},"seeAlsoSections":[{"generated":true,"anchor":"Usage","title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"type":"text","text":" "},{"text":"hold the values in their exact serialized representation.  For example, ","type":"text"},{"code":"JSON","type":"codeVoice"},{"text":" tree values store numbers as a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specialized "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true,"type":"reference"},{"text":" that stores the exact number value as a string along with a number of other","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" and reading the exact decimal value serialized in JSON is available from tree values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The decoders support accessing the tree value using specializations of the protocol","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true,"type":"reference"},{"text":" which extends the  ","type":"text"},{"code":"SingleValueDecodingContainer","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Decoding "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"type":"text","text":" values using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" as follows:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"type":"codeVoice","code":"unwrapped"},{"text":" property) into it’s the best available","type":"text"},{"type":"text","text":" "},{"text":"standard Swift type, returned as an  ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":". As an example, unwrappingthe the JSON value ","type":"text"},{"type":"codeVoice","code":"123.456"},{"text":" result in a Swift","type":"text"},{"type":"text","text":" "},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" to allow easy support any possible tree value. For this reason the"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference","isActive":true},{"text":" has a convenience method to access the unwrapped tree value without","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"excessive casting."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decoding unwrapped "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"text":" values using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" as follows:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"]}]}],"references":{"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"JSON"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"YAML"}]},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"CBOR"}]},{"text":" & ","type":"text"},{"type":"strong","inlineContent":[{"text":"ASN.1","type":"text"}]},{"text":".","type":"text"}],"role":"article","url":"\/documentation\/potentcodables\/gettingstarted","kind":"article","type":"topic","title":"Getting Started with Potent Codables"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"title":"Data Formats","abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"url":"\/documentation\/potentcodables\/data-formats","type":"topic","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}],"kind":"symbol","url":"\/documentation\/potentcodables\/treevaluedecodingcontainer","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TreeValueDecodingContainer","kind":"identifier"}],"role":"symbol","title":"TreeValueDecodingContainer"},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"url":"\/documentation\/potentjson\/json\/number","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Number"}],"type":"topic","title":"JSON.Number","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","navigatorTitle":[{"kind":"identifier","text":"Number"}],"abstract":[],"role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyValue","kind":"identifier"}],"url":"\/documentation\/potentcodables\/anyvalue","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","kind":"symbol","title":"AnyValue"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"type":"topic","url":"\/documentation\/potentjson\/json","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSON"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","navigatorTitle":[{"kind":"identifier","text":"JSON"}],"kind":"symbol","role":"symbol","title":"JSON","abstract":[{"type":"text","text":"General JSON value."}]},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"title":"Using AnyValue","type":"topic","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference","isActive":true}],"role":"article","url":"\/documentation\/potentcodables\/using-anyvalue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","kind":"article"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","url":"\/documentation\/potentcodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","role":"collection","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]}}}