{"abstract":[{"type":"text","text":"What are “tree values”?"}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"kind":"article","seeAlsoSections":[{"anchor":"Usage","title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"],"generated":true}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Tree Values","role":"article","modules":[{"name":"PotentCodables"}],"roleHeading":"Article"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"type":"text","text":" "},{"text":"hold the values in their exact serialized representation.  For example, ","type":"text"},{"type":"codeVoice","code":"JSON"},{"text":" tree values store numbers as a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true},{"type":"text","text":" that stores the exact number value as a string along with a number of other"},{"type":"text","text":" "},{"text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true},{"type":"text","text":" and reading the exact decimal value serialized in JSON is available from tree values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"type":"text","text":" which extends the  "},{"code":"SingleValueDecodingContainer","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"text":"Decoding ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference","isActive":true},{"text":" values using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"type":"text","text":" as follows:"}]},{"syntax":"swift","type":"codeListing","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"]},{"inlineContent":[{"text":"Each tree value has the ability to “unwrap” itself (using it’s ","type":"text"},{"type":"codeVoice","code":"unwrapped"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"text":"standard Swift type, returned as an  ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":". As an example, unwrappingthe the JSON value "},{"type":"codeVoice","code":"123.456"},{"text":" result in a Swift","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tree values are returned as an "},{"code":"Any","type":"codeVoice"},{"text":" to allow easy support any possible tree value. For this reason the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"text":" has a convenience method to access the unwrapped tree value without","type":"text"},{"type":"text","text":" "},{"type":"text","text":"excessive casting."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decoding unwrapped "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"type":"text","text":" values using the "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"type":"text","text":" as follows:"}]},{"syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"],"type":"codeListing"}]}],"references":{"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"title":"Using AnyValue","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference"}],"kind":"article","type":"topic","url":"\/documentation\/potentcodables\/using-anyvalue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","role":"article"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"kind":"symbol","url":"\/documentation\/potentcodables\/treevaluedecodingcontainer","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"topic","title":"TreeValueDecodingContainer","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TreeValueDecodingContainer","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"title":"PotentCodables","type":"topic","kind":"symbol","url":"\/documentation\/potentcodables","role":"collection"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"abstract":[{"text":"General JSON value.","type":"text"}],"url":"\/documentation\/potentjson\/json","title":"JSON","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"JSON"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"JSON","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AnyValue","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","url":"\/documentation\/potentcodables\/anyvalue","navigatorTitle":[{"kind":"identifier","text":"AnyValue"}],"role":"symbol","title":"AnyValue","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}]},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","abstract":[{"type":"text","text":"Get started using the powerful potent data formats "},{"type":"strong","inlineContent":[{"type":"text","text":"JSON"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"YAML"}]},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"CBOR"}],"type":"strong"},{"text":" & ","type":"text"},{"inlineContent":[{"text":"ASN.1","type":"text"}],"type":"strong"},{"type":"text","text":"."}],"title":"Getting Started with Potent Codables","url":"\/documentation\/potentcodables\/gettingstarted","kind":"article","type":"topic","role":"article"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"kind":"article","title":"Data Formats","url":"\/documentation\/potentcodables\/data-formats","role":"article","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}]},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"url":"\/documentation\/potentjson\/json\/number","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Number"}],"navigatorTitle":[{"text":"Number","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","title":"JSON.Number","type":"topic","role":"symbol"}}}