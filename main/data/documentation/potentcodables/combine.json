{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When used on Apple platforms where the Combine framework is available, all the encoders conform to Combine’s"},{"text":" ","type":"text"},{"type":"codeVoice","code":"TopLevelEncoder"},{"text":" and all decoders conform to its ","type":"text"},{"type":"codeVoice","code":"TopLevelDecoder"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"In addition to providing compatibility with Swift’s Combine framework these protocols are an easy way to allow","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interchanging support for data formats or frameworks without rewriting code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"code":"TopLevelDecoder","type":"codeVoice"},{"type":"text","text":" instead of a specific framework decoder would allow your code to work with whatever framework"},{"text":" ","type":"text"},{"type":"text","text":"you need."}]},{"type":"paragraph","inlineContent":[{"text":"Given the following generic function","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["","func decodeFromNetwork<T: Decodable, D: TopLevelDecoder>(url: URL, decoder: D) async throws -> T where D.Input == Data {","  let (data, _) = try await URLSession.shared.data(from: url)","  return try decoder.decode(T.self, from: data)","}",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then use any PotentCodables data format decoder to decode values from the network request."}]},{"syntax":"swift","code":["import PotentCBOR","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.cbor\"), CBOR.Decoder.default)"],"type":"codeListing"},{"type":"codeListing","code":["import PotentYAML","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.yaml\"), YAML.Decoder.default)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally "},{"type":"codeVoice","code":"decodeFromNetwork"},{"type":"text","text":" can be called with any conforming decoder from other frameworks, like"},{"type":"text","text":" "},{"type":"text","text":"Foundation’s "},{"type":"codeVoice","code":"JSONDecoder"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.json\"), JSONDecoder())"]}]}],"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Combine","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"PotentCodables"}],"role":"article","title":"Combine","roleHeading":"Article"},"abstract":[{"text":"Integration with Combine Framework.","type":"text"}],"references":{"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","url":"\/documentation\/potentcodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"type":"topic"}}}