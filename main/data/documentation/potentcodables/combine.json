{"kind":"article","abstract":[{"type":"text","text":"Integration with Combine Framework."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"When used on Apple platforms where the Combine framework is available, all the encoders conform to Combine’s","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"TopLevelEncoder"},{"text":" and all decoders conform to its ","type":"text"},{"type":"codeVoice","code":"TopLevelDecoder"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In addition to providing compatibility with Swift’s Combine framework these protocols are an easy way to allow","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interchanging support for data formats or frameworks without rewriting code."}]},{"inlineContent":[{"text":"Using ","type":"text"},{"code":"TopLevelDecoder","type":"codeVoice"},{"type":"text","text":" instead of a specific framework decoder would allow your code to work with whatever framework"},{"type":"text","text":" "},{"type":"text","text":"you need."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Given the following generic function"}],"type":"paragraph"},{"syntax":"swift","code":["","func decodeFromNetwork<T: Decodable, D: TopLevelDecoder>(url: URL, decoder: D) async throws -> T where D.Input == Data {","  let (data, _) = try await URLSession.shared.data(from: url)","  return try decoder.decode(T.self, from: data)","}",""],"type":"codeListing"},{"inlineContent":[{"text":"You can then use any PotentCodables data format decoder to decode values from the network request.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["import PotentCBOR","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.cbor\"), CBOR.Decoder.default)"],"syntax":"swift"},{"code":["import PotentYAML","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.yaml\"), YAML.Decoder.default)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally "},{"code":"decodeFromNetwork","type":"codeVoice"},{"text":" can be called with any conforming decoder from other frameworks, like","type":"text"},{"type":"text","text":" "},{"text":"Foundation’s ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","code":["import Foundation","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.json\"), JSONDecoder())"],"type":"codeListing"}]}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Combine","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"metadata":{"roleHeading":"Article","role":"article","title":"Combine","modules":[{"name":"PotentCodables"}]},"references":{"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","title":"PotentCodables","role":"collection","type":"topic","url":"\/documentation\/potentcodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}]}}}