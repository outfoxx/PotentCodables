{"abstract":[{"type":"text","text":"Integration with Combine Framework."}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"PotentCodables"}],"title":"Combine"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"When used on Apple platforms where the Combine framework is available, all the encoders conform to Combine’s"},{"text":" ","type":"text"},{"code":"TopLevelEncoder","type":"codeVoice"},{"type":"text","text":" and all decoders conform to its "},{"code":"TopLevelDecoder","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to providing compatibility with Swift’s Combine framework these protocols are an easy way to allow"},{"text":" ","type":"text"},{"text":"interchanging support for data formats or frameworks without rewriting code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"code":"TopLevelDecoder","type":"codeVoice"},{"text":" instead of a specific framework decoder would allow your code to work with whatever framework","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you need."}]},{"inlineContent":[{"type":"text","text":"Given the following generic function"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["","func decodeFromNetwork<T: Decodable, D: TopLevelDecoder>(url: URL, decoder: D) async throws -> T where D.Input == Data {","  let (data, _) = try await URLSession.shared.data(from: url)","  return try decoder.decode(T.self, from: data)","}",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then use any PotentCodables data format decoder to decode values from the network request."}]},{"type":"codeListing","syntax":"swift","code":["import PotentCBOR","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.cbor\"), CBOR.Decoder.default)"]},{"code":["import PotentYAML","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.yaml\"), YAML.Decoder.default)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Additionally ","type":"text"},{"code":"decodeFromNetwork","type":"codeVoice"},{"text":" can be called with any conforming decoder from other frameworks, like","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Foundation’s "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Foundation","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.json\"), JSONDecoder())"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Combine","interfaceLanguage":"swift"},"references":{"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","url":"\/documentation\/potentcodables","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"type":"topic","role":"collection"}}}