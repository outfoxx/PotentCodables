{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"When used on Apple platforms where the Combine framework is available, all the encoders conform to Combine’s","type":"text"},{"type":"text","text":" "},{"code":"TopLevelEncoder","type":"codeVoice"},{"type":"text","text":" and all decoders conform to its "},{"code":"TopLevelDecoder","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In addition to providing compatibility with Swift’s Combine framework these protocols are an easy way to allow","type":"text"},{"type":"text","text":" "},{"text":"interchanging support for data formats or frameworks without rewriting code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"code":"TopLevelDecoder","type":"codeVoice"},{"type":"text","text":" instead of a specific framework decoder would allow your code to work with whatever framework"},{"type":"text","text":" "},{"text":"you need.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Given the following generic function","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["","func decodeFromNetwork<T: Decodable, D: TopLevelDecoder>(url: URL, decoder: D) async throws -> T where D.Input == Data {","  let (data, _) = try await URLSession.shared.data(from: url)","  return try decoder.decode(T.self, from: data)","}",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then use any PotentCodables data format decoder to decode values from the network request."}]},{"syntax":"swift","type":"codeListing","code":["import PotentCBOR","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.cbor\"), CBOR.Decoder.default)"]},{"syntax":"swift","code":["import PotentYAML","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.yaml\"), YAML.Decoder.default)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally "},{"code":"decodeFromNetwork","type":"codeVoice"},{"text":" can be called with any conforming decoder from other frameworks, like","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Foundation’s "},{"code":"JSONDecoder","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.json\"), JSONDecoder())"]}]}],"sections":[],"metadata":{"modules":[{"name":"PotentCodables"}],"roleHeading":"Article","role":"article","title":"Combine"},"kind":"article","hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Combine"},"abstract":[{"type":"text","text":"Integration with Combine Framework."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"url":"\/documentation\/potentcodables","role":"collection"}}}