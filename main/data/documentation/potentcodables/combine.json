{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Combine"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"text":"When used on Apple platforms where the Combine framework is available, all the encoders conform to Combine’s","type":"text"},{"type":"text","text":" "},{"code":"TopLevelEncoder","type":"codeVoice"},{"type":"text","text":" and all decoders conform to its "},{"type":"codeVoice","code":"TopLevelDecoder"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to providing compatibility with Swift’s Combine framework these protocols are an easy way to allow"},{"type":"text","text":" "},{"text":"interchanging support for data formats or frameworks without rewriting code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"code":"TopLevelDecoder","type":"codeVoice"},{"text":" instead of a specific framework decoder would allow your code to work with whatever framework","type":"text"},{"text":" ","type":"text"},{"text":"you need.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Given the following generic function"}],"type":"paragraph"},{"syntax":"swift","code":["","func decodeFromNetwork<T: Decodable, D: TopLevelDecoder>(url: URL, decoder: D) async throws -> T where D.Input == Data {","  let (data, _) = try await URLSession.shared.data(from: url)","  return try decoder.decode(T.self, from: data)","}",""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can then use any PotentCodables data format decoder to decode values from the network request."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import PotentCBOR","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.cbor\"), CBOR.Decoder.default)"]},{"type":"codeListing","syntax":"swift","code":["import PotentYAML","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.yaml\"), YAML.Decoder.default)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally "},{"code":"decodeFromNetwork","type":"codeVoice"},{"type":"text","text":" can be called with any conforming decoder from other frameworks, like"},{"type":"text","text":" "},{"type":"text","text":"Foundation’s "},{"code":"JSONDecoder","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["import Foundation","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.json\"), JSONDecoder())"],"syntax":"swift"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"title":"Combine","roleHeading":"Article","role":"article","modules":[{"name":"PotentCodables"}]},"sections":[],"kind":"article","abstract":[{"type":"text","text":"Integration with Combine Framework."}],"references":{"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"title":"PotentCodables","type":"topic","kind":"symbol","url":"\/documentation\/potentcodables","role":"collection"}}}