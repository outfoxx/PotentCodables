{"abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"kind":"article","identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","interfaceLanguage":"swift"},"metadata":{"role":"article","title":"Polymorphic Encoding & Decoding","modules":[{"name":"PotentCodables"}],"roleHeading":"Article"},"seeAlsoSections":[{"generated":true,"anchor":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"title":"Advanced"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic encoding refers to being able to encode a value with a Swift type identifier that can be used to determine"},{"type":"text","text":" "},{"text":"the correct type to decode.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":" are provided to make encoding polymorphic values easier."},{"type":"text","text":" "},{"type":"text","text":"These “reference types” are designed to work with with decoding concrete types like classes and structs as well as"},{"text":" ","type":"text"},{"text":"protocols.","type":"text"}]},{"anchor":"Wrapped-Values","type":"heading","text":"Wrapped Values","level":3},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" is used to decode values that are “wrapped” with a type name. For example, given JSON similar"},{"type":"text","text":" "},{"text":"to the following:","type":"text"}]},{"syntax":"javascript","type":"codeListing","code":["{ \"@type\" : \"MyApp.Foo\", \"value\" : { \"name\" : \"A Value\" } }"]},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" can be used to decode a value with a little extra code. Here we decode implementations of a"},{"text":" ","type":"text"},{"type":"text","text":"protocol "},{"type":"codeVoice","code":"FooBar"},{"text":".","type":"text"}]},{"syntax":"swift","code":["protocol FooBar {","  var name: String { get }","}","","struct Foo: FooBar, Codable {","  let name: String","}","","struct Bar: FooBar, Codable {","  let count: Int","}","","DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self]) \/\/ Allow types for polymorphic decoding","","let val = try JSONDecoder.default.decode(Ref.self).as(FooBar.self)  \/\/ Decode a `FooBar` and use `as` to cast or throw an error."],"type":"codeListing"},{"type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution"},{"type":"text","text":" to learn why"},{"text":" ","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex.addAllowedTypes"},{"text":" is required and about security issues related to decoding.","type":"text"}]}],"style":"important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversley to encode a value wrapped with an object containg the Swift type name simply use "},{"type":"codeVoice","code":"Ref.Value"},{"text":" during","type":"text"},{"type":"text","text":" "},{"text":"encoding:","type":"text"}]},{"syntax":"swift","code":["let data = try JSONEncoder.default.encode(Ref.Value(val))"],"type":"codeListing"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" is a type alias for the generic type ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"text":" that uses the","type":"text"},{"text":" ","type":"text"},{"text":"looks up type using the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true,"type":"reference"},{"text":" and the default type and value keys. To customize keys","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or use a customized type index see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},{"text":".","type":"text"}]}]},{"level":3,"text":"Embedded Values","anchor":"Embedded-Values","type":"heading"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":", which includes ","type":"text"},{"code":"EmbeddedRef.Value","type":"codeVoice"},{"type":"text","text":", is also"},{"text":" ","type":"text"},{"type":"text","text":"provided and is used the exact same way as "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":". The difference is that"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":" embeds the type name along side the encoded value’s other keys.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the example JSON above would resemble the following with the key embedded:"}]},{"type":"codeListing","code":["{ \"@type\" : \"MyApp.Foo\", \"name\" : \"A Value\" }"],"syntax":"javascript"},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":""},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":" requires the value it encodes to use a keyed-container.  Unkeyed and"},{"type":"text","text":" "},{"text":"single-value containers cannot be used with it, but they can be used with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"See the documentation for ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":" for a lot of details on their usage","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as documentation of how to customize the keys used during encoding\/decoding."}]},{"text":"Nested Values","type":"heading","level":3,"anchor":"Nested-Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a struct or class needs to reference a polymorphic type (e.g. via a protocol) you will need to implement"},{"type":"text","text":" "},{"code":"Encodable.encode(to:)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable.init(from:)"},{"text":". In this scenario your can still use ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" in your provided implementations."}]},{"inlineContent":[{"type":"text","text":"We can store a value confornming to "},{"type":"codeVoice","code":"FooBar"},{"type":"text","text":" (from the previous examples) in a struct in the following way:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct TestValue: Codable {","  var fooBar: FooBar","","  init(fooBar: FooBar) {","    self.fooBar = fooBar","  }","","  enum CodingKeys: CodingKey {","    case fooBar","  }","","  init(from decoder: Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","    self.fooBar = try container.decode(Ref.self, forKey: .fooBar).as(FooBar.self)","  }","","  func encode(to encoder: Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(Ref.Value(fooBar), forKey: .fooBar)","  }","}"]},{"type":"heading","level":2,"anchor":"Type-ID-Serialization-and-Type-Resolution","text":"Type ID Serialization and Type Resolution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the type serialization & resolution mechanism disallows all types to be"},{"type":"text","text":" "},{"text":"decoded. This is to ensure that decoding is secure and only authorized types can be decoded. Additionally, the index","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mechanism, by default, uses a type id that does not include your application or module’s the Swift module name so as"},{"type":"text","text":" "},{"text":"to ensure stable type ids across modules and frameworks.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The means that you must explicity allow classes prior to using polymorphic decoding. This is done as simply as:"}]},{"code":["DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self])"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This generates a type id for each type (","type":"text"},{"type":"codeVoice","code":"Foo"},{"text":" & ","type":"text"},{"type":"codeVoice","code":"Bar"},{"text":") and upates the map of allowed types to include the types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"provided."}],"type":"paragraph"},{"text":"Custom Type Index","type":"heading","anchor":"Custom-Type-Index","level":3},{"inlineContent":[{"type":"text","text":"Alternatively you can implement and provide a custom type index and define your own reference type (see"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","type":"reference","isActive":true},{"text":") . If you have an alternate means of looking up types and\/or generating type ids.","type":"text"}],"type":"paragraph"},{"style":"important","name":"Important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index is designed to be safe by default. This means Swift Packages and Xcode Frameworks"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"must"}],"type":"strong"},{"type":"text","text":" use a custom type index to ensure the types it expects are registered and reduce the chance of inadvertantly"},{"type":"text","text":" "},{"type":"text","text":"creating security vulnerabilities in adopting applications."}]}]}],"kind":"content"}],"references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"text":"by clients.","type":"text"}],"title":"DefaultTypeIndex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"topic","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","abstract":[{"text":"Learn how to implement new ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"url":"\/documentation\/potentcodables\/implementing-formats","kind":"article","role":"article","title":"Implementing New Data Formats","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"type":"topic","abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"title":"Ref","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Ref","kind":"identifier"}],"navigatorTitle":[{"text":"Ref","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"type":"topic","abstract":[{"text":"The implementation type for ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"text":" types.","type":"text"}],"title":"CustomRef","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomRef"}],"navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","url":"\/documentation\/potentcodables\/customref"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"type":"topic","abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"title":"EmbeddedRef","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"EmbeddedRef","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","url":"\/documentation\/potentcodables\/embeddedref"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"text":" system","type":"text"}],"url":"\/documentation\/potentcodables","title":"PotentCodables","role":"collection","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution":{"kind":"section","type":"topic","title":"Type ID Serialization and Type Resolution","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding#Type-ID-Serialization-and-Type-Resolution","abstract":[]},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"text":"s implement.","type":"text"}],"url":"\/documentation\/potentcodables\/protocols","kind":"article","role":"article","title":"Encoder\/Decoder Protocols","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"role":"article","url":"\/documentation\/potentcodables\/custom-references","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","type":"topic","title":"Custom References","kind":"article"}}}