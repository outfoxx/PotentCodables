{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic encoding refers to being able to encode a value with a Swift type identifier that can be used to determine"},{"type":"text","text":" "},{"type":"text","text":"the correct type to decode."}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" are provided to make encoding polymorphic values easier."},{"type":"text","text":" "},{"type":"text","text":"These “reference types” are designed to work with with decoding concrete types like classes and structs as well as"},{"type":"text","text":" "},{"type":"text","text":"protocols."}]},{"anchor":"Wrapped-Values","level":3,"type":"heading","text":"Wrapped Values"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" is used to decode values that are “wrapped” with a type name. For example, given JSON similar"},{"type":"text","text":" "},{"type":"text","text":"to the following:"}]},{"type":"codeListing","syntax":"javascript","code":["{ \"@type\" : \"MyApp.Foo\", \"value\" : { \"name\" : \"A Value\" } }"]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" can be used to decode a value with a little extra code. Here we decode implementations of a"},{"type":"text","text":" "},{"type":"text","text":"protocol "},{"type":"codeVoice","code":"FooBar"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["protocol FooBar {","  var name: String { get }","}","","struct Foo: FooBar, Codable {","  let name: String","}","","struct Bar: FooBar, Codable {","  let count: Int","}","","DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self]) \/\/ Allow types for polymorphic decoding","","let val = try JSONDecoder.default.decode(Ref.self).as(FooBar.self)  \/\/ Decode a `FooBar` and use `as` to cast or throw an error."]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution"},{"type":"text","text":" to learn why"},{"type":"text","text":" "},{"type":"codeVoice","code":"DefaultTypeIndex.addAllowedTypes"},{"type":"text","text":" is required and about security issues related to decoding."}]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversley to encode a value wrapped with an object containg the Swift type name simply use "},{"type":"codeVoice","code":"Ref.Value"},{"type":"text","text":" during"},{"type":"text","text":" "},{"type":"text","text":"encoding:"}]},{"type":"codeListing","syntax":"swift","code":["let data = try JSONEncoder.default.encode(Ref.Value(val))"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" is a type alias for the generic type "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"type":"text","text":" that uses the"},{"type":"text","text":" "},{"type":"text","text":"looks up type using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":" and the default type and value keys. To customize keys"},{"type":"text","text":" "},{"type":"text","text":"or use a customized type index see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Embedded-Values","level":3,"type":"heading","text":"Embedded Values"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":", which includes "},{"type":"codeVoice","code":"EmbeddedRef.Value"},{"type":"text","text":", is also"},{"type":"text","text":" "},{"type":"text","text":"provided and is used the exact same way as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":". The difference is that"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" embeds the type name along side the encoded value’s other keys."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the example JSON above would resemble the following with the key embedded:"}]},{"type":"codeListing","syntax":"javascript","code":["{ \"@type\" : \"MyApp.Foo\", \"name\" : \"A Value\" }"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" requires the value it encodes to use a keyed-container.  Unkeyed and"},{"type":"text","text":" "},{"type":"text","text":"single-value containers cannot be used with it, but they can be used with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the documentation for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" for a lot of details on their usage"},{"type":"text","text":" "},{"type":"text","text":"as well as documentation of how to customize the keys used during encoding\/decoding."}]},{"anchor":"Nested-Values","level":3,"type":"heading","text":"Nested Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a struct or class needs to reference a polymorphic type (e.g. via a protocol) you will need to implement"},{"type":"text","text":" "},{"type":"codeVoice","code":"Encodable.encode(to:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable.init(from:)"},{"type":"text","text":". In this scenario your can still use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" in your provided implementations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can store a value confornming to "},{"type":"codeVoice","code":"FooBar"},{"type":"text","text":" (from the previous examples) in a struct in the following way:"}]},{"type":"codeListing","syntax":"swift","code":["struct TestValue: Codable {","  var fooBar: FooBar","","  init(fooBar: FooBar) {","    self.fooBar = fooBar","  }","","  enum CodingKeys: CodingKey {","    case fooBar","  }","","  init(from decoder: Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","    self.fooBar = try container.decode(Ref.self, forKey: .fooBar).as(FooBar.self)","  }","","  func encode(to encoder: Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(Ref.Value(fooBar), forKey: .fooBar)","  }","}"]},{"anchor":"Type-ID-Serialization-and-Type-Resolution","level":2,"type":"heading","text":"Type ID Serialization and Type Resolution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the type serialization & resolution mechanism disallows all types to be"},{"type":"text","text":" "},{"type":"text","text":"decoded. This is to ensure that decoding is secure and only authorized types can be decoded. Additionally, the index"},{"type":"text","text":" "},{"type":"text","text":"mechanism, by default, uses a type id that does not include your application or module’s the Swift module name so as"},{"type":"text","text":" "},{"type":"text","text":"to ensure stable type ids across modules and frameworks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The means that you must explicity allow classes prior to using polymorphic decoding. This is done as simply as:"}]},{"type":"codeListing","syntax":"swift","code":["DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This generates a type id for each type ("},{"type":"codeVoice","code":"Foo"},{"type":"text","text":" & "},{"type":"codeVoice","code":"Bar"},{"type":"text","text":") and upates the map of allowed types to include the types"},{"type":"text","text":" "},{"type":"text","text":"provided."}]},{"anchor":"Custom-Type-Index","level":3,"type":"heading","text":"Custom Type Index"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively you can implement and provide a custom type index and define your own reference type (see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},{"type":"text","text":") . If you have an alternate means of looking up types and\/or generating type ids."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index is designed to be safe by default. This means Swift Packages and Xcode Frameworks"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" use a custom type index to ensure the types it expects are registered and reduce the chance of inadvertantly"},{"type":"text","text":" "},{"type":"text","text":"creating security vulnerabilities in adopting applications."}]}],"type":"aside","name":"Important"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Polymorphic Encoding & Decoding","role":"article","modules":[{"name":"PotentCodables"}]},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"generated":true}],"references":{"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"role":"article","title":"Implementing New Data Formats","abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/implementing-formats"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"role":"symbol","title":"EmbeddedRef","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedRef"}],"abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"url":"\/documentation\/potentcodables\/embeddedref"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"role":"symbol","title":"Ref","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"}],"abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Ref"}],"url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"role":"article","title":"Encoder\/Decoder Protocols","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s implement."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/protocols"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"role":"symbol","title":"DefaultTypeIndex","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeIndex"}],"abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}],"url":"\/documentation\/potentcodables\/defaulttypeindex"},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"role":"article","title":"Custom References","abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/custom-references"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"role":"symbol","title":"CustomRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomRef"}],"abstract":[{"type":"text","text":"The implementation type for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CustomRef"}],"url":"\/documentation\/potentcodables\/customref"},"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution":{"abstract":[],"title":"Type ID Serialization and Type Resolution","kind":"section","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding#Type-ID-Serialization-and-Type-Resolution"}}}