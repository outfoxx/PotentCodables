{"seeAlsoSections":[{"generated":true,"title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"PotentCodables"}],"title":"Polymorphic Encoding & Decoding"},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding"},"sections":[],"abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Polymorphic encoding refers to being able to encode a value with a Swift type identifier that can be used to determine","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the correct type to decode."}]},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" are provided to make encoding polymorphic values easier."},{"type":"text","text":" "},{"type":"text","text":"These “reference types” are designed to work with with decoding concrete types like classes and structs as well as"},{"type":"text","text":" "},{"type":"text","text":"protocols."}]},{"text":"Wrapped Values","level":3,"type":"heading","anchor":"Wrapped-Values"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" is used to decode values that are “wrapped” with a type name. For example, given JSON similar","type":"text"},{"type":"text","text":" "},{"text":"to the following:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"javascript","code":["{ \"@type\" : \"MyApp.Foo\", \"value\" : { \"name\" : \"A Value\" } }"]},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" can be used to decode a value with a little extra code. Here we decode implementations of a","type":"text"},{"text":" ","type":"text"},{"text":"protocol ","type":"text"},{"type":"codeVoice","code":"FooBar"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["protocol FooBar {","  var name: String { get }","}","","struct Foo: FooBar, Codable {","  let name: String","}","","struct Bar: FooBar, Codable {","  let count: Int","}","","DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self]) \/\/ Allow types for polymorphic decoding","","let val = try JSONDecoder.default.decode(Ref.self).as(FooBar.self)  \/\/ Decode a `FooBar` and use `as` to cast or throw an error."],"syntax":"swift"},{"name":"Important","style":"important","content":[{"inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution","isActive":true,"type":"reference"},{"text":" to learn why","type":"text"},{"type":"text","text":" "},{"code":"DefaultTypeIndex.addAllowedTypes","type":"codeVoice"},{"type":"text","text":" is required and about security issues related to decoding."}],"type":"paragraph"}],"type":"aside"},{"inlineContent":[{"type":"text","text":"Conversley to encode a value wrapped with an object containg the Swift type name simply use "},{"code":"Ref.Value","type":"codeVoice"},{"text":" during","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"encoding:"}],"type":"paragraph"},{"code":["let data = try JSONEncoder.default.encode(Ref.Value(val))"],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" is a type alias for the generic type ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"text":" that uses the","type":"text"},{"type":"text","text":" "},{"text":"looks up type using the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference","isActive":true},{"text":" and the default type and value keys. To customize keys","type":"text"},{"text":" ","type":"text"},{"text":"or use a customized type index see ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","isActive":true},{"text":".","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"type":"heading","text":"Embedded Values","anchor":"Embedded-Values","level":3},{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":", which includes "},{"code":"EmbeddedRef.Value","type":"codeVoice"},{"text":", is also","type":"text"},{"type":"text","text":" "},{"text":"provided and is used the exact same way as ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":". The difference is that"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference"},{"text":" embeds the type name along side the encoded value’s other keys.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, the example JSON above would resemble the following with the key embedded:","type":"text"}]},{"syntax":"javascript","code":["{ \"@type\" : \"MyApp.Foo\", \"name\" : \"A Value\" }"],"type":"codeListing"},{"style":"note","name":"Note","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" requires the value it encodes to use a keyed-container.  Unkeyed and"},{"text":" ","type":"text"},{"type":"text","text":"single-value containers cannot be used with it, but they can be used with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"See the documentation for ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":" for a lot of details on their usage"},{"type":"text","text":" "},{"text":"as well as documentation of how to customize the keys used during encoding\/decoding.","type":"text"}]},{"type":"heading","level":3,"text":"Nested Values","anchor":"Nested-Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a struct or class needs to reference a polymorphic type (e.g. via a protocol) you will need to implement"},{"type":"text","text":" "},{"type":"codeVoice","code":"Encodable.encode(to:)"},{"type":"text","text":" and "},{"code":"Decodable.init(from:)","type":"codeVoice"},{"text":". In this scenario your can still use ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"text":" in your provided implementations.","type":"text"}]},{"inlineContent":[{"type":"text","text":"We can store a value confornming to "},{"code":"FooBar","type":"codeVoice"},{"type":"text","text":" (from the previous examples) in a struct in the following way:"}],"type":"paragraph"},{"type":"codeListing","code":["struct TestValue: Codable {","  var fooBar: FooBar","","  init(fooBar: FooBar) {","    self.fooBar = fooBar","  }","","  enum CodingKeys: CodingKey {","    case fooBar","  }","","  init(from decoder: Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","    self.fooBar = try container.decode(Ref.self, forKey: .fooBar).as(FooBar.self)","  }","","  func encode(to encoder: Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(Ref.Value(fooBar), forKey: .fooBar)","  }","}"],"syntax":"swift"},{"level":2,"anchor":"Type-ID-Serialization-and-Type-Resolution","type":"heading","text":"Type ID Serialization and Type Resolution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the type serialization & resolution mechanism disallows all types to be"},{"text":" ","type":"text"},{"text":"decoded. This is to ensure that decoding is secure and only authorized types can be decoded. Additionally, the index","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"mechanism, by default, uses a type id that does not include your application or module’s the Swift module name so as"},{"text":" ","type":"text"},{"text":"to ensure stable type ids across modules and frameworks.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The means that you must explicity allow classes prior to using polymorphic decoding. This is done as simply as:"}]},{"type":"codeListing","syntax":"swift","code":["DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self])"]},{"inlineContent":[{"type":"text","text":"This generates a type id for each type ("},{"type":"codeVoice","code":"Foo"},{"type":"text","text":" & "},{"type":"codeVoice","code":"Bar"},{"text":") and upates the map of allowed types to include the types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"provided."}],"type":"paragraph"},{"anchor":"Custom-Type-Index","type":"heading","level":3,"text":"Custom Type Index"},{"inlineContent":[{"type":"text","text":"Alternatively you can implement and provide a custom type index and define your own reference type (see"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","isActive":true,"type":"reference"},{"text":") . If you have an alternate means of looking up types and\/or generating type ids.","type":"text"}],"type":"paragraph"},{"type":"aside","name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index is designed to be safe by default. This means Swift Packages and Xcode Frameworks"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"text":"must","type":"text"}]},{"type":"text","text":" use a custom type index to ensure the types it expects are registered and reduce the chance of inadvertantly"},{"text":" ","type":"text"},{"type":"text","text":"creating security vulnerabilities in adopting applications."}]}]}],"kind":"content"}],"references":{"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution":{"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding#Type-ID-Serialization-and-Type-Resolution","abstract":[],"kind":"section","type":"topic","title":"Type ID Serialization and Type Resolution","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"title":"Encoder\/Decoder Protocols","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/potentcodables\/protocols","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Ref"}],"kind":"symbol","url":"\/documentation\/potentcodables\/ref","abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}],"title":"Ref","role":"symbol","navigatorTitle":[{"text":"Ref","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"text":" ","type":"text"},{"type":"text","text":"by clients."}],"url":"\/documentation\/potentcodables\/defaulttypeindex","title":"DefaultTypeIndex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","url":"\/documentation\/potentcodables\/custom-references","abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"type":"topic","role":"article","kind":"article","title":"Custom References"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"title":"EmbeddedRef","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddedRef","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"url":"\/documentation\/potentcodables\/embeddedref","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CustomRef","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/customref","abstract":[{"text":"The implementation type for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" types."}],"title":"CustomRef","role":"symbol","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","type":"topic","title":"Implementing New Data Formats","role":"article","abstract":[{"text":"Learn how to implement new ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","url":"\/documentation\/potentcodables\/implementing-formats"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"type":"topic","url":"\/documentation\/potentcodables","role":"collection","title":"PotentCodables"}}}