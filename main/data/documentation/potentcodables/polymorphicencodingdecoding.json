{"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","seeAlsoSections":[{"anchor":"Advanced","title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"generated":true}],"abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic encoding refers to being able to encode a value with a Swift type identifier that can be used to determine"},{"text":" ","type":"text"},{"text":"the correct type to decode.","type":"text"}]},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" are provided to make encoding polymorphic values easier."},{"type":"text","text":" "},{"text":"These “reference types” are designed to work with with decoding concrete types like classes and structs as well as","type":"text"},{"type":"text","text":" "},{"text":"protocols.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Wrapped Values","anchor":"Wrapped-Values"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"text":" is used to decode values that are “wrapped” with a type name. For example, given JSON similar","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the following:"}]},{"code":["{ \"@type\" : \"MyApp.Foo\", \"value\" : { \"name\" : \"A Value\" } }"],"syntax":"javascript","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" can be used to decode a value with a little extra code. Here we decode implementations of a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"protocol "},{"type":"codeVoice","code":"FooBar"},{"text":".","type":"text"}]},{"type":"codeListing","code":["protocol FooBar {","  var name: String { get }","}","","struct Foo: FooBar, Codable {","  let name: String","}","","struct Bar: FooBar, Codable {","  let count: Int","}","","DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self]) \/\/ Allow types for polymorphic decoding","","let val = try JSONDecoder.default.decode(Ref.self).as(FooBar.self)  \/\/ Decode a `FooBar` and use `as` to cast or throw an error."],"syntax":"swift"},{"style":"important","content":[{"inlineContent":[{"type":"text","text":"See "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution","type":"reference"},{"type":"text","text":" to learn why"},{"text":" ","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex.addAllowedTypes"},{"type":"text","text":" is required and about security issues related to decoding."}],"type":"paragraph"}],"name":"Important","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversley to encode a value wrapped with an object containg the Swift type name simply use "},{"type":"codeVoice","code":"Ref.Value"},{"type":"text","text":" during"},{"type":"text","text":" "},{"text":"encoding:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let data = try JSONEncoder.default.encode(Ref.Value(val))"]},{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" is a type alias for the generic type ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"reference","isActive":true},{"text":" that uses the","type":"text"},{"type":"text","text":" "},{"text":"looks up type using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference"},{"text":" and the default type and value keys. To customize keys","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or use a customized type index see "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside"},{"anchor":"Embedded-Values","level":3,"text":"Embedded Values","type":"heading"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":", which includes "},{"code":"EmbeddedRef.Value","type":"codeVoice"},{"type":"text","text":", is also"},{"text":" ","type":"text"},{"type":"text","text":"provided and is used the exact same way as "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":". The difference is that"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":" embeds the type name along side the encoded value’s other keys."}]},{"inlineContent":[{"type":"text","text":"For example, the example JSON above would resemble the following with the key embedded:"}],"type":"paragraph"},{"syntax":"javascript","type":"codeListing","code":["{ \"@type\" : \"MyApp.Foo\", \"name\" : \"A Value\" }"]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":""},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"text":" requires the value it encodes to use a keyed-container.  Unkeyed and","type":"text"},{"text":" ","type":"text"},{"text":"single-value containers cannot be used with it, but they can be used with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":".","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"text":"See the documentation for ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":" for a lot of details on their usage","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as well as documentation of how to customize the keys used during encoding\/decoding."}],"type":"paragraph"},{"anchor":"Nested-Values","type":"heading","level":3,"text":"Nested Values"},{"inlineContent":[{"text":"When a struct or class needs to reference a polymorphic type (e.g. via a protocol) you will need to implement","type":"text"},{"type":"text","text":" "},{"code":"Encodable.encode(to:)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable.init(from:)"},{"text":". In this scenario your can still use ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"text":" or","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" in your provided implementations."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can store a value confornming to "},{"code":"FooBar","type":"codeVoice"},{"text":" (from the previous examples) in a struct in the following way:","type":"text"}]},{"code":["struct TestValue: Codable {","  var fooBar: FooBar","","  init(fooBar: FooBar) {","    self.fooBar = fooBar","  }","","  enum CodingKeys: CodingKey {","    case fooBar","  }","","  init(from decoder: Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","    self.fooBar = try container.decode(Ref.self, forKey: .fooBar).as(FooBar.self)","  }","","  func encode(to encoder: Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(Ref.Value(fooBar), forKey: .fooBar)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Type ID Serialization and Type Resolution","level":2,"anchor":"Type-ID-Serialization-and-Type-Resolution"},{"inlineContent":[{"type":"text","text":"By default the type serialization & resolution mechanism disallows all types to be"},{"text":" ","type":"text"},{"text":"decoded. This is to ensure that decoding is secure and only authorized types can be decoded. Additionally, the index","type":"text"},{"type":"text","text":" "},{"text":"mechanism, by default, uses a type id that does not include your application or module’s the Swift module name so as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to ensure stable type ids across modules and frameworks."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The means that you must explicity allow classes prior to using polymorphic decoding. This is done as simply as:"}]},{"type":"codeListing","syntax":"swift","code":["DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This generates a type id for each type ("},{"type":"codeVoice","code":"Foo"},{"text":" & ","type":"text"},{"type":"codeVoice","code":"Bar"},{"type":"text","text":") and upates the map of allowed types to include the types"},{"text":" ","type":"text"},{"text":"provided.","type":"text"}]},{"text":"Custom Type Index","type":"heading","level":3,"anchor":"Custom-Type-Index"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively you can implement and provide a custom type index and define your own reference type (see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},{"text":") . If you have an alternate means of looking up types and\/or generating type ids.","type":"text"}]},{"type":"aside","name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index is designed to be safe by default. This means Swift Packages and Xcode Frameworks"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"text":"must","type":"text"}]},{"text":" use a custom type index to ensure the types it expects are registered and reduce the chance of inadvertantly","type":"text"},{"type":"text","text":" "},{"type":"text","text":"creating security vulnerabilities in adopting applications."}]}]}],"kind":"content"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding"},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Polymorphic Encoding & Decoding"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"references":{"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","navigatorTitle":[{"text":"EmbeddedRef","kind":"identifier"}],"abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"url":"\/documentation\/potentcodables\/embeddedref","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddedRef","kind":"identifier"}],"role":"symbol","title":"EmbeddedRef","type":"topic","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"url":"\/documentation\/potentcodables\/ref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","kind":"symbol","role":"symbol","title":"Ref","navigatorTitle":[{"text":"Ref","kind":"identifier"}],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Ref","kind":"identifier"}],"abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex","role":"symbol","title":"DefaultTypeIndex","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultTypeIndex","kind":"identifier"}],"abstract":[{"text":"Default type index that uses a simple global map that can be updated","type":"text"},{"type":"text","text":" "},{"text":"by clients.","type":"text"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"kind":"article","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","url":"\/documentation\/potentcodables\/custom-references","abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"title":"Custom References","role":"article"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"kind":"article","abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"type":"text","text":"s implement."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","type":"topic","url":"\/documentation\/potentcodables\/protocols","title":"Encoder\/Decoder Protocols","role":"article"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"url":"\/documentation\/potentcodables","role":"collection"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"url":"\/documentation\/potentcodables\/customref","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"title":"CustomRef","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"topic","role":"symbol","abstract":[{"text":"The implementation type for ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" types.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","abstract":[{"type":"text","text":"Learn how to implement new "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" data formats easily."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","type":"topic","title":"Implementing New Data Formats","role":"article","url":"\/documentation\/potentcodables\/implementing-formats"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution":{"kind":"section","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding#Type-ID-Serialization-and-Type-Resolution","title":"Type ID Serialization and Type Resolution","type":"topic","abstract":[]}}}