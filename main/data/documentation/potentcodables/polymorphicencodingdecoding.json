{"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"Polymorphic encoding refers to being able to encode a value with a Swift type identifier that can be used to determine","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the correct type to decode."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference"},{"type":"text","text":" are provided to make encoding polymorphic values easier."},{"type":"text","text":" "},{"type":"text","text":"These “reference types” are designed to work with with decoding concrete types like classes and structs as well as"},{"type":"text","text":" "},{"type":"text","text":"protocols."}]},{"type":"heading","text":"Wrapped Values","anchor":"Wrapped-Values","level":3},{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" is used to decode values that are “wrapped” with a type name. For example, given JSON similar"},{"type":"text","text":" "},{"type":"text","text":"to the following:"}],"type":"paragraph"},{"code":["{ \"@type\" : \"MyApp.Foo\", \"value\" : { \"name\" : \"A Value\" } }"],"syntax":"javascript","type":"codeListing"},{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" can be used to decode a value with a little extra code. Here we decode implementations of a"},{"type":"text","text":" "},{"type":"text","text":"protocol "},{"type":"codeVoice","code":"FooBar"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol FooBar {","  var name: String { get }","}","","struct Foo: FooBar, Codable {","  let name: String","}","","struct Bar: FooBar, Codable {","  let count: Int","}","","DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self]) \/\/ Allow types for polymorphic decoding","","let val = try JSONDecoder.default.decode(Ref.self).as(FooBar.self)  \/\/ Decode a `FooBar` and use `as` to cast or throw an error."]},{"type":"aside","style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution"},{"type":"text","text":" to learn why"},{"type":"text","text":" "},{"code":"DefaultTypeIndex.addAllowedTypes","type":"codeVoice"},{"text":" is required and about security issues related to decoding.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversley to encode a value wrapped with an object containg the Swift type name simply use "},{"code":"Ref.Value","type":"codeVoice"},{"type":"text","text":" during"},{"text":" ","type":"text"},{"text":"encoding:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let data = try JSONEncoder.default.encode(Ref.Value(val))"]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" is a type alias for the generic type "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":" that uses the","type":"text"},{"text":" ","type":"text"},{"text":"looks up type using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference"},{"text":" and the default type and value keys. To customize keys","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or use a customized type index see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},{"text":".","type":"text"}]}]},{"type":"heading","text":"Embedded Values","anchor":"Embedded-Values","level":3},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":", which includes "},{"code":"EmbeddedRef.Value","type":"codeVoice"},{"type":"text","text":", is also"},{"type":"text","text":" "},{"type":"text","text":"provided and is used the exact same way as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":". The difference is that"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"text":" embeds the type name along side the encoded value’s other keys.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, the example JSON above would resemble the following with the key embedded:","type":"text"}]},{"type":"codeListing","syntax":"javascript","code":["{ \"@type\" : \"MyApp.Foo\", \"name\" : \"A Value\" }"]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":""},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"text":" requires the value it encodes to use a keyed-container.  Unkeyed and","type":"text"},{"text":" ","type":"text"},{"text":"single-value containers cannot be used with it, but they can be used with ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"See the documentation for ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" for a lot of details on their usage"},{"type":"text","text":" "},{"text":"as well as documentation of how to customize the keys used during encoding\/decoding.","type":"text"}]},{"level":3,"text":"Nested Values","anchor":"Nested-Values","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a struct or class needs to reference a polymorphic type (e.g. via a protocol) you will need to implement"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Encodable.encode(to:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable.init(from:)"},{"type":"text","text":". In this scenario your can still use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" in your provided implementations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can store a value confornming to "},{"type":"codeVoice","code":"FooBar"},{"type":"text","text":" (from the previous examples) in a struct in the following way:"}]},{"code":["struct TestValue: Codable {","  var fooBar: FooBar","","  init(fooBar: FooBar) {","    self.fooBar = fooBar","  }","","  enum CodingKeys: CodingKey {","    case fooBar","  }","","  init(from decoder: Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","    self.fooBar = try container.decode(Ref.self, forKey: .fooBar).as(FooBar.self)","  }","","  func encode(to encoder: Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(Ref.Value(fooBar), forKey: .fooBar)","  }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","anchor":"Type-ID-Serialization-and-Type-Resolution","text":"Type ID Serialization and Type Resolution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the type serialization & resolution mechanism disallows all types to be"},{"type":"text","text":" "},{"type":"text","text":"decoded. This is to ensure that decoding is secure and only authorized types can be decoded. Additionally, the index"},{"type":"text","text":" "},{"type":"text","text":"mechanism, by default, uses a type id that does not include your application or module’s the Swift module name so as"},{"type":"text","text":" "},{"text":"to ensure stable type ids across modules and frameworks.","type":"text"}]},{"inlineContent":[{"text":"The means that you must explicity allow classes prior to using polymorphic decoding. This is done as simply as:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self])"],"type":"codeListing"},{"inlineContent":[{"text":"This generates a type id for each type (","type":"text"},{"code":"Foo","type":"codeVoice"},{"type":"text","text":" & "},{"type":"codeVoice","code":"Bar"},{"type":"text","text":") and upates the map of allowed types to include the types"},{"text":" ","type":"text"},{"type":"text","text":"provided."}],"type":"paragraph"},{"level":3,"anchor":"Custom-Type-Index","type":"heading","text":"Custom Type Index"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively you can implement and provide a custom type index and define your own reference type (see"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","isActive":true},{"type":"text","text":") . If you have an alternate means of looking up types and\/or generating type ids."}]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"text":"The default type index is designed to be safe by default. This means Swift Packages and Xcode Frameworks","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"must"}],"type":"strong"},{"text":" use a custom type index to ensure the types it expects are registered and reduce the chance of inadvertantly","type":"text"},{"type":"text","text":" "},{"type":"text","text":"creating security vulnerabilities in adopting applications."}]}],"name":"Important"}],"kind":"content"}],"seeAlsoSections":[{"anchor":"Advanced","title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"generated":true}],"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"kind":"article","metadata":{"role":"article","modules":[{"name":"PotentCodables"}],"title":"Polymorphic Encoding & Decoding","roleHeading":"Article"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://PotentCodables/documentation/PotentCodables/Ref":{"navigatorTitle":[{"text":"Ref","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Ref"}],"title":"Ref","abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","kind":"symbol","url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","url":"\/documentation\/potentcodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","role":"collection","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"abstract":[{"type":"text","text":"The implementation type for "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"text":" types.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/customref","title":"CustomRef","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeIndex"}],"url":"\/documentation\/potentcodables\/defaulttypeindex","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"title":"DefaultTypeIndex","role":"symbol","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution":{"title":"Type ID Serialization and Type Resolution","type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding#Type-ID-Serialization-and-Type-Resolution"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","url":"\/documentation\/potentcodables\/implementing-formats","abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" data formats easily.","type":"text"}],"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","title":"Implementing New Data Formats","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"kind":"article","url":"\/documentation\/potentcodables\/custom-references","abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","title":"Custom References","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"title":"Encoder\/Decoder Protocols","type":"topic","url":"\/documentation\/potentcodables\/protocols","kind":"article","abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"kind":"symbol","title":"EmbeddedRef","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmbeddedRef"}],"type":"topic","url":"\/documentation\/potentcodables\/embeddedref"}}}