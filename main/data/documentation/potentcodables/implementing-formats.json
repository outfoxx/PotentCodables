{"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the stated goals of PotentCodables is to reduce the complexity and amount of code required when implementing"},{"type":"text","text":" "},{"text":"new serialization formats. We have achieved that goal only requiring new formats to implement the “boxing” and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“unboxing” into their native value tree representation without regard for any of the inner working of Swit’s "},{"type":"codeVoice","code":"Codable"},{"text":" ","type":"text"},{"type":"text","text":"framework."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following list of steps can be followed to easily implement a new serialization format."}]},{"text":"1. Define a native value tree representation","type":"heading","level":3,"anchor":"1-Define-a-native-value-tree-representation"},{"type":"paragraph","inlineContent":[{"text":"Each provided implementation is built upon a native value tree in-memory representation; JSON uses ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"while CBOR uses "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR","isActive":true,"type":"reference"},{"type":"text","text":". Examining any of the provided native value trees will reveal they closely mimic"},{"text":" ","type":"text"},{"text":"their serialized format.","type":"text"}]},{"level":4,"type":"heading","text":"Required Protocols","anchor":"Required-Protocols"},{"type":"termList","items":[{"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value","isActive":true}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"The native value tree representation (usually an enum) ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" implement the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value"},{"type":"text","text":" protocol which provides null\/nil testing and the capability to “unwrap” themselves into a Swift primitive value tree."}]}]}}]},{"type":"heading","anchor":"SeeExamples","level":4,"text":"See\/Examples"},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The JSON native value tree is a great example of a full featured tree."}]}]},"term":{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"The CBOR native value tree is another great example of a full featured tree."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR","isActive":true}]}}]},{"anchor":"2-Provide-a-serialization-type","level":3,"text":"2. Provide a “serialization” type","type":"heading"},{"inlineContent":[{"type":"text","text":"The next step requires you to provide a serialization class that can serialize native value trees into their final"},{"type":"text","text":" "},{"type":"text","text":"serialized representation and conversely deserialize the serialized representation into a native value tree."}],"type":"paragraph"},{"level":4,"anchor":"Required-Protocols","type":"heading","text":"Required Protocols"},{"type":"paragraph","inlineContent":[{"text":"There are no required protocols for the serialization type to timplement because it will be used privately in the","type":"text"},{"type":"text","text":" "},{"text":"encoder and decoder implementations.","type":"text"}]},{"type":"heading","level":4,"anchor":"SeeExample","text":"See\/Example"},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"The JSONSerialization type serializes ","type":"text"},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" values to\/from "},{"type":"codeVoice","code":"Data"},{"text":" values. Also, because JSON is a text based format, it supports serialization to\/from ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"}]}]},"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONSerialization","isActive":true}]}},{"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization","type":"reference","isActive":true}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"The CBORSerialization type serializes "},{"type":"codeVoice","code":"CBOR"},{"type":"text","text":" values to\/from "},{"code":"Data","type":"codeVoice"},{"text":" values.","type":"text"}],"type":"paragraph"}]}}]},{"type":"heading","anchor":"3-Provide-transformer-types","level":3,"text":"3. Provide “transformer” types"},{"inlineContent":[{"type":"text","text":"As the serialization type is used to translate from native value trees into their serialized forms, a “transformer” type transforms native value"},{"type":"text","text":" "},{"text":"trees to\/from ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":". The good news here is that only the boxing and unboxing code is requried."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An encoding transformer and a decoding transformer are required. All of the protocols are prefixed with ","type":"text"},{"code":"Internal","type":"codeVoice"},{"text":" to denote that they are","type":"text"},{"type":"text","text":" "},{"text":"not intended for public use.","type":"text"}]},{"anchor":"Required-Protocols-Encoding","text":"Required Protocols (Encoding)","level":4,"type":"heading"},{"items":[{"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalEncoderTransform","type":"reference","isActive":true}]},"definition":{"content":[{"inlineContent":[{"text":"Provides the boxing of Swift primitives generated by ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" instances.","type":"text"}],"type":"paragraph"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"If the serialization format supports targeting ","type":"text"},{"type":"codeVoice","code":"Data"},{"type":"text","text":" values then this protocol is required to be implemented."}]}]},"term":{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueSerializer"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"If the serialization format supports targeting ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values then this protocol is required to be implemented."}]}]},"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueStringifier","isActive":true}]}}],"type":"termList"},{"type":"heading","level":4,"text":"Required Protocols (Decoding)","anchor":"Required-Protocols-Decoding"},{"items":[{"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalDecoderTransform","isActive":true}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Provides the unboxing of native value tree types.","type":"text"}]}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"If the serialization format supports targeting "},{"type":"codeVoice","code":"Data"},{"text":" values then this protocol is required to be implemented.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueDeserializer"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"If the serialization format supports targeting ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values then this protocol is required to be implemented.","type":"text"}]}]},"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueParser","isActive":true}]}}],"type":"termList"},{"text":"See\/Example","level":4,"type":"heading","anchor":"SeeExample"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoderTransform","isActive":true,"type":"reference"},{"text":"\/","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONDecoderTransform","type":"reference"}],"type":"paragraph"}]}]},{"level":3,"anchor":"4-Create-an-Encoder-and-a-Decoder","type":"heading","text":"4. Create an “Encoder” and a “Decoder”"},{"inlineContent":[{"type":"text","text":"The final step is to implement the public encoder and decoder by deriving from the base implementations."}],"type":"paragraph"},{"inlineContent":[{"text":"Encoders are created in the following manner:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyFormatEncoder : ValueEncoder<MyFormat, MyFormatEncoderTransform> {...}"],"syntax":"swift"},{"inlineContent":[{"text":"Decoders are created in the following manner:","type":"text"}],"type":"paragraph"},{"code":["struct MyFormatDecoder : ValueDecoder<MyFormat, MyFormatDecoderTransform> {...}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" data formats easily."}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","interfaceLanguage":"swift"},"sections":[],"metadata":{"title":"Implementing New Data Formats","modules":[{"name":"PotentCodables"}],"role":"article","roleHeading":"Article"},"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced","generated":true,"title":"Advanced"}],"references":{"doc://PotentCodables/documentation/PotentCBOR/CBOR":{"title":"CBOR","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR","url":"\/documentation\/potentcbor\/cbor","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"CBOR","kind":"identifier"}],"navigatorTitle":[{"text":"CBOR","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"General CBOR value.","type":"text"}],"role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","role":"article","title":"Custom References","url":"\/documentation\/potentcodables\/custom-references","kind":"article"},"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","url":"\/documentation\/potentcodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSONSerialization":{"kind":"symbol","title":"JSONSerialization","role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONSerialization","navigatorTitle":[{"text":"JSONSerialization","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JSONSerialization"}],"url":"\/documentation\/potentjson\/jsonserialization"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","role":"article","title":"Polymorphic Encoding & Decoding","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article"},"doc://PotentCodables/documentation/PotentJSON/JSONEncoderTransform":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"JSONEncoderTransform","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"JSONEncoderTransform"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoderTransform","url":"\/documentation\/potentjson\/jsonencodertransform","title":"JSONEncoderTransform","abstract":[],"role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Value":{"role":"symbol","type":"topic","title":"Value","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/value","navigatorTitle":[{"kind":"identifier","text":"Value"}],"abstract":[{"code":"Value","type":"codeVoice"},{"text":"s are the intermediary representation that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"allows querying the structure in memory, decoding"},{"text":" ","type":"text"},{"type":"text","text":"it to a compatible "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" type, or serializing"},{"type":"text","text":" "},{"type":"text","text":"it to "},{"type":"codeVoice","code":"Data"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value"},"doc://PotentCodables/documentation/PotentCBOR/CBORSerialization":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization","role":"symbol","abstract":[{"text":"Convenience API for serializing and deserialization CBOR items.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"CBORSerialization","kind":"identifier"}],"url":"\/documentation\/potentcbor\/cborserialization","title":"CBORSerialization","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CBORSerialization","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/InternalValueStringifier":{"title":"InternalValueStringifier","abstract":[],"url":"\/documentation\/potentcodables\/internalvaluestringifier","navigatorTitle":[{"text":"InternalValueStringifier","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueStringifier","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InternalValueStringifier","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/InternalValueSerializer":{"url":"\/documentation\/potentcodables\/internalvalueserializer","abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InternalValueSerializer"}],"title":"InternalValueSerializer","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueSerializer","navigatorTitle":[{"text":"InternalValueSerializer","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/InternalValueParser":{"title":"InternalValueParser","kind":"symbol","navigatorTitle":[{"text":"InternalValueParser","kind":"identifier"}],"url":"\/documentation\/potentcodables\/internalvalueparser","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueParser","abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InternalValueParser"}],"type":"topic","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/InternalValueDeserializer":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"InternalValueDeserializer"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueDeserializer","role":"symbol","url":"\/documentation\/potentcodables\/internalvaluedeserializer","navigatorTitle":[{"kind":"identifier","text":"InternalValueDeserializer"}],"abstract":[],"title":"InternalValueDeserializer","type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSONDecoderTransform":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONDecoderTransform"}],"type":"topic","kind":"symbol","role":"symbol","title":"JSONDecoderTransform","navigatorTitle":[{"kind":"identifier","text":"JSONDecoderTransform"}],"url":"\/documentation\/potentjson\/jsondecodertransform","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONDecoderTransform","abstract":[]},"doc://PotentCodables/documentation/PotentCodables/InternalEncoderTransform":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"InternalEncoderTransform","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalEncoderTransform","navigatorTitle":[{"kind":"identifier","text":"InternalEncoderTransform"}],"abstract":[{"text":"An encoder transform provides required functionality to box instances of","type":"text"},{"text":" ","type":"text"},{"text":"Swift\/Foundation primitives into instances of ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":"."}],"title":"InternalEncoderTransform","role":"symbol","kind":"symbol","url":"\/documentation\/potentcodables\/internalencodertransform"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"role":"symbol","type":"topic","title":"JSON","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"JSON","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentjson\/json","navigatorTitle":[{"text":"JSON","kind":"identifier"}],"abstract":[{"text":"General JSON value.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"code":"Encoder","type":"codeVoice"},{"text":"s and ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"kind":"article","type":"topic","title":"Encoder\/Decoder Protocols","url":"\/documentation\/potentcodables\/protocols","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article"},"doc://PotentCodables/documentation/PotentCodables/InternalDecoderTransform":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"InternalDecoderTransform","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"InternalDecoderTransform","kind":"identifier"}],"abstract":[{"text":"A decoder transform provides required functionality to unbox instances of","type":"text"},{"type":"text","text":" "},{"code":"Value","type":"codeVoice"},{"text":" into Swift\/Foundation primitives.","type":"text"}],"url":"\/documentation\/potentcodables\/internaldecodertransform","role":"symbol","title":"InternalDecoderTransform","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalDecoderTransform"}}}