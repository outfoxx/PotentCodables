{"abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"text":" data formats easily.","type":"text"}],"sections":[],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Implementing New Data Formats"},"seeAlsoSections":[{"title":"Advanced","generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"One of the stated goals of PotentCodables is to reduce the complexity and amount of code required when implementing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"new serialization formats. We have achieved that goal only requiring new formats to implement the “boxing” and"},{"text":" ","type":"text"},{"text":"“unboxing” into their native value tree representation without regard for any of the inner working of Swit’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" "},{"type":"text","text":"framework."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following list of steps can be followed to easily implement a new serialization format."}]},{"anchor":"1-Define-a-native-value-tree-representation","text":"1. Define a native value tree representation","level":3,"type":"heading"},{"inlineContent":[{"text":"Each provided implementation is built upon a native value tree in-memory representation; JSON uses ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"while CBOR uses "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR","isActive":true},{"text":". Examining any of the provided native value trees will reveal they closely mimic","type":"text"},{"type":"text","text":" "},{"text":"their serialized format.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Required Protocols","level":4,"anchor":"Required-Protocols"},{"type":"termList","items":[{"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value","isActive":true}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The native value tree representation (usually an enum) "},{"inlineContent":[{"type":"text","text":"must"}],"type":"strong"},{"type":"text","text":" implement the "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value","isActive":true,"type":"reference"},{"text":" protocol which provides null\/nil testing and the capability to “unwrap” themselves into a Swift primitive value tree.","type":"text"}]}]}}]},{"level":4,"text":"See\/Examples","anchor":"SeeExamples","type":"heading"},{"items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"The JSON native value tree is a great example of a full featured tree.","type":"text"}]}]},"term":{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON"}]}},{"term":{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR","type":"reference"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The CBOR native value tree is another great example of a full featured tree."}]}]}}],"type":"termList"},{"type":"heading","level":3,"anchor":"2-Provide-a-serialization-type","text":"2. Provide a “serialization” type"},{"type":"paragraph","inlineContent":[{"text":"The next step requires you to provide a serialization class that can serialize native value trees into their final","type":"text"},{"text":" ","type":"text"},{"text":"serialized representation and conversely deserialize the serialized representation into a native value tree.","type":"text"}]},{"type":"heading","level":4,"text":"Required Protocols","anchor":"Required-Protocols"},{"inlineContent":[{"type":"text","text":"There are no required protocols for the serialization type to timplement because it will be used privately in the"},{"type":"text","text":" "},{"text":"encoder and decoder implementations.","type":"text"}],"type":"paragraph"},{"anchor":"SeeExample","type":"heading","level":4,"text":"See\/Example"},{"type":"termList","items":[{"term":{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONSerialization"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"The JSONSerialization type serializes "},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" values to\/from "},{"type":"codeVoice","code":"Data"},{"text":" values. Also, because JSON is a text based format, it supports serialization to\/from ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values."}],"type":"paragraph"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"The CBORSerialization type serializes "},{"code":"CBOR","type":"codeVoice"},{"type":"text","text":" values to\/from "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" values."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization"}]}}]},{"type":"heading","level":3,"text":"3. Provide “transformer” types","anchor":"3-Provide-transformer-types"},{"inlineContent":[{"text":"As the serialization type is used to translate from native value trees into their serialized forms, a “transformer” type transforms native value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"trees to\/from "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"Decodable","type":"codeVoice"},{"text":". The good news here is that only the boxing and unboxing code is requried.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"An encoding transformer and a decoding transformer are required. All of the protocols are prefixed with ","type":"text"},{"type":"codeVoice","code":"Internal"},{"type":"text","text":" to denote that they are"},{"text":" ","type":"text"},{"text":"not intended for public use.","type":"text"}],"type":"paragraph"},{"level":4,"text":"Required Protocols (Encoding)","type":"heading","anchor":"Required-Protocols-Encoding"},{"items":[{"term":{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalEncoderTransform"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Provides the boxing of Swift primitives generated by ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" instances."}]}]}},{"term":{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueSerializer","type":"reference"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"If the serialization format supports targeting "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" values then this protocol is required to be implemented."}],"type":"paragraph"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the serialization format supports targeting "},{"code":"String","type":"codeVoice"},{"type":"text","text":" values then this protocol is required to be implemented."}]}]},"term":{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueStringifier","type":"reference"}]}}],"type":"termList"},{"type":"heading","anchor":"Required-Protocols-Decoding","level":4,"text":"Required Protocols (Decoding)"},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Provides the unboxing of native value tree types.","type":"text"}]}]},"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalDecoderTransform","isActive":true,"type":"reference"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"If the serialization format supports targeting "},{"code":"Data","type":"codeVoice"},{"type":"text","text":" values then this protocol is required to be implemented."}],"type":"paragraph"}]},"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueDeserializer","isActive":true,"type":"reference"}]}},{"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueParser","type":"reference","isActive":true}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"If the serialization format supports targeting ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values then this protocol is required to be implemented.","type":"text"}]}]}}]},{"text":"See\/Example","anchor":"SeeExample","type":"heading","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoderTransform","isActive":true},{"text":"\/","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONDecoderTransform"}]}]}]},{"anchor":"4-Create-an-Encoder-and-a-Decoder","text":"4. Create an “Encoder” and a “Decoder”","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final step is to implement the public encoder and decoder by deriving from the base implementations."}]},{"inlineContent":[{"type":"text","text":"Encoders are created in the following manner:"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyFormatEncoder : ValueEncoder<MyFormat, MyFormatEncoderTransform> {...}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decoders are created in the following manner:"}]},{"code":["struct MyFormatDecoder : ValueDecoder<MyFormat, MyFormatDecoderTransform> {...}"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://PotentCodables/documentation/PotentCodables/InternalEncoderTransform":{"url":"\/documentation\/potentcodables\/internalencodertransform","type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InternalEncoderTransform"}],"abstract":[{"type":"text","text":"An encoder transform provides required functionality to box instances of"},{"type":"text","text":" "},{"text":"Swift\/Foundation primitives into instances of ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"InternalEncoderTransform"}],"kind":"symbol","title":"InternalEncoderTransform","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalEncoderTransform"},"doc://PotentCodables/documentation/PotentCodables":{"title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"kind":"symbol","role":"collection","url":"\/documentation\/potentcodables","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","title":"Polymorphic Encoding & Decoding","abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding"},"doc://PotentCodables/documentation/PotentJSON/JSONDecoderTransform":{"type":"topic","kind":"symbol","url":"\/documentation\/potentjson\/jsondecodertransform","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONDecoderTransform","navigatorTitle":[{"text":"JSONDecoderTransform","kind":"identifier"}],"abstract":[],"title":"JSONDecoderTransform","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"JSONDecoderTransform","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCBOR/CBORSerialization":{"url":"\/documentation\/potentcbor\/cborserialization","navigatorTitle":[{"text":"CBORSerialization","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CBORSerialization","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization","kind":"symbol","title":"CBORSerialization","abstract":[{"type":"text","text":"Convenience API for serializing and deserialization CBOR items."}],"role":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/InternalValueDeserializer":{"navigatorTitle":[{"text":"InternalValueDeserializer","kind":"identifier"}],"title":"InternalValueDeserializer","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueDeserializer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InternalValueDeserializer","kind":"identifier"}],"abstract":[],"type":"topic","url":"\/documentation\/potentcodables\/internalvaluedeserializer","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/InternalValueStringifier":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueStringifier","kind":"symbol","navigatorTitle":[{"text":"InternalValueStringifier","kind":"identifier"}],"abstract":[],"url":"\/documentation\/potentcodables\/internalvaluestringifier","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InternalValueStringifier","kind":"identifier"}],"title":"InternalValueStringifier","role":"symbol"},"doc://PotentCodables/documentation/PotentJSON/JSONEncoderTransform":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoderTransform","title":"JSONEncoderTransform","url":"\/documentation\/potentjson\/jsonencodertransform","abstract":[],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JSONEncoderTransform"}],"navigatorTitle":[{"text":"JSONEncoderTransform","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article","url":"\/documentation\/potentcodables\/protocols","kind":"article","title":"Encoder\/Decoder Protocols","abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"code":"Encoder","type":"codeVoice"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Decoder"},{"text":"s implement.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/InternalDecoderTransform":{"url":"\/documentation\/potentcodables\/internaldecodertransform","abstract":[{"type":"text","text":"A decoder transform provides required functionality to unbox instances of"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" into Swift\/Foundation primitives."}],"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InternalDecoderTransform","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalDecoderTransform","navigatorTitle":[{"text":"InternalDecoderTransform","kind":"identifier"}],"kind":"symbol","title":"InternalDecoderTransform"},"doc://PotentCodables/documentation/PotentCodables/InternalValueSerializer":{"url":"\/documentation\/potentcodables\/internalvalueserializer","abstract":[],"navigatorTitle":[{"text":"InternalValueSerializer","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueSerializer","type":"topic","kind":"symbol","role":"symbol","title":"InternalValueSerializer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InternalValueSerializer"}]},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"url":"\/documentation\/potentcodables\/custom-references","abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"role":"article","title":"Custom References","kind":"article","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},"doc://PotentCodables/documentation/PotentJSON/JSONSerialization":{"url":"\/documentation\/potentjson\/jsonserialization","abstract":[],"type":"topic","title":"JSONSerialization","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"JSONSerialization","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONSerialization","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JSONSerialization"}]},"doc://PotentCodables/documentation/PotentJSON/JSON":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","title":"JSON","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JSON"}],"navigatorTitle":[{"kind":"identifier","text":"JSON"}],"role":"symbol","url":"\/documentation\/potentjson\/json","type":"topic","abstract":[{"text":"General JSON value.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/Value":{"role":"symbol","type":"topic","abstract":[{"code":"Value","type":"codeVoice"},{"text":"s are the intermediary representation that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"allows querying the structure in memory, decoding"},{"text":" ","type":"text"},{"type":"text","text":"it to a compatible "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" type, or serializing"},{"type":"text","text":" "},{"text":"it to ","type":"text"},{"code":"Data","type":"codeVoice"}],"url":"\/documentation\/potentcodables\/value","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value","kind":"symbol","title":"Value","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Value","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Value"}]},"doc://PotentCodables/documentation/PotentCBOR/CBOR":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CBOR"}],"title":"CBOR","url":"\/documentation\/potentcbor\/cbor","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"General CBOR value."}],"navigatorTitle":[{"text":"CBOR","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/InternalValueParser":{"title":"InternalValueParser","abstract":[],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InternalValueParser"}],"navigatorTitle":[{"text":"InternalValueParser","kind":"identifier"}],"url":"\/documentation\/potentcodables\/internalvalueparser","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueParser","role":"symbol","type":"topic"}}}