{"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the stated goals of PotentCodables is to reduce the complexity and amount of code required when implementing"},{"text":" ","type":"text"},{"type":"text","text":"new serialization formats. We have achieved that goal only requiring new formats to implement the “boxing” and"},{"text":" ","type":"text"},{"type":"text","text":"“unboxing” into their native value tree representation without regard for any of the inner working of Swit’s "},{"type":"codeVoice","code":"Codable"},{"text":" ","type":"text"},{"text":"framework.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following list of steps can be followed to easily implement a new serialization format."}],"type":"paragraph"},{"level":3,"anchor":"1-Define-a-native-value-tree-representation","type":"heading","text":"1. Define a native value tree representation"},{"inlineContent":[{"type":"text","text":"Each provided implementation is built upon a native value tree in-memory representation; JSON uses "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"while CBOR uses ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR"},{"type":"text","text":". Examining any of the provided native value trees will reveal they closely mimic"},{"text":" ","type":"text"},{"text":"their serialized format.","type":"text"}],"type":"paragraph"},{"level":4,"anchor":"Required-Protocols","text":"Required Protocols","type":"heading"},{"type":"termList","items":[{"term":{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"The native value tree representation (usually an enum) "},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"text":" implement the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value","type":"reference","isActive":true},{"type":"text","text":" protocol which provides null\/nil testing and the capability to “unwrap” themselves into a Swift primitive value tree."}],"type":"paragraph"}]}}]},{"text":"See\/Examples","type":"heading","anchor":"SeeExamples","level":4},{"items":[{"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"The JSON native value tree is a great example of a full featured tree.","type":"text"}]}]}},{"term":{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The CBOR native value tree is another great example of a full featured tree."}]}]}}],"type":"termList"},{"type":"heading","level":3,"text":"2. Provide a “serialization” type","anchor":"2-Provide-a-serialization-type"},{"inlineContent":[{"type":"text","text":"The next step requires you to provide a serialization class that can serialize native value trees into their final"},{"type":"text","text":" "},{"text":"serialized representation and conversely deserialize the serialized representation into a native value tree.","type":"text"}],"type":"paragraph"},{"text":"Required Protocols","anchor":"Required-Protocols","level":4,"type":"heading"},{"inlineContent":[{"type":"text","text":"There are no required protocols for the serialization type to timplement because it will be used privately in the"},{"type":"text","text":" "},{"type":"text","text":"encoder and decoder implementations."}],"type":"paragraph"},{"level":4,"text":"See\/Example","anchor":"SeeExample","type":"heading"},{"items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The JSONSerialization type serializes "},{"type":"codeVoice","code":"JSON"},{"text":" values to\/from ","type":"text"},{"code":"Data","type":"codeVoice"},{"type":"text","text":" values. Also, because JSON is a text based format, it supports serialization to\/from "},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"}]}]},"term":{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONSerialization","type":"reference"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The CBORSerialization type serializes "},{"code":"CBOR","type":"codeVoice"},{"text":" values to\/from ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":" values.","type":"text"}]}]},"term":{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization"}]}}],"type":"termList"},{"type":"heading","anchor":"3-Provide-transformer-types","text":"3. Provide “transformer” types","level":3},{"inlineContent":[{"type":"text","text":"As the serialization type is used to translate from native value trees into their serialized forms, a “transformer” type transforms native value"},{"text":" ","type":"text"},{"type":"text","text":"trees to\/from "},{"code":"Encodable","type":"codeVoice"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":". The good news here is that only the boxing and unboxing code is requried.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An encoding transformer and a decoding transformer are required. All of the protocols are prefixed with ","type":"text"},{"type":"codeVoice","code":"Internal"},{"type":"text","text":" to denote that they are"},{"type":"text","text":" "},{"type":"text","text":"not intended for public use."}]},{"type":"heading","level":4,"text":"Required Protocols (Encoding)","anchor":"Required-Protocols-Encoding"},{"items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provides the boxing of Swift primitives generated by "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" instances."}]}]},"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalEncoderTransform","isActive":true,"type":"reference"}]}},{"term":{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueSerializer"}]},"definition":{"content":[{"inlineContent":[{"text":"If the serialization format supports targeting ","type":"text"},{"type":"codeVoice","code":"Data"},{"type":"text","text":" values then this protocol is required to be implemented."}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueStringifier","type":"reference","isActive":true}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"If the serialization format supports targeting "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values then this protocol is required to be implemented."}],"type":"paragraph"}]}}],"type":"termList"},{"level":4,"type":"heading","text":"Required Protocols (Decoding)","anchor":"Required-Protocols-Decoding"},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Provides the unboxing of native value tree types.","type":"text"}]}]},"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalDecoderTransform","type":"reference","isActive":true}]}},{"term":{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueDeserializer","isActive":true}]},"definition":{"content":[{"inlineContent":[{"text":"If the serialization format supports targeting ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" values then this protocol is required to be implemented.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueParser","type":"reference","isActive":true}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the serialization format supports targeting "},{"type":"codeVoice","code":"String"},{"text":" values then this protocol is required to be implemented.","type":"text"}]}]}}]},{"level":4,"type":"heading","text":"See\/Example","anchor":"SeeExample"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoderTransform","isActive":true},{"text":"\/","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONDecoderTransform","isActive":true}]}]}]},{"text":"4. Create an “Encoder” and a “Decoder”","type":"heading","level":3,"anchor":"4-Create-an-Encoder-and-a-Decoder"},{"inlineContent":[{"text":"The final step is to implement the public encoder and decoder by deriving from the base implementations.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Encoders are created in the following manner:"}],"type":"paragraph"},{"code":["struct MyFormatEncoder : ValueEncoder<MyFormat, MyFormatEncoderTransform> {...}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Decoders are created in the following manner:","type":"text"}]},{"syntax":"swift","code":["struct MyFormatDecoder : ValueDecoder<MyFormat, MyFormatDecoderTransform> {...}"],"type":"codeListing"}],"kind":"content"}],"sections":[],"metadata":{"role":"article","modules":[{"name":"PotentCodables"}],"roleHeading":"Article","title":"Implementing New Data Formats"},"seeAlsoSections":[{"generated":true,"title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced"}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"references":{"doc://PotentCodables/documentation/PotentCodables/InternalValueDeserializer":{"type":"topic","abstract":[],"title":"InternalValueDeserializer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InternalValueDeserializer"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueDeserializer","kind":"symbol","role":"symbol","url":"\/documentation\/potentcodables\/internalvaluedeserializer","navigatorTitle":[{"text":"InternalValueDeserializer","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/InternalEncoderTransform":{"type":"topic","navigatorTitle":[{"text":"InternalEncoderTransform","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalEncoderTransform","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InternalEncoderTransform","kind":"identifier"}],"title":"InternalEncoderTransform","abstract":[{"text":"An encoder transform provides required functionality to box instances of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift\/Foundation primitives into instances of "},{"code":"Value","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/potentcodables\/internalencodertransform"},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"role":"article","url":"\/documentation\/potentcodables\/custom-references","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","type":"topic","title":"Custom References","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/InternalValueParser":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InternalValueParser","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"InternalValueParser"}],"role":"symbol","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueParser","kind":"symbol","url":"\/documentation\/potentcodables\/internalvalueparser","title":"InternalValueParser"},"doc://PotentCodables/documentation/PotentJSON/JSONSerialization":{"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONSerialization","url":"\/documentation\/potentjson\/jsonserialization","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"JSONSerialization","kind":"identifier"}],"role":"symbol","title":"JSONSerialization","navigatorTitle":[{"text":"JSONSerialization","kind":"identifier"}],"type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSONEncoderTransform":{"navigatorTitle":[{"kind":"identifier","text":"JSONEncoderTransform"}],"type":"topic","kind":"symbol","url":"\/documentation\/potentjson\/jsonencodertransform","abstract":[],"role":"symbol","title":"JSONEncoderTransform","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSONEncoderTransform"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoderTransform"},"doc://PotentCodables/documentation/PotentCBOR/CBORSerialization":{"type":"topic","title":"CBORSerialization","abstract":[{"text":"Convenience API for serializing and deserialization CBOR items.","type":"text"}],"url":"\/documentation\/potentcbor\/cborserialization","navigatorTitle":[{"kind":"identifier","text":"CBORSerialization"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CBORSerialization"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBORSerialization","kind":"symbol"},"doc://PotentCodables/documentation/PotentCBOR/CBOR":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"CBOR","kind":"identifier"}],"url":"\/documentation\/potentcbor\/cbor","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCBOR\/CBOR","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"CBOR","kind":"identifier"}],"abstract":[{"text":"General CBOR value.","type":"text"}],"title":"CBOR"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"text":" system","type":"text"}],"url":"\/documentation\/potentcodables","title":"PotentCodables","role":"collection","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/InternalValueStringifier":{"role":"symbol","url":"\/documentation\/potentcodables\/internalvaluestringifier","kind":"symbol","title":"InternalValueStringifier","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InternalValueStringifier","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueStringifier","navigatorTitle":[{"kind":"identifier","text":"InternalValueStringifier"}]},"doc://PotentCodables/documentation/PotentJSON/JSON":{"url":"\/documentation\/potentjson\/json","role":"symbol","type":"topic","title":"JSON","kind":"symbol","abstract":[{"type":"text","text":"General JSON value."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","navigatorTitle":[{"text":"JSON","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"JSON"}]},"doc://PotentCodables/documentation/PotentJSON/JSONDecoderTransform":{"url":"\/documentation\/potentjson\/jsondecodertransform","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"JSONDecoderTransform"}],"title":"JSONDecoderTransform","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONDecoderTransform","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JSONDecoderTransform"}],"type":"topic","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/InternalDecoderTransform":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalDecoderTransform","type":"topic","role":"symbol","title":"InternalDecoderTransform","url":"\/documentation\/potentcodables\/internaldecodertransform","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"InternalDecoderTransform"}],"navigatorTitle":[{"kind":"identifier","text":"InternalDecoderTransform"}],"abstract":[{"text":"A decoder transform provides required functionality to unbox instances of","type":"text"},{"type":"text","text":" "},{"code":"Value","type":"codeVoice"},{"text":" into Swift\/Foundation primitives.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/InternalValueSerializer":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InternalValueSerializer"}],"title":"InternalValueSerializer","type":"topic","kind":"symbol","navigatorTitle":[{"text":"InternalValueSerializer","kind":"identifier"}],"role":"symbol","abstract":[],"url":"\/documentation\/potentcodables\/internalvalueserializer","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/InternalValueSerializer"},"doc://PotentCodables/documentation/PotentCodables/Value":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Value","navigatorTitle":[{"text":"Value","kind":"identifier"}],"kind":"symbol","type":"topic","title":"Value","url":"\/documentation\/potentcodables\/value","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Value","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"Value"},{"type":"text","text":"s are the intermediary representation that"},{"type":"text","text":" "},{"text":"allows querying the structure in memory, decoding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it to a compatible "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" type, or serializing"},{"text":" ","type":"text"},{"type":"text","text":"it to "},{"code":"Data","type":"codeVoice"}],"role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"text":"s implement.","type":"text"}],"url":"\/documentation\/potentcodables\/protocols","kind":"article","role":"article","title":"Encoder\/Decoder Protocols","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"title":"Polymorphic Encoding & Decoding","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding"}}}