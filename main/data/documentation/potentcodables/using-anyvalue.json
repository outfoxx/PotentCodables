{"seeAlsoSections":[{"generated":true,"title":"Usage","anchor":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes it is necessary to decode values of any type or that can take on any structure; unfortunately Swift’s"},{"type":"text","text":" "},{"code":"Codable","type":"codeVoice"},{"text":" is not well suited for this purpose. PotentCodables provides ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"text":" to fill the gap.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true,"type":"reference"},{"text":" is simple, just use it wherever you would normally use an ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":". Since"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"text":" supports ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" everything else works as normal including Swift’s automatic codable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"generation."}],"type":"paragraph"},{"type":"codeListing","code":["struct Account : Codable {","  let name: String","  let data: AnyValue                  \/\/ `data` can store and scalar or complex value","  let dataDict: [String: AnyValue]    \/\/ `dataDict` is required to be a dictionary of name to any values","  let dataArray: [AnyValue]           \/\/ `dataArray` is required to be an array of any values","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example "},{"code":"Account","type":"codeVoice"},{"text":" struct above has a ","type":"text"},{"type":"codeVoice","code":"data"},{"text":" property that can take on any value supported by the codable system.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example when decoding from JSON, any value or tree of values (including "},{"type":"emphasis","inlineContent":[{"type":"text","text":"null"}]},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"bool"}],"type":"emphasis"},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"text":"string","type":"text"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"number"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"arrray"}]},{"type":"text","text":" or "},{"inlineContent":[{"type":"text","text":"object"}],"type":"emphasis"},{"type":"text","text":") could be saved in the "},{"type":"codeVoice","code":"data"},{"text":" property. Encoding the same ","type":"text"},{"code":"Account","type":"codeVoice"},{"type":"text","text":" value back to JSON will produce"},{"type":"text","text":" "},{"type":"text","text":"equivalent serialized JSON regardless of the contents of the "},{"type":"codeVoice","code":"data"},{"type":"text","text":" field."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"type":"text","text":" has lots of features to make building and using them natural in Swift, like “dynamic member"},{"type":"text","text":" "},{"type":"text","text":"lookup” to access fields of a "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/dictionary(_:)","isActive":true},{"text":". See the documentation for complete details.","type":"text"}]},{"level":3,"text":"Performance","anchor":"Performance","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Although ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"text":" is compatible with any conformant ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" encoder or decoder, PotentCodables"},{"type":"text","text":" "},{"text":"decoders specifically have shortcuts to decode the proper values in a more performant fashion and should be used when","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"possible."}]}]}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","interfaceLanguage":"swift"},"metadata":{"title":"Using AnyValue","modules":[{"name":"PotentCodables"}],"role":"article","roleHeading":"Article"},"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://PotentCodables/documentation/PotentCodables/AnyValue/dictionary(_:)":{"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dictionary"},{"text":"(","kind":"text"},{"text":"AnyDictionary","preciseIdentifier":"s:14PotentCodables8AnyValueO0C10Dictionarya","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","title":"AnyValue.dictionary(_:)","url":"\/documentation\/potentcodables\/anyvalue\/dictionary(_:)","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/dictionary(_:)","abstract":[]},"doc://PotentCodables/documentation/PotentCodables/TreeValues":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","abstract":[{"text":"What are “tree values”?","type":"text"}],"role":"article","url":"\/documentation\/potentcodables\/treevalues","kind":"article","type":"topic","title":"Tree Values"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","url":"\/documentation\/potentcodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","role":"collection","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"title":"Data Formats","abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"url":"\/documentation\/potentcodables\/data-formats","type":"topic","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"JSON"}]},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"YAML"}]},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"CBOR"}]},{"text":" & ","type":"text"},{"type":"strong","inlineContent":[{"text":"ASN.1","type":"text"}]},{"text":".","type":"text"}],"role":"article","url":"\/documentation\/potentcodables\/gettingstarted","kind":"article","type":"topic","title":"Getting Started with Potent Codables"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyValue","kind":"identifier"}],"url":"\/documentation\/potentcodables\/anyvalue","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","kind":"symbol","title":"AnyValue"}}}