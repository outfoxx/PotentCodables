{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","metadata":{"title":"Using AnyValue","modules":[{"name":"PotentCodables"}],"role":"article","roleHeading":"Article"},"seeAlsoSections":[{"anchor":"Usage","generated":true,"title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"]}],"sections":[],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes it is necessary to decode values of any type or that can take on any structure; unfortunately Swift’s"},{"type":"text","text":" "},{"code":"Codable","type":"codeVoice"},{"text":" is not well suited for this purpose. PotentCodables provides ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"text":" to fill the gap.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"text":" is simple, just use it wherever you would normally use an ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":". Since"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue"},{"type":"text","text":" supports "},{"type":"codeVoice","code":"Codable"},{"text":" everything else works as normal including Swift’s automatic codable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"generation."}]},{"syntax":"swift","type":"codeListing","code":["struct Account : Codable {","  let name: String","  let data: AnyValue                  \/\/ `data` can store and scalar or complex value","  let dataDict: [String: AnyValue]    \/\/ `dataDict` is required to be a dictionary of name to any values","  let dataArray: [AnyValue]           \/\/ `dataArray` is required to be an array of any values","}"]},{"type":"paragraph","inlineContent":[{"text":"The example ","type":"text"},{"code":"Account","type":"codeVoice"},{"type":"text","text":" struct above has a "},{"code":"data","type":"codeVoice"},{"text":" property that can take on any value supported by the codable system.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example when decoding from JSON, any value or tree of values (including "},{"type":"emphasis","inlineContent":[{"type":"text","text":"null"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"text":"bool","type":"text"}]},{"type":"text","text":", "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"text":", ","type":"text"},{"inlineContent":[{"text":"number","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"arrray"}]},{"text":" or ","type":"text"},{"inlineContent":[{"type":"text","text":"object"}],"type":"emphasis"},{"text":") could be saved in the ","type":"text"},{"type":"codeVoice","code":"data"},{"text":" property. Encoding the same ","type":"text"},{"code":"Account","type":"codeVoice"},{"text":" value back to JSON will produce","type":"text"},{"type":"text","text":" "},{"text":"equivalent serialized JSON regardless of the contents of the ","type":"text"},{"code":"data","type":"codeVoice"},{"text":" field.","type":"text"}]},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"type":"text","text":" has lots of features to make building and using them natural in Swift, like “dynamic member"},{"text":" ","type":"text"},{"type":"text","text":"lookup” to access fields of a "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/dictionary(_:)","type":"reference"},{"type":"text","text":". See the documentation for complete details."}],"type":"paragraph"},{"level":3,"anchor":"Performance","text":"Performance","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference","isActive":true},{"type":"text","text":" is compatible with any conformant "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" encoder or decoder, PotentCodables"},{"text":" ","type":"text"},{"type":"text","text":"decoders specifically have shortcuts to decode the proper values in a more performant fashion and should be used when"},{"text":" ","type":"text"},{"text":"possible.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","interfaceLanguage":"swift"},"abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true}],"references":{"doc://PotentCodables/documentation/PotentCodables/AnyValue/dictionary(_:)":{"title":"AnyValue.dictionary(_:)","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/dictionary(_:)","role":"symbol","type":"topic","url":"\/documentation\/potentcodables\/anyvalue\/dictionary(_:)","kind":"symbol","abstract":[],"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"dictionary","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:14PotentCodables8AnyValueO0C10Dictionarya","text":"AnyDictionary","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","title":"PotentCodables","role":"collection","type":"topic","url":"\/documentation\/potentcodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"type":"topic","title":"AnyValue","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AnyValue","kind":"identifier"}],"navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"url":"\/documentation\/potentcodables\/anyvalue","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" value that allows encoding\/decoding values of any type or structure.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/TreeValues":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","kind":"article","type":"topic","abstract":[{"type":"text","text":"What are “tree values”?"}],"url":"\/documentation\/potentcodables\/treevalues","title":"Tree Values","role":"article"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"title":"Data Formats","url":"\/documentation\/potentcodables\/data-formats","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","role":"article","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"kind":"article","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"title":"Getting Started with Potent Codables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","url":"\/documentation\/potentcodables\/gettingstarted","role":"article","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"inlineContent":[{"type":"text","text":"JSON"}],"type":"strong"},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"YAML"}]},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"CBOR"}]},{"text":" & ","type":"text"},{"inlineContent":[{"text":"ASN.1","type":"text"}],"type":"strong"},{"type":"text","text":"."}],"kind":"article","type":"topic"}}}