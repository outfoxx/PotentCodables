{"seeAlsoSections":[{"generated":true,"anchor":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"],"title":"Usage"}],"metadata":{"modules":[{"name":"PotentCodables"}],"title":"Using AnyValue","role":"article","roleHeading":"Article"},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes it is necessary to decode values of any type or that can take on any structure; unfortunately Swift’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"text":" is not well suited for this purpose. PotentCodables provides ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true,"type":"reference"},{"type":"text","text":" to fill the gap."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"type":"text","text":" is simple, just use it wherever you would normally use an "},{"code":"Any","type":"codeVoice"},{"type":"text","text":". Since"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true,"type":"reference"},{"type":"text","text":" supports "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" everything else works as normal including Swift’s automatic codable"},{"type":"text","text":" "},{"text":"generation.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Account : Codable {","  let name: String","  let data: AnyValue                  \/\/ `data` can store and scalar or complex value","  let dataDict: [String: AnyValue]    \/\/ `dataDict` is required to be a dictionary of name to any values","  let dataArray: [AnyValue]           \/\/ `dataArray` is required to be an array of any values","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example "},{"code":"Account","type":"codeVoice"},{"text":" struct above has a ","type":"text"},{"code":"data","type":"codeVoice"},{"text":" property that can take on any value supported by the codable system.","type":"text"}]},{"inlineContent":[{"text":"For example when decoding from JSON, any value or tree of values (including ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"null","type":"text"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"bool"}]},{"text":", ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"text":", ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"number"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arrray"}]},{"text":" or ","type":"text"},{"inlineContent":[{"type":"text","text":"object"}],"type":"emphasis"},{"type":"text","text":") could be saved in the "},{"type":"codeVoice","code":"data"},{"text":" property. Encoding the same ","type":"text"},{"type":"codeVoice","code":"Account"},{"type":"text","text":" value back to JSON will produce"},{"type":"text","text":" "},{"type":"text","text":"equivalent serialized JSON regardless of the contents of the "},{"code":"data","type":"codeVoice"},{"text":" field.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference","isActive":true},{"text":" has lots of features to make building and using them natural in Swift, like “dynamic member","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lookup” to access fields of a "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/dictionary(_:)","type":"reference"},{"text":". See the documentation for complete details.","type":"text"}]},{"text":"Performance","level":3,"anchor":"Performance","type":"heading"},{"inlineContent":[{"text":"Although ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true,"type":"reference"},{"text":" is compatible with any conformant ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" encoder or decoder, PotentCodables"},{"text":" ","type":"text"},{"text":"decoders specifically have shortcuts to decode the proper values in a more performant fashion and should be used when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"possible."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true}],"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"references":{"doc://PotentCodables/documentation/PotentCodables/TreeValues":{"kind":"article","title":"Tree Values","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","abstract":[{"type":"text","text":"What are “tree values”?"}],"type":"topic","url":"\/documentation\/potentcodables\/treevalues"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"url":"\/documentation\/potentcodables\/gettingstarted","role":"article","title":"Getting Started with Potent Codables","abstract":[{"type":"text","text":"Get started using the powerful potent data formats "},{"inlineContent":[{"text":"JSON","type":"text"}],"type":"strong"},{"text":", ","type":"text"},{"inlineContent":[{"type":"text","text":"YAML"}],"type":"strong"},{"text":", ","type":"text"},{"inlineContent":[{"text":"CBOR","type":"text"}],"type":"strong"},{"type":"text","text":" & "},{"type":"strong","inlineContent":[{"type":"text","text":"ASN.1"}]},{"text":".","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","type":"topic","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/AnyValue/dictionary(_:)":{"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"dictionary","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables8AnyValueO0C10Dictionarya","text":"AnyDictionary"},{"kind":"text","text":")"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/dictionary(_:)","title":"AnyValue.dictionary(_:)","url":"\/documentation\/potentcodables\/anyvalue\/dictionary(_:)","role":"symbol","abstract":[],"type":"topic","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables":{"title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"kind":"symbol","role":"collection","url":"\/documentation\/potentcodables","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"title":"Data Formats","url":"\/documentation\/potentcodables\/data-formats","kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","type":"topic","abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"role":"article"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"type":"topic","abstract":[{"text":"A ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" value that allows encoding\/decoding values of any type or structure.","type":"text"}],"kind":"symbol","url":"\/documentation\/potentcodables\/anyvalue","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","title":"AnyValue","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyValue"}],"navigatorTitle":[{"kind":"identifier","text":"AnyValue"}]}}}