{"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Sometimes it is necessary to decode values of any type or that can take on any structure; unfortunately Swift’s","type":"text"},{"type":"text","text":" "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" is not well suited for this purpose. PotentCodables provides "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"type":"text","text":" to fill the gap."}]},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue"},{"text":" is simple, just use it wherever you would normally use an ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":". Since"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true,"type":"reference"},{"type":"text","text":" supports "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" everything else works as normal including Swift’s automatic codable"},{"text":" ","type":"text"},{"text":"generation.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Account : Codable {","  let name: String","  let data: AnyValue                  \/\/ `data` can store and scalar or complex value","  let dataDict: [String: AnyValue]    \/\/ `dataDict` is required to be a dictionary of name to any values","  let dataArray: [AnyValue]           \/\/ `dataArray` is required to be an array of any values","}"]},{"type":"paragraph","inlineContent":[{"text":"The example ","type":"text"},{"type":"codeVoice","code":"Account"},{"text":" struct above has a ","type":"text"},{"type":"codeVoice","code":"data"},{"text":" property that can take on any value supported by the codable system.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example when decoding from JSON, any value or tree of values (including ","type":"text"},{"inlineContent":[{"type":"text","text":"null"}],"type":"emphasis"},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"bool"}],"type":"emphasis"},{"text":", ","type":"text"},{"inlineContent":[{"type":"text","text":"string"}],"type":"emphasis"},{"text":", ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"number","type":"text"}]},{"type":"text","text":","},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"arrray"}],"type":"emphasis"},{"text":" or ","type":"text"},{"inlineContent":[{"type":"text","text":"object"}],"type":"emphasis"},{"type":"text","text":") could be saved in the "},{"code":"data","type":"codeVoice"},{"type":"text","text":" property. Encoding the same "},{"type":"codeVoice","code":"Account"},{"text":" value back to JSON will produce","type":"text"},{"text":" ","type":"text"},{"text":"equivalent serialized JSON regardless of the contents of the ","type":"text"},{"type":"codeVoice","code":"data"},{"type":"text","text":" field."}]},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"type":"text","text":" has lots of features to make building and using them natural in Swift, like “dynamic member"},{"type":"text","text":" "},{"type":"text","text":"lookup” to access fields of a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/dictionary(_:)","type":"reference","isActive":true},{"text":". See the documentation for complete details.","type":"text"}]},{"level":3,"anchor":"Performance","text":"Performance","type":"heading"},{"inlineContent":[{"text":"Although ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","isActive":true},{"type":"text","text":" is compatible with any conformant "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" encoder or decoder, PotentCodables"},{"type":"text","text":" "},{"type":"text","text":"decoders specifically have shortcuts to decode the proper values in a more performant fashion and should be used when"},{"text":" ","type":"text"},{"type":"text","text":"possible."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Using AnyValue"},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"],"title":"Usage","anchor":"Usage","generated":true}],"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","type":"reference","isActive":true}],"references":{"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"url":"\/documentation\/potentcodables\/anyvalue","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyValue"}],"abstract":[{"type":"text","text":"A "},{"code":"Codable","type":"codeVoice"},{"text":" value that allows encoding\/decoding values of any type or structure.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"AnyValue","kind":"identifier"}],"title":"AnyValue","role":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"text":" system","type":"text"}],"type":"topic","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","role":"collection","url":"\/documentation\/potentcodables"},"doc://PotentCodables/documentation/PotentCodables/AnyValue/dictionary(_:)":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/dictionary(_:)","url":"\/documentation\/potentcodables\/anyvalue\/dictionary(_:)","title":"AnyValue.dictionary(_:)","abstract":[],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dictionary"},{"text":"(","kind":"text"},{"text":"AnyDictionary","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables8AnyValueO0C10Dictionarya"},{"kind":"text","text":")"}]},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"type":"topic","kind":"article","url":"\/documentation\/potentcodables\/gettingstarted","role":"article","title":"Getting Started with Potent Codables","abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"type":"strong","inlineContent":[{"text":"JSON","type":"text"}]},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"YAML"}],"type":"strong"},{"type":"text","text":", "},{"type":"strong","inlineContent":[{"type":"text","text":"CBOR"}]},{"type":"text","text":" & "},{"inlineContent":[{"type":"text","text":"ASN.1"}],"type":"strong"},{"type":"text","text":"."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted"},"doc://PotentCodables/documentation/PotentCodables/TreeValues":{"type":"topic","kind":"article","url":"\/documentation\/potentcodables\/treevalues","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","abstract":[{"text":"What are “tree values”?","type":"text"}],"title":"Tree Values"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"type":"topic","abstract":[{"text":"All data formats provided by PotentCodables","type":"text"}],"url":"\/documentation\/potentcodables\/data-formats","title":"Data Formats","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","kind":"article"}}}