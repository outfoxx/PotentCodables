{"abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s implement."}],"metadata":{"roleHeading":"Article","title":"Encoder\/Decoder Protocols","modules":[{"name":"PotentCodables"}],"role":"article"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats"],"anchor":"Advanced","generated":true,"title":"Advanced"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"text":"Native Value Trees","level":2,"anchor":"Native-Value-Trees","type":"heading"},{"inlineContent":[{"type":"text","text":"All PotentCodable encoders and decoders use a two stage serialization system. For example, when encoding an "},{"code":"Encodable","type":"codeVoice"},{"text":" value it is first","type":"text"},{"text":" ","type":"text"},{"text":"transformed into a native “value tree” that is defined by the serialization format. Secondarily, a serialization utility is used to transform","type":"text"},{"text":" ","type":"text"},{"text":"the value tree into the final serialized data.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, when encoding to CBOR the ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" value is first transformed into "},{"code":"CBOR","type":"codeVoice"},{"text":" values that closely match the CBOR","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specification and then the "},{"type":"codeVoice","code":"CBOR"},{"type":"text","text":" value tree is serialized into "},{"code":"Data","type":"codeVoice"},{"text":".  The same process is done for decoding but in reverse, ","type":"text"},{"type":"codeVoice","code":"Data"},{"type":"text","text":" is turned"},{"type":"text","text":" "},{"type":"text","text":"into a value tree and then the value tree is decoded into a "},{"type":"codeVoice","code":"Decodable"},{"text":" value as requested.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This two stage system is important to ensure that we can implement new serialization formats with a reduced amount of code. All of the"},{"text":" ","type":"text"},{"text":"machinery to encode ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":"s and  decode "},{"code":"Decodable","type":"codeVoice"},{"text":"s are isolated in a common set of classes that need to be implemented only","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"once."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The protocol representing a native value tree is "},{"type":"codeVoice","code":"Value"},{"text":" and its quite small:","type":"text"}]},{"syntax":"swift","code":["  protocol Value {","    var isNull: Bool { get }","    var unwrapped: Any? { get }","  }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It provides only the ability to test if it represents something equivalent to Swift’s  "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and the ability to “unwrap” itself into native Swift"},{"text":" ","type":"text"},{"text":"values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can see examples of "},{"type":"codeVoice","code":"Value"},{"text":" implementations in the ","type":"text"},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CBOR"},{"type":"text","text":" enumerations. These types closely track the values representable"},{"text":" ","type":"text"},{"type":"text","text":"by thier format and can be easily manipulated."}]},{"type":"paragraph","inlineContent":[{"text":"Aside from providing code structure that allows us to employ code re-use this requirement ensures that we can always encode\/decode","type":"text"},{"type":"text","text":" "},{"text":"to an in-memory value tree. A very useful side-effect of this is that it allows us to easily examine or manipulate everything that is encoded","type":"text"},{"type":"text","text":" "},{"text":"and decoded.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" Inevitably somebody will want to point out the inefficiency of using a two stage system of serialization. It is our belief that the added","type":"text"},{"text":" ","type":"text"},{"text":"features and reduced implementation cost far outweigh any slight performance\/memory improvement that might be gained from serializing","type":"text"},{"type":"text","text":" "},{"text":"directly to the target format.  ","type":"text"},{"inlineContent":[{"type":"text","text":"Also"}],"type":"emphasis"},{"text":", Swift’s native JSON implementations already use this same two stage method. In the native","type":"text"},{"type":"text","text":" "},{"text":"implementation, encodables are turned into Objective-C values and then Objective-C’s JSONSerialiazation class is used to create serialized","type":"text"},{"text":" ","type":"text"},{"text":"JSON data.","type":"text"}]},{"level":2,"type":"heading","text":"Value Tree Encoding\/Decoding","anchor":"Value-Tree-EncodingDecoding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to the requirement that all of our encoders and decoders support a native value tree representation, it provides the capability to encode"},{"text":" ","type":"text"},{"type":"text","text":"or decode to native value trees using the following methods:"}]},{"type":"heading","anchor":"Protocols","level":4,"text":"Protocols"},{"inlineContent":[{"type":"text","text":"Each encoder implements "},{"type":"codeVoice","code":"EncodesToTree"},{"text":" and provides the following method with ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" being the "},{"type":"codeVoice","code":"Encoder"},{"text":"’s native value tree type;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"allowing us to transform an "},{"type":"codeVoice","code":"Encodable"},{"text":" instance into a native value tree.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol EncodesToTree {","  func encodeTree<T : Encodable, V : Value>(_ value: T) throws -> V","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each decoder implements "},{"code":"DecodesFromTree","type":"codeVoice"},{"text":" and provides the following methods with ","type":"text"},{"type":"codeVoice","code":"Value"},{"text":" being the ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":"’s native value tree","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type; allowing us to transform a native value tree into an instance of a "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" type."}]},{"type":"codeListing","syntax":"swift","code":["protocol DecodesFromTree {","  func decodeTree<T : Decodable, V : Value>(_ type: T.Type, from: V) throws -> T","  func decodeTreeIfPresent<T : Decodable, V : Value>(_ type: T.Type, from: V) throws -> T?","}"]},{"level":2,"anchor":"Data-EncodingDecoding","text":"Data Encoding\/Decoding","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Binary formats, like ","type":"text"},{"type":"codeVoice","code":"CBOR"},{"type":"text","text":", are encoded to their final form as a "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" value. This is the interface most widely recognized from Swift’s native"},{"type":"text","text":" "},{"type":"text","text":"implementations for JSON and Property List."}]},{"text":"Protocols","anchor":"Protocols","level":4,"type":"heading"},{"inlineContent":[{"text":"Each encoder implements ","type":"text"},{"code":"EncodesToData","type":"codeVoice"},{"type":"text","text":" and provides the following method to transform "},{"code":"Encodable","type":"codeVoice"},{"text":" instances into ","type":"text"},{"code":"Data","type":"codeVoice"},{"type":"text","text":" values."}],"type":"paragraph"},{"code":["protocol EncodesToData {","  func encode<T: Encodable>(_ value: T) throws -> Data","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Each decoder implements "},{"code":"DecodesFromData","type":"codeVoice"},{"text":" and provides the following methods to transform ","type":"text"},{"type":"codeVoice","code":"Data"},{"type":"text","text":" into an instance of a "},{"type":"codeVoice","code":"Decodable"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol DecodesFromData {","  func decode<T: Decodable>(_ type: T.Type, from: Data) throws -> T","  func decodeIfPresent<T: Decodable>(_ type: T.Type, from: Data) throws -> T?","}"]},{"anchor":"String-EncodingDecoding","level":2,"type":"heading","text":"String Encoding\/Decoding"},{"inlineContent":[{"text":"Any PotentCodable encoder or decoder that is implementing a text based serialization format (e.g. JSON, YAML, etc.) provides the extra","type":"text"},{"text":" ","type":"text"},{"text":"capability to encode to and decode from ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values. These formats also support the methods for Data encoding\/decoding using a"},{"text":" ","type":"text"},{"type":"text","text":"string encoding required by their speification or that will be automatically detected during decoding."}],"type":"paragraph"},{"anchor":"Protocols","level":4,"type":"heading","text":"Protocols"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each encoder implements "},{"type":"codeVoice","code":"EncodesToString"},{"text":" and provides the following method to transform ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" instances into ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["protocol EncodesToString {","  func encodeString<T: Encodable>(_ value: T) throws -> String","}"]},{"type":"paragraph","inlineContent":[{"text":"Each decoder implements ","type":"text"},{"code":"DecodesFromString","type":"codeVoice"},{"text":" and provides the following methods to transform ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" into an instance of a"},{"type":"text","text":" "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" type."}]},{"syntax":"swift","type":"codeListing","code":["protocol DecodesFromString {","  func decode<T: Decodable>(_ type: T.Type, from: String) throws -> T","  func decodeIfPresent<T: Decodable>(_ type: T.Type, from: String) throws -> T","}"]},{"type":"heading","text":"Using Protocols","anchor":"Using-Protocols","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike Swift’s native encoders\/decoders, all the encoders and decoders provided by PotentCodables implement the above interfaces"},{"type":"text","text":" "},{"type":"text","text":"based on the type of format (e.g. binary or text).  This allow users to interchangably use any encoder or decoder at runtime without munually"},{"text":" ","type":"text"},{"type":"text","text":"adding protocol conformance."}]},{"inlineContent":[{"type":"text","text":"One encoder\/decoder pair, "},{"type":"codeVoice","code":"AnyValueEncoder"},{"type":"text","text":"\/"},{"code":"AnyValueDecoder","type":"codeVoice"},{"type":"text","text":", only supports targeting native value trees. This is because it has no"},{"type":"text","text":" "},{"type":"text","text":"serialized format and only exists to transcode between in-memory representations."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","interfaceLanguage":"swift"},"kind":"article","references":{"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","title":"Implementing New Data Formats","url":"\/documentation\/potentcodables\/implementing-formats","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" data formats easily.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"url":"\/documentation\/potentcodables\/custom-references","abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","role":"article","kind":"article","title":"Custom References","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","role":"article","kind":"article","title":"Polymorphic Encoding & Decoding","type":"topic"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","role":"collection","type":"topic","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","url":"\/documentation\/potentcodables"}}}