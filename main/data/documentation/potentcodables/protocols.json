{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Native-Value-Trees","text":"Native Value Trees"},{"inlineContent":[{"text":"All PotentCodable encoders and decoders use a two stage serialization system. For example, when encoding an ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" value it is first"},{"text":" ","type":"text"},{"text":"transformed into a native “value tree” that is defined by the serialization format. Secondarily, a serialization utility is used to transform","type":"text"},{"text":" ","type":"text"},{"text":"the value tree into the final serialized data.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, when encoding to CBOR the ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" value is first transformed into "},{"type":"codeVoice","code":"CBOR"},{"text":" values that closely match the CBOR","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specification and then the "},{"type":"codeVoice","code":"CBOR"},{"text":" value tree is serialized into ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":".  The same process is done for decoding but in reverse, ","type":"text"},{"type":"codeVoice","code":"Data"},{"type":"text","text":" is turned"},{"text":" ","type":"text"},{"text":"into a value tree and then the value tree is decoded into a ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" value as requested.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This two stage system is important to ensure that we can implement new serialization formats with a reduced amount of code. All of the"},{"type":"text","text":" "},{"text":"machinery to encode ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":"s and  decode ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":"s are isolated in a common set of classes that need to be implemented only","type":"text"},{"type":"text","text":" "},{"type":"text","text":"once."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The protocol representing a native value tree is "},{"type":"codeVoice","code":"Value"},{"text":" and its quite small:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["  protocol Value {","    var isNull: Bool { get }","    var unwrapped: Any? { get }","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It provides only the ability to test if it represents something equivalent to Swift’s  "},{"code":"nil","type":"codeVoice"},{"text":" and the ability to “unwrap” itself into native Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}]},{"inlineContent":[{"text":"You can see examples of ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" implementations in the "},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" and "},{"code":"CBOR","type":"codeVoice"},{"text":" enumerations. These types closely track the values representable","type":"text"},{"type":"text","text":" "},{"text":"by thier format and can be easily manipulated.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aside from providing code structure that allows us to employ code re-use this requirement ensures that we can always encode\/decode"},{"text":" ","type":"text"},{"text":"to an in-memory value tree. A very useful side-effect of this is that it allows us to easily examine or manipulate everything that is encoded","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and decoded."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" Inevitably somebody will want to point out the inefficiency of using a two stage system of serialization. It is our belief that the added"},{"text":" ","type":"text"},{"type":"text","text":"features and reduced implementation cost far outweigh any slight performance\/memory improvement that might be gained from serializing"},{"text":" ","type":"text"},{"type":"text","text":"directly to the target format.  "},{"type":"emphasis","inlineContent":[{"text":"Also","type":"text"}]},{"type":"text","text":", Swift’s native JSON implementations already use this same two stage method. In the native"},{"type":"text","text":" "},{"text":"implementation, encodables are turned into Objective-C values and then Objective-C’s JSONSerialiazation class is used to create serialized","type":"text"},{"text":" ","type":"text"},{"text":"JSON data.","type":"text"}]},{"type":"heading","anchor":"Value-Tree-EncodingDecoding","text":"Value Tree Encoding\/Decoding","level":2},{"inlineContent":[{"type":"text","text":"Due to the requirement that all of our encoders and decoders support a native value tree representation, it provides the capability to encode"},{"text":" ","type":"text"},{"text":"or decode to native value trees using the following methods:","type":"text"}],"type":"paragraph"},{"text":"Protocols","level":4,"anchor":"Protocols","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each encoder implements "},{"type":"codeVoice","code":"EncodesToTree"},{"text":" and provides the following method with ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" being the "},{"type":"codeVoice","code":"Encoder"},{"text":"’s native value tree type;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"allowing us to transform an "},{"type":"codeVoice","code":"Encodable"},{"text":" instance into a native value tree.","type":"text"}]},{"syntax":"swift","code":["protocol EncodesToTree {","  func encodeTree<T : Encodable, V : Value>(_ value: T) throws -> V","}"],"type":"codeListing"},{"inlineContent":[{"text":"Each decoder implements ","type":"text"},{"code":"DecodesFromTree","type":"codeVoice"},{"type":"text","text":" and provides the following methods with "},{"type":"codeVoice","code":"Value"},{"text":" being the ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"text":"’s native value tree","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type; allowing us to transform a native value tree into an instance of a "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" type."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["protocol DecodesFromTree {","  func decodeTree<T : Decodable, V : Value>(_ type: T.Type, from: V) throws -> T","  func decodeTreeIfPresent<T : Decodable, V : Value>(_ type: T.Type, from: V) throws -> T?","}"]},{"level":2,"text":"Data Encoding\/Decoding","type":"heading","anchor":"Data-EncodingDecoding"},{"inlineContent":[{"text":"Binary formats, like ","type":"text"},{"code":"CBOR","type":"codeVoice"},{"type":"text","text":", are encoded to their final form as a "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" value. This is the interface most widely recognized from Swift’s native"},{"type":"text","text":" "},{"type":"text","text":"implementations for JSON and Property List."}],"type":"paragraph"},{"level":4,"type":"heading","text":"Protocols","anchor":"Protocols"},{"inlineContent":[{"type":"text","text":"Each encoder implements "},{"type":"codeVoice","code":"EncodesToData"},{"type":"text","text":" and provides the following method to transform "},{"type":"codeVoice","code":"Encodable"},{"text":" instances into ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" values.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["protocol EncodesToData {","  func encode<T: Encodable>(_ value: T) throws -> Data","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each decoder implements "},{"code":"DecodesFromData","type":"codeVoice"},{"type":"text","text":" and provides the following methods to transform "},{"type":"codeVoice","code":"Data"},{"text":" into an instance of a ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" "},{"text":"type.","type":"text"}]},{"syntax":"swift","code":["protocol DecodesFromData {","  func decode<T: Decodable>(_ type: T.Type, from: Data) throws -> T","  func decodeIfPresent<T: Decodable>(_ type: T.Type, from: Data) throws -> T?","}"],"type":"codeListing"},{"type":"heading","level":2,"text":"String Encoding\/Decoding","anchor":"String-EncodingDecoding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any PotentCodable encoder or decoder that is implementing a text based serialization format (e.g. JSON, YAML, etc.) provides the extra"},{"type":"text","text":" "},{"text":"capability to encode to and decode from ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values. These formats also support the methods for Data encoding\/decoding using a"},{"type":"text","text":" "},{"type":"text","text":"string encoding required by their speification or that will be automatically detected during decoding."}]},{"anchor":"Protocols","type":"heading","level":4,"text":"Protocols"},{"inlineContent":[{"type":"text","text":"Each encoder implements "},{"type":"codeVoice","code":"EncodesToString"},{"text":" and provides the following method to transform ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" instances into ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol EncodesToString {","  func encodeString<T: Encodable>(_ value: T) throws -> String","}"]},{"inlineContent":[{"text":"Each decoder implements ","type":"text"},{"type":"codeVoice","code":"DecodesFromString"},{"text":" and provides the following methods to transform ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" into an instance of a","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Decodable"},{"text":" type.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["protocol DecodesFromString {","  func decode<T: Decodable>(_ type: T.Type, from: String) throws -> T","  func decodeIfPresent<T: Decodable>(_ type: T.Type, from: String) throws -> T","}"],"type":"codeListing"},{"text":"Using Protocols","type":"heading","level":2,"anchor":"Using-Protocols"},{"inlineContent":[{"text":"Unlike Swift’s native encoders\/decoders, all the encoders and decoders provided by PotentCodables implement the above interfaces","type":"text"},{"type":"text","text":" "},{"type":"text","text":"based on the type of format (e.g. binary or text).  This allow users to interchangably use any encoder or decoder at runtime without munually"},{"text":" ","type":"text"},{"type":"text","text":"adding protocol conformance."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"One encoder\/decoder pair, ","type":"text"},{"type":"codeVoice","code":"AnyValueEncoder"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"AnyValueDecoder"},{"type":"text","text":", only supports targeting native value trees. This is because it has no"},{"type":"text","text":" "},{"type":"text","text":"serialized format and only exists to transcode between in-memory representations."}]}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"code":"Encoder","type":"codeVoice"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s implement."}],"metadata":{"title":"Encoder\/Decoder Protocols","modules":[{"name":"PotentCodables"}],"role":"article","roleHeading":"Article"},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats"],"generated":true,"anchor":"Advanced"}],"kind":"article","references":{"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","kind":"article","role":"article","url":"\/documentation\/potentcodables\/implementing-formats","abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"type":"topic","title":"Implementing New Data Formats"},"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"url":"\/documentation\/potentcodables\/custom-references","type":"topic","abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"role":"article","kind":"article","title":"Custom References","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","url":"\/documentation\/potentcodables","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"type":"topic","role":"collection"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","role":"article","title":"Polymorphic Encoding & Decoding"}}}