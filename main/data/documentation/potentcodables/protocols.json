{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"metadata":{"roleHeading":"Article","title":"Encoder\/Decoder Protocols","modules":[{"name":"PotentCodables"}],"role":"article"},"kind":"article","seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats"],"title":"Advanced","anchor":"Advanced"}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"code":"Encoder","type":"codeVoice"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"text":"s implement.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Native Value Trees","anchor":"Native-Value-Trees"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All PotentCodable encoders and decoders use a two stage serialization system. For example, when encoding an "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" value it is first"},{"type":"text","text":" "},{"text":"transformed into a native “value tree” that is defined by the serialization format. Secondarily, a serialization utility is used to transform","type":"text"},{"type":"text","text":" "},{"text":"the value tree into the final serialized data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, when encoding to CBOR the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" value is first transformed into "},{"type":"codeVoice","code":"CBOR"},{"type":"text","text":" values that closely match the CBOR"},{"type":"text","text":" "},{"text":"specification and then the ","type":"text"},{"type":"codeVoice","code":"CBOR"},{"type":"text","text":" value tree is serialized into "},{"code":"Data","type":"codeVoice"},{"type":"text","text":".  The same process is done for decoding but in reverse, "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" is turned"},{"text":" ","type":"text"},{"text":"into a value tree and then the value tree is decoded into a ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" value as requested."}]},{"type":"paragraph","inlineContent":[{"text":"This two stage system is important to ensure that we can implement new serialization formats with a reduced amount of code. All of the","type":"text"},{"type":"text","text":" "},{"text":"machinery to encode ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":"s and  decode "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":"s are isolated in a common set of classes that need to be implemented only"},{"type":"text","text":" "},{"text":"once.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The protocol representing a native value tree is "},{"type":"codeVoice","code":"Value"},{"text":" and its quite small:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["  protocol Value {","    var isNull: Bool { get }","    var unwrapped: Any? { get }","  }"]},{"inlineContent":[{"type":"text","text":"It provides only the ability to test if it represents something equivalent to Swift’s  "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and the ability to “unwrap” itself into native Swift"},{"text":" ","type":"text"},{"text":"values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can see examples of "},{"type":"codeVoice","code":"Value"},{"text":" implementations in the ","type":"text"},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CBOR"},{"type":"text","text":" enumerations. These types closely track the values representable"},{"type":"text","text":" "},{"type":"text","text":"by thier format and can be easily manipulated."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Aside from providing code structure that allows us to employ code re-use this requirement ensures that we can always encode\/decode","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to an in-memory value tree. A very useful side-effect of this is that it allows us to easily examine or manipulate everything that is encoded"},{"text":" ","type":"text"},{"type":"text","text":"and decoded."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"text":" Inevitably somebody will want to point out the inefficiency of using a two stage system of serialization. It is our belief that the added","type":"text"},{"text":" ","type":"text"},{"text":"features and reduced implementation cost far outweigh any slight performance\/memory improvement that might be gained from serializing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"directly to the target format.  "},{"type":"emphasis","inlineContent":[{"text":"Also","type":"text"}]},{"type":"text","text":", Swift’s native JSON implementations already use this same two stage method. In the native"},{"type":"text","text":" "},{"type":"text","text":"implementation, encodables are turned into Objective-C values and then Objective-C’s JSONSerialiazation class is used to create serialized"},{"text":" ","type":"text"},{"type":"text","text":"JSON data."}]},{"type":"heading","level":2,"text":"Value Tree Encoding\/Decoding","anchor":"Value-Tree-EncodingDecoding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to the requirement that all of our encoders and decoders support a native value tree representation, it provides the capability to encode"},{"type":"text","text":" "},{"type":"text","text":"or decode to native value trees using the following methods:"}]},{"text":"Protocols","anchor":"Protocols","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each encoder implements "},{"code":"EncodesToTree","type":"codeVoice"},{"type":"text","text":" and provides the following method with "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" being the "},{"code":"Encoder","type":"codeVoice"},{"text":"’s native value tree type;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"allowing us to transform an "},{"code":"Encodable","type":"codeVoice"},{"text":" instance into a native value tree.","type":"text"}]},{"code":["protocol EncodesToTree {","  func encodeTree<T : Encodable, V : Value>(_ value: T) throws -> V","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Each decoder implements "},{"type":"codeVoice","code":"DecodesFromTree"},{"text":" and provides the following methods with ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" being the ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"type":"text","text":"’s native value tree"},{"text":" ","type":"text"},{"text":"type; allowing us to transform a native value tree into an instance of a ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" type.","type":"text"}],"type":"paragraph"},{"code":["protocol DecodesFromTree {","  func decodeTree<T : Decodable, V : Value>(_ type: T.Type, from: V) throws -> T","  func decodeTreeIfPresent<T : Decodable, V : Value>(_ type: T.Type, from: V) throws -> T?","}"],"type":"codeListing","syntax":"swift"},{"text":"Data Encoding\/Decoding","level":2,"type":"heading","anchor":"Data-EncodingDecoding"},{"type":"paragraph","inlineContent":[{"text":"Binary formats, like ","type":"text"},{"code":"CBOR","type":"codeVoice"},{"text":", are encoded to their final form as a ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":" value. This is the interface most widely recognized from Swift’s native","type":"text"},{"text":" ","type":"text"},{"text":"implementations for JSON and Property List.","type":"text"}]},{"type":"heading","level":4,"text":"Protocols","anchor":"Protocols"},{"inlineContent":[{"type":"text","text":"Each encoder implements "},{"type":"codeVoice","code":"EncodesToData"},{"text":" and provides the following method to transform ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" instances into ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" values.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol EncodesToData {","  func encode<T: Encodable>(_ value: T) throws -> Data","}"]},{"type":"paragraph","inlineContent":[{"text":"Each decoder implements ","type":"text"},{"type":"codeVoice","code":"DecodesFromData"},{"text":" and provides the following methods to transform ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":" into an instance of a ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["protocol DecodesFromData {","  func decode<T: Decodable>(_ type: T.Type, from: Data) throws -> T","  func decodeIfPresent<T: Decodable>(_ type: T.Type, from: Data) throws -> T?","}"]},{"text":"String Encoding\/Decoding","type":"heading","anchor":"String-EncodingDecoding","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any PotentCodable encoder or decoder that is implementing a text based serialization format (e.g. JSON, YAML, etc.) provides the extra"},{"text":" ","type":"text"},{"text":"capability to encode to and decode from ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values. These formats also support the methods for Data encoding\/decoding using a","type":"text"},{"type":"text","text":" "},{"text":"string encoding required by their speification or that will be automatically detected during decoding.","type":"text"}]},{"type":"heading","text":"Protocols","level":4,"anchor":"Protocols"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each encoder implements "},{"type":"codeVoice","code":"EncodesToString"},{"type":"text","text":" and provides the following method to transform "},{"type":"codeVoice","code":"Encodable"},{"text":" instances into ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"}]},{"syntax":"swift","code":["protocol EncodesToString {","  func encodeString<T: Encodable>(_ value: T) throws -> String","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each decoder implements "},{"code":"DecodesFromString","type":"codeVoice"},{"type":"text","text":" and provides the following methods to transform "},{"code":"String","type":"codeVoice"},{"type":"text","text":" into an instance of a"},{"type":"text","text":" "},{"code":"Decodable","type":"codeVoice"},{"text":" type.","type":"text"}]},{"type":"codeListing","code":["protocol DecodesFromString {","  func decode<T: Decodable>(_ type: T.Type, from: String) throws -> T","  func decodeIfPresent<T: Decodable>(_ type: T.Type, from: String) throws -> T","}"],"syntax":"swift"},{"type":"heading","anchor":"Using-Protocols","level":2,"text":"Using Protocols"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike Swift’s native encoders\/decoders, all the encoders and decoders provided by PotentCodables implement the above interfaces"},{"type":"text","text":" "},{"text":"based on the type of format (e.g. binary or text).  This allow users to interchangably use any encoder or decoder at runtime without munually","type":"text"},{"type":"text","text":" "},{"text":"adding protocol conformance.","type":"text"}]},{"inlineContent":[{"type":"text","text":"One encoder\/decoder pair, "},{"type":"codeVoice","code":"AnyValueEncoder"},{"text":"\/","type":"text"},{"code":"AnyValueDecoder","type":"codeVoice"},{"type":"text","text":", only supports targeting native value trees. This is because it has no"},{"type":"text","text":" "},{"text":"serialized format and only exists to transcode between in-memory representations.","type":"text"}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"},"references":{"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","role":"article","title":"Custom References","url":"\/documentation\/potentcodables\/custom-references","kind":"article"},"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","url":"\/documentation\/potentcodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","type":"topic","abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" data formats easily.","type":"text"}],"role":"article","title":"Implementing New Data Formats","url":"\/documentation\/potentcodables\/implementing-formats","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","role":"article","title":"Polymorphic Encoding & Decoding","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article"}}}