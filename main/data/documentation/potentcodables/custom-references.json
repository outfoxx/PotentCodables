{"kind":"article","identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Polymorphic references for wrapped values (using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"text":") use the name ","type":"text"},{"code":"@type","type":"codeVoice"},{"text":" for the","type":"text"},{"type":"text","text":" "},{"text":"field containing the type id and the name ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" for the field containing the wrapped value. References for embedded","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values (using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":") usethe name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the field containing the type id. Both reference"},{"text":" ","type":"text"},{"type":"text","text":"structures use the "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"text":" for type id generation and lookup.","type":"text"}]},{"inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"text":" is simply a","type":"text"},{"type":"text","text":" "},{"text":"type alias to the generic type ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"type":"text","text":" that uses ("},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference"},{"text":") for type","type":"text"},{"type":"text","text":" "},{"text":"handling and the key providers (","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"type":"text","text":") and ("},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","isActive":true,"type":"reference"},{"text":") to provide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the names of the fields. Similarly, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"text":" is a type alias to","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to how your data needs to be structured."}]},{"type":"heading","anchor":"Customizing-Keys","text":"Customizing Keys","level":3},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":" uses “key providers” to determine the names of the fields to use during encoding and","type":"text"},{"text":" ","type":"text"},{"text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simple types."}],"type":"paragraph"},{"inlineContent":[{"text":"Here is the definition of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"type":"text","text":" that provides the name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"type":"text","text":" "},{"type":"text","text":"field of a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The following example creates a new reference type ","type":"text"},{"type":"codeVoice","code":"UnderscoreRef"},{"type":"text","text":" that uses the names "},{"type":"codeVoice","code":"_type"},{"text":" for the type id field","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the name "},{"type":"codeVoice","code":"_value"},{"type":"text","text":" for the value field."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"type":"paragraph","inlineContent":[{"text":"For ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"text":" only a ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true,"type":"reference"},{"type":"text","text":" is required because all fields"},{"type":"text","text":" "},{"text":"are contained in the same container.","type":"text"}]},{"inlineContent":[{"type":"text","text":"An embedded "},{"type":"codeVoice","code":"UnderscoreEmbeddedRef"},{"text":" similar to the above example would be created similarly.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"level":3,"anchor":"Customizing-Type-Lookup","text":"Customizing Type Lookup","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"type":"text","text":" "},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"type":"text","text":" "},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"inlineContent":[{"text":"The default type index, used by ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":", is"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"text":". The index has a simple global map of allowed types and their type ids.","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference","isActive":true},{"type":"text","text":" uses the simple module local type name."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"DefaultTypeIndex","type":"codeVoice"},{"text":"’s map of allowed types is initially empty and will not allow any custom types during","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"before decoding values.","type":"text"}]}],"name":"Note","style":"note"},{"inlineContent":[{"text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true},{"text":" and define a new reference type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"syntax":"swift"}]}],"seeAlsoSections":[{"title":"Advanced","anchor":"Advanced","generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"]}],"sections":[],"metadata":{"title":"Custom References","modules":[{"name":"PotentCodables"}],"role":"article","roleHeading":"Article"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://PotentCodables/documentation/PotentCodables/Protocols":{"abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"code":"Encoder","type":"codeVoice"},{"text":"s and ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"kind":"article","type":"topic","title":"Encoder\/Decoder Protocols","url":"\/documentation\/potentcodables\/protocols","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"type":"topic","abstract":[{"text":"Set the allowed types to the given array after mapping them using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)"},{"type":"text","text":"."}],"url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"addAllowedTypes"},{"kind":"text","text":"(["},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"text":".Type])","kind":"text"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","title":"addAllowedTypes(_:)","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"title":"Ref","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Ref","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Ref","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"role":"symbol","kind":"symbol","type":"topic","abstract":[],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","title":"typeKey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"type":"topic","abstract":[{"text":"Maps the given array of types to their generated type id and returns the dictionary.","type":"text"}],"url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapAllowedTypes"},{"text":"([","kind":"text"},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"},{"kind":"text","text":".Type]) -> ["},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"},{"kind":"text","text":".Type]"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","title":"mapAllowedTypes(_:)","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","role":"article","title":"Polymorphic Encoding & Decoding","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"role":"symbol","title":"typeKey","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","type":"topic","url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"text":"AnyCodingKey","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"kind":"symbol","required":true},"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","url":"\/documentation\/potentcodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"type":"topic","role":"symbol","url":"\/documentation\/potentcodables\/embeddedref","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"EmbeddedRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"title":"EmbeddedRef","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"CustomRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/customref","kind":"symbol","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"topic","title":"CustomRef","abstract":[{"type":"text","text":"The implementation type for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" types."}]},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"title":"DefaultValueKey","abstract":[{"text":"Default value key provider using ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" as the "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","isActive":true,"type":"reference"}],"url":"\/documentation\/potentcodables\/defaultvaluekey","navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultValueKey"}]},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomEmbeddedRef"}],"navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","url":"\/documentation\/potentcodables\/customembeddedref","title":"CustomEmbeddedRef","abstract":[{"type":"text","text":"The implementation type for "},{"type":"codeVoice","code":"EmbeddedRef"},{"text":" types.","type":"text"}],"role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"text":" ","type":"text"},{"text":"by clients.","type":"text"}],"url":"\/documentation\/potentcodables\/defaulttypeindex","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultTypeIndex","kind":"identifier"}],"title":"DefaultTypeIndex"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"abstract":[{"text":"Provides static functions for looking up types by id for decoding","type":"text"},{"type":"text","text":" "},{"text":"and generating type ids for types during encoding.","type":"text"}],"role":"symbol","url":"\/documentation\/potentcodables\/typeindex","title":"TypeIndex","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeIndex"}],"navigatorTitle":[{"kind":"identifier","text":"TypeIndex"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"type":"topic","kind":"symbol","title":"TypeKeyProvider","abstract":[{"text":"Provides a static ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey"},{"text":" property that ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"type":"text","text":" "},{"type":"text","text":"type name."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeKeyProvider"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","role":"symbol","url":"\/documentation\/potentcodables\/typekeyprovider","navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","type":"topic","abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" data formats easily.","type":"text"}],"role":"article","title":"Implementing New Data Formats","url":"\/documentation\/potentcodables\/implementing-formats","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","abstract":[{"type":"text","text":"Default type key provider using "},{"code":"@type","type":"codeVoice"},{"type":"text","text":" as the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"}],"role":"symbol","kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypekey","title":"DefaultTypeKey","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultTypeKey"}],"navigatorTitle":[{"text":"DefaultTypeKey","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"abstract":[],"role":"symbol","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","title":"valueKey","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"valueKey"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey"}}}