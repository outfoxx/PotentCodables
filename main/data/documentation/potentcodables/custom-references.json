{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"generated":true,"title":"Advanced","anchor":"Advanced"}],"metadata":{"title":"Custom References","role":"article","roleHeading":"Article","modules":[{"name":"PotentCodables"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Polymorphic references for wrapped values (using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":") use the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the"},{"text":" ","type":"text"},{"type":"text","text":"field containing the type id and the name "},{"type":"codeVoice","code":"value"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"type":"text","text":" "},{"text":"values (using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":") usethe name "},{"code":"@type","type":"codeVoice"},{"type":"text","text":" for the field containing the type id. Both reference"},{"type":"text","text":" "},{"text":"structures use the ","type":"text"},{"code":"DefaultTypeIndex","type":"codeVoice"},{"type":"text","text":" for type id generation and lookup."}]},{"inlineContent":[{"text":"These names and the type id generation and lookup are fully customizable. In fact, ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" is simply a","type":"text"},{"text":" ","type":"text"},{"text":"type alias to the generic type ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"reference"},{"type":"text","text":" that uses ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":") for type"},{"type":"text","text":" "},{"text":"handling and the key providers (","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"type":"text","text":") and ("},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","type":"reference"},{"text":") to provide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the names of the fields. Similarly, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" is a type alias to"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to how your data needs to be structured."}]},{"level":3,"type":"heading","text":"Customizing Keys","anchor":"Customizing-Keys"},{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"text":" ","type":"text"},{"text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very","type":"text"},{"type":"text","text":" "},{"text":"simple types.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here is the definition of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"text":" that provides the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"]},{"type":"paragraph","inlineContent":[{"text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"field of a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"code":"UnderscoreRef","type":"codeVoice"},{"text":" that uses the names ","type":"text"},{"type":"codeVoice","code":"_type"},{"type":"text","text":" for the type id field"},{"text":" ","type":"text"},{"type":"text","text":"and the name "},{"type":"codeVoice","code":"_value"},{"type":"text","text":" for the value field."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"inlineContent":[{"type":"text","text":"For "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"type":"text","text":" only a "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true},{"type":"text","text":" is required because all fields"},{"type":"text","text":" "},{"text":"are contained in the same container.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An embedded "},{"type":"codeVoice","code":"UnderscoreEmbeddedRef"},{"text":" similar to the above example would be created similarly.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"anchor":"Customizing-Type-Lookup","level":3,"type":"heading","text":"Customizing Type Lookup"},{"inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"type":"text","text":" "},{"text":"transformed back into the requested types. To enable extensability, and ensure security during","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"text":" ","type":"text"},{"text":"for types and provides the ability to lookup a type for a matching id.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The default type index, used by ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference"},{"type":"text","text":", is"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true,"type":"reference"},{"type":"text","text":". The index has a simple global map of allowed types and their type ids."},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":" uses the simple module local type name."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":"’s map of allowed types is initially empty and will not allow any custom types during"},{"text":" ","type":"text"},{"text":"decoding. You must explicitly update the map of allowed types using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},{"type":"text","text":" "},{"type":"text","text":"before decoding values."}]}],"style":"note","type":"aside","name":"Note"},{"inlineContent":[{"text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true},{"text":" and define a new reference type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"]}],"kind":"content"}],"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"title":"DefaultTypeIndex","kind":"symbol","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"type":"topic","url":"\/documentation\/potentcodables\/defaulttypeindex","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultTypeIndex","kind":"identifier"}],"abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"text":"by clients.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","kind":"symbol","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddedRef","kind":"identifier"}],"abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"url":"\/documentation\/potentcodables\/embeddedref","title":"EmbeddedRef"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"text":"AnyCodingKey","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"abstract":[],"title":"typeKey"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomEmbeddedRef","kind":"identifier"}],"abstract":[{"text":"The implementation type for ","type":"text"},{"type":"codeVoice","code":"EmbeddedRef"},{"type":"text","text":" types."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CustomEmbeddedRef"}],"url":"\/documentation\/potentcodables\/customembeddedref","title":"CustomEmbeddedRef"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addAllowedTypes"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type])"}],"abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","isActive":true},{"type":"text","text":"."}],"title":"addAllowedTypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"valueKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"abstract":[],"role":"symbol","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","title":"valueKey"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Decoder"},{"text":"s implement.","type":"text"}],"url":"\/documentation\/potentcodables\/protocols","title":"Encoder\/Decoder Protocols","role":"article","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TypeIndex"}],"navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/typeindex","role":"symbol","title":"TypeIndex","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","abstract":[{"text":"Provides static functions for looking up types by id for decoding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and generating type ids for types during encoding."}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"abstract":[{"type":"text","text":"Default type key provider using "},{"type":"codeVoice","code":"@type"},{"text":" as the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","type":"reference"}],"url":"\/documentation\/potentcodables\/defaulttypekey","title":"DefaultTypeKey","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeKey"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DefaultTypeKey","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Ref":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"}],"navigatorTitle":[{"text":"Ref","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/ref","role":"symbol","title":"Ref","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}],"url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","title":"mapAllowedTypes(_:)","role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mapAllowedTypes"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"text":".Type]) -> [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":" : ","kind":"text"},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"text":".Type]","kind":"text"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TypeKeyProvider","kind":"identifier"}],"navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/typekeyprovider","role":"symbol","title":"TypeKeyProvider","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","abstract":[{"type":"text","text":"Provides a static "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey"},{"text":" property that ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" "},{"text":"use to determine which key to use when encoding\/decoding the Swift","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type name."}]},"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"title":"PotentCodables","type":"topic","kind":"symbol","url":"\/documentation\/potentcodables","role":"collection"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"abstract":[],"url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","title":"typeKey","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"typeKey"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","kind":"symbol","required":true},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"kind":"article","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","role":"article","title":"Polymorphic Encoding & Decoding","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}]},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"abstract":[{"type":"text","text":"The implementation type for "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"type":"text","text":" types."}],"url":"\/documentation\/potentcodables\/customref","title":"CustomRef","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CustomRef"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CustomRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","url":"\/documentation\/potentcodables\/implementing-formats","role":"article","title":"Implementing New Data Formats","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" data formats easily."}]},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"abstract":[{"type":"text","text":"Default value key provider using "},{"code":"value","type":"codeVoice"},{"text":" as the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","isActive":true}],"url":"\/documentation\/potentcodables\/defaultvaluekey","title":"DefaultValueKey","role":"symbol","navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultValueKey"}]}}}