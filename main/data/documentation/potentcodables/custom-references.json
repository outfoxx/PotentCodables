{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic references for wrapped values (using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":") use the name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the"},{"type":"text","text":" "},{"type":"text","text":"field containing the type id and the name "},{"type":"codeVoice","code":"value"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"type":"text","text":" "},{"type":"text","text":"values (using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":") usethe name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the field containing the type id. Both reference"},{"type":"text","text":" "},{"type":"text","text":"structures use the "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" for type id generation and lookup."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" is simply a"},{"type":"text","text":" "},{"type":"text","text":"type alias to the generic type "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"type":"text","text":" that uses ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":") for type"},{"type":"text","text":" "},{"type":"text","text":"handling and the key providers ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"type":"text","text":") and ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey"},{"type":"text","text":") to provide"},{"type":"text","text":" "},{"type":"text","text":"the names of the fields. Similarly, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" is a type alias to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform"},{"type":"text","text":" "},{"type":"text","text":"to how your data needs to be structured."}]},{"anchor":"Customizing-Keys","level":3,"type":"heading","text":"Customizing Keys"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"type":"text","text":" "},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"type":"text","text":" "},{"type":"text","text":"simple types."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is the definition of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"type":"text","text":" that provides the name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"type":"text","text":" "},{"type":"text","text":"field of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"type":"codeVoice","code":"UnderscoreRef"},{"type":"text","text":" that uses the names "},{"type":"codeVoice","code":"_type"},{"type":"text","text":" for the type id field"},{"type":"text","text":" "},{"type":"text","text":"and the name "},{"type":"codeVoice","code":"_value"},{"type":"text","text":" for the value field."}]},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"type":"text","text":" only a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider"},{"type":"text","text":" is required because all fields"},{"type":"text","text":" "},{"type":"text","text":"are contained in the same container."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An embedded "},{"type":"codeVoice","code":"UnderscoreEmbeddedRef"},{"type":"text","text":" similar to the above example would be created similarly."}]},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"anchor":"Customizing-Type-Lookup","level":3,"type":"heading","text":"Customizing Type Lookup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"type":"text","text":" "},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"type":"text","text":" "},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"type":"text","text":" "},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index, used by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":", is"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":". The index has a simple global map of allowed types and their type ids."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":" uses the simple module local type name."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":"’s map of allowed types is initially empty and will not allow any custom types during"},{"type":"text","text":" "},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},{"type":"text","text":" "},{"type":"text","text":"before decoding values."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex"},{"type":"text","text":" and define a new reference type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code."}]},{"type":"codeListing","syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Custom References","role":"article","modules":[{"name":"PotentCodables"}]},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"generated":true}],"references":{"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"role":"article","title":"Polymorphic Encoding & Decoding","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"role":"symbol","title":"EmbeddedRef","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedRef"}],"abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"url":"\/documentation\/potentcodables\/embeddedref"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"role":"symbol","title":"TypeIndex","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeIndex"}],"abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"type":"text","text":" "},{"type":"text","text":"and generating type ids for types during encoding."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TypeIndex"}],"url":"\/documentation\/potentcodables\/typeindex"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"role":"symbol","title":"Ref","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"}],"abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Ref"}],"url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"role":"symbol","title":"typeKey","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"typeKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/potentcodables\/typekeyprovider\/typekey"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"role":"symbol","title":"CustomRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomRef"}],"abstract":[{"type":"text","text":"The implementation type for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CustomRef"}],"url":"\/documentation\/potentcodables\/customref"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"role":"symbol","title":"DefaultValueKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultValueKey"}],"abstract":[{"type":"text","text":"Default value key provider using "},{"type":"codeVoice","code":"value"},{"type":"text","text":" as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DefaultValueKey"}],"url":"\/documentation\/potentcodables\/defaultvaluekey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"role":"symbol","title":"DefaultTypeIndex","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeIndex"}],"abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}],"url":"\/documentation\/potentcodables\/defaulttypeindex"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"role":"symbol","title":"valueKey","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"valueKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"role":"symbol","title":"addAllowedTypes(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addAllowedTypes"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type])"}],"abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"role":"symbol","title":"DefaultTypeKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeKey"}],"abstract":[{"type":"text","text":"Default type key provider using "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeKey"}],"url":"\/documentation\/potentcodables\/defaulttypekey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"role":"symbol","title":"mapAllowedTypes(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapAllowedTypes"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type]) -> ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type]"}],"abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)"},"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"role":"article","title":"Implementing New Data Formats","abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/implementing-formats"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"role":"symbol","title":"CustomEmbeddedRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomEmbeddedRef"}],"abstract":[{"type":"text","text":"The implementation type for "},{"type":"codeVoice","code":"EmbeddedRef"},{"type":"text","text":" types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CustomEmbeddedRef"}],"url":"\/documentation\/potentcodables\/customembeddedref"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"role":"article","title":"Encoder\/Decoder Protocols","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s implement."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","kind":"article","type":"topic","url":"\/documentation\/potentcodables\/protocols"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"role":"symbol","title":"typeKey","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"typeKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables\/defaulttypekey\/typekey"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"role":"symbol","title":"TypeKeyProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeKeyProvider"}],"abstract":[{"type":"text","text":"Provides a static "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey"},{"type":"text","text":" property that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" "},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"type":"text","text":" "},{"type":"text","text":"type name."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TypeKeyProvider"}],"url":"\/documentation\/potentcodables\/typekeyprovider"}}}