{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced","generated":true}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"Polymorphic references for wrapped values (using ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":") use the name "},{"type":"codeVoice","code":"@type"},{"text":" for the","type":"text"},{"text":" ","type":"text"},{"text":"field containing the type id and the name ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"type":"text","text":" "},{"text":"values (using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":") usethe name "},{"code":"@type","type":"codeVoice"},{"type":"text","text":" for the field containing the type id. Both reference"},{"text":" ","type":"text"},{"text":"structures use the ","type":"text"},{"code":"DefaultTypeIndex","type":"codeVoice"},{"text":" for type id generation and lookup.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"These names and the type id generation and lookup are fully customizable. In fact, ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" is simply a"},{"text":" ","type":"text"},{"type":"text","text":"type alias to the generic type "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"type":"text","text":" that uses ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":") for type"},{"type":"text","text":" "},{"text":"handling and the key providers (","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"type":"text","text":") and ("},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","isActive":true},{"text":") to provide","type":"text"},{"type":"text","text":" "},{"text":"the names of the fields. Similarly, ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":" is a type alias to","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to how your data needs to be structured."}]},{"level":3,"text":"Customizing Keys","type":"heading","anchor":"Customizing-Keys"},{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"type":"text","text":" "},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"text":" ","type":"text"},{"type":"text","text":"simple types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here is the definition of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"type":"text","text":" that provides the name "},{"code":"@type","type":"codeVoice"},{"type":"text","text":" for"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"]},{"inlineContent":[{"text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value","type":"text"},{"type":"text","text":" "},{"text":"field of a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"code":"UnderscoreRef","type":"codeVoice"},{"type":"text","text":" that uses the names "},{"code":"_type","type":"codeVoice"},{"type":"text","text":" for the type id field"},{"type":"text","text":" "},{"type":"text","text":"and the name "},{"code":"_value","type":"codeVoice"},{"type":"text","text":" for the value field."}]},{"code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"For "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"type":"text","text":" only a "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true},{"text":" is required because all fields","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are contained in the same container."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An embedded ","type":"text"},{"type":"codeVoice","code":"UnderscoreEmbeddedRef"},{"type":"text","text":" similar to the above example would be created similarly."}]},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"anchor":"Customizing-Type-Lookup","type":"heading","text":"Customizing Type Lookup","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"type":"text","text":" "},{"text":"transformed back into the requested types. To enable extensability, and ensure security during","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"type":"text","text":" "},{"text":"for types and provides the ability to lookup a type for a matching id.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index, used by "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":", is"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true,"type":"reference"},{"text":". The index has a simple global map of allowed types and their type ids.","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"type":"text","text":" uses the simple module local type name."}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"code":"DefaultTypeIndex","type":"codeVoice"},{"type":"text","text":"’s map of allowed types is initially empty and will not allow any custom types during"},{"type":"text","text":" "},{"text":"decoding. You must explicitly update the map of allowed types using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"before decoding values.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"inlineContent":[{"type":"text","text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex"},{"type":"text","text":" and define a new reference type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}]},{"type":"codeListing","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"syntax":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"metadata":{"role":"article","modules":[{"name":"PotentCodables"}],"roleHeading":"Article","title":"Custom References"},"references":{"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","title":"TypeKeyProvider","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TypeKeyProvider","kind":"identifier"}],"type":"topic","url":"\/documentation\/potentcodables\/typekeyprovider","abstract":[{"type":"text","text":"Provides a static "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","type":"reference"},{"type":"text","text":" property that "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"text":" ","type":"text"},{"text":"use to determine which key to use when encoding\/decoding the Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type name."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TypeKeyProvider"}]},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"code":"Encoder","type":"codeVoice"},{"text":"s and ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"type":"topic","url":"\/documentation\/potentcodables\/protocols","role":"article","kind":"article","title":"Encoder\/Decoder Protocols","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"kind":"text","text":".Type])"}],"title":"addAllowedTypes(_:)","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","isActive":true},{"type":"text","text":"."}],"role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"abstract":[],"url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","kind":"symbol","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"valueKey"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"title":"valueKey","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","role":"article","kind":"article","title":"Polymorphic Encoding & Decoding","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultTypeIndex","kind":"identifier"}],"url":"\/documentation\/potentcodables\/defaulttypeindex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}],"title":"DefaultTypeIndex","kind":"symbol","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mapAllowedTypes"},{"kind":"text","text":"(["},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"text":".Type]) -> [","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"text":".Type]","kind":"text"}],"abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}],"role":"symbol","title":"mapAllowedTypes(_:)","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DefaultTypeKey","kind":"identifier"}],"title":"DefaultTypeKey","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","url":"\/documentation\/potentcodables\/defaulttypekey","abstract":[{"type":"text","text":"Default type key provider using "},{"code":"@type","type":"codeVoice"},{"text":" as the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","isActive":true}],"role":"symbol","navigatorTitle":[{"text":"DefaultTypeKey","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"kind":"symbol","required":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","title":"typeKey","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"type":"topic","abstract":[],"url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CustomEmbeddedRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","role":"symbol","abstract":[{"text":"The implementation type for ","type":"text"},{"code":"EmbeddedRef","type":"codeVoice"},{"text":" types.","type":"text"}],"url":"\/documentation\/potentcodables\/customembeddedref","navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}],"title":"CustomEmbeddedRef"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Ref","kind":"identifier"}],"abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"role":"symbol","title":"Ref","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","navigatorTitle":[{"text":"Ref","kind":"identifier"}],"url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmbeddedRef"}],"abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"role":"symbol","title":"EmbeddedRef","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","navigatorTitle":[{"text":"EmbeddedRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/embeddedref"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","title":"Implementing New Data Formats","url":"\/documentation\/potentcodables\/implementing-formats","role":"article","kind":"article","type":"topic","abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" data formats easily.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","role":"collection","type":"topic","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","url":"\/documentation\/potentcodables"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"type":"topic","abstract":[{"type":"text","text":"The implementation type for "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" types."}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}],"title":"CustomRef","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/customref"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"url":"\/documentation\/potentcodables\/defaultvaluekey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","title":"DefaultValueKey","abstract":[{"text":"Default value key provider using ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey"}],"navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultValueKey"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","type":"topic","url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","title":"typeKey","role":"symbol","abstract":[],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"typeKey"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey"}]},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","title":"TypeIndex","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeIndex"}],"type":"topic","abstract":[{"text":"Provides static functions for looking up types by id for decoding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and generating type ids for types during encoding."}],"url":"\/documentation\/potentcodables\/typeindex","role":"symbol","navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}]}}}