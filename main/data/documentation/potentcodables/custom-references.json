{"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced","generated":true,"title":"Advanced"}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic references for wrapped values (using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":") use the name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the"},{"type":"text","text":" "},{"text":"field containing the type id and the name ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"type":"text","text":" "},{"text":"values (using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":") usethe name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the field containing the type id. Both reference"},{"text":" ","type":"text"},{"text":"structures use the ","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" for type id generation and lookup."}]},{"inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"type":"text","text":" is simply a"},{"type":"text","text":" "},{"text":"type alias to the generic type ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":" that uses (","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference","isActive":true},{"text":") for type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"handling and the key providers ("},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"type":"text","text":") and ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey"},{"text":") to provide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the names of the fields. Similarly, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":" is a type alias to"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform"},{"text":" ","type":"text"},{"text":"to how your data needs to be structured.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Customizing Keys","anchor":"Customizing-Keys","type":"heading"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"type":"text","text":" "},{"text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simple types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here is the definition of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"type":"text","text":" that provides the name "},{"code":"@type","type":"codeVoice"},{"text":" for","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"text":" ","type":"text"},{"type":"text","text":"field of a "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"type":"codeVoice","code":"UnderscoreRef"},{"text":" that uses the names ","type":"text"},{"type":"codeVoice","code":"_type"},{"type":"text","text":" for the type id field"},{"type":"text","text":" "},{"text":"and the name ","type":"text"},{"type":"codeVoice","code":"_value"},{"text":" for the value field.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":" only a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true,"type":"reference"},{"type":"text","text":" is required because all fields"},{"text":" ","type":"text"},{"type":"text","text":"are contained in the same container."}]},{"inlineContent":[{"text":"An embedded ","type":"text"},{"code":"UnderscoreEmbeddedRef","type":"codeVoice"},{"text":" similar to the above example would be created similarly.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"anchor":"Customizing-Type-Lookup","text":"Customizing Type Lookup","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"text":" ","type":"text"},{"text":"decoding, type ids are looked up using a type index. A type index simply generates type ids","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"type":"paragraph","inlineContent":[{"text":"The default type index, used by ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"text":", is","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true,"type":"reference"},{"text":". The index has a simple global map of allowed types and their type ids.","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"text":" uses the simple module local type name.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":"’s map of allowed types is initially empty and will not allow any custom types during"},{"type":"text","text":" "},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","isActive":true},{"type":"text","text":" "},{"type":"text","text":"before decoding values."}]}]},{"type":"paragraph","inlineContent":[{"text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true,"type":"reference"},{"type":"text","text":" and define a new reference type."}]},{"inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"]}]}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"metadata":{"role":"article","roleHeading":"Article","title":"Custom References","modules":[{"name":"PotentCodables"}]},"kind":"article","references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"addAllowedTypes"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"text":".Type])","kind":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","abstract":[{"text":"Set the allowed types to the given array after mapping them using ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","isActive":true},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","title":"addAllowedTypes(_:)","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"title":"CustomRef","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/customref","navigatorTitle":[{"kind":"identifier","text":"CustomRef"}],"role":"symbol","kind":"symbol","abstract":[{"text":"The implementation type for ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"role":"symbol","url":"\/documentation\/potentcodables\/embeddedref","type":"topic","title":"EmbeddedRef","abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmbeddedRef"}]},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"title":"TypeIndex","url":"\/documentation\/potentcodables\/typeindex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeIndex"}],"role":"symbol","abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"type":"text","text":" "},{"text":"and generating type ids for types during encoding.","type":"text"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"role":"article","title":"Polymorphic Encoding & Decoding","kind":"article","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"title":"TypeKeyProvider","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeKeyProvider"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","kind":"symbol","url":"\/documentation\/potentcodables\/typekeyprovider","abstract":[{"text":"Provides a static ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","isActive":true},{"type":"text","text":" property that "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" "},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"type":"text","text":" "},{"text":"type name.","type":"text"}],"navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"role":"symbol","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"title":"DefaultTypeIndex","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultTypeIndex"}],"url":"\/documentation\/potentcodables\/defaulttypeindex","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","title":"PotentCodables","role":"collection","type":"topic","url":"\/documentation\/potentcodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"title":"Encoder\/Decoder Protocols","type":"topic","url":"\/documentation\/potentcodables\/protocols","role":"article","kind":"article","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"title":"DefaultTypeKey","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DefaultTypeKey","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypekey","abstract":[{"type":"text","text":"Default type key provider using "},{"code":"@type","type":"codeVoice"},{"text":" as the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","isActive":true}],"navigatorTitle":[{"text":"DefaultTypeKey","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"title":"Implementing New Data Formats","type":"topic","url":"\/documentation\/potentcodables\/implementing-formats","role":"article","kind":"article","abstract":[{"text":"Learn how to implement new ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"title":"CustomEmbeddedRef","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","url":"\/documentation\/potentcodables\/customembeddedref","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomEmbeddedRef"}],"role":"symbol","abstract":[{"text":"The implementation type for ","type":"text"},{"code":"EmbeddedRef","type":"codeVoice"},{"type":"text","text":" types."}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/Ref":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","navigatorTitle":[{"text":"Ref","kind":"identifier"}],"role":"symbol","url":"\/documentation\/potentcodables\/ref","type":"topic","title":"Ref","abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"title":"typeKey","type":"topic","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"typeKey"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","kind":"symbol","url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","abstract":[],"required":true},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"title":"mapAllowedTypes(_:)","type":"topic","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mapAllowedTypes"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"text":".Type]) -> [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"text":".Type]","kind":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}]},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"title":"valueKey","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"valueKey"},{"kind":"text","text":": "},{"text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier"}],"role":"symbol","abstract":[],"kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultValueKey","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"DefaultValueKey"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","type":"topic","title":"DefaultValueKey","abstract":[{"type":"text","text":"Default value key provider using "},{"code":"value","type":"codeVoice"},{"text":" as the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","isActive":true}],"url":"\/documentation\/potentcodables\/defaultvaluekey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","role":"symbol","url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","type":"topic","title":"typeKey","abstract":[],"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}]}}}