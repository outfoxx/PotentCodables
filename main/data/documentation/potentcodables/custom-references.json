{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Polymorphic references for wrapped values (using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":") use the name "},{"code":"@type","type":"codeVoice"},{"text":" for the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"field containing the type id and the name "},{"type":"codeVoice","code":"value"},{"text":" for the field containing the wrapped value. References for embedded","type":"text"},{"text":" ","type":"text"},{"text":"values (using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":") usethe name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the field containing the type id. Both reference"},{"type":"text","text":" "},{"type":"text","text":"structures use the "},{"code":"DefaultTypeIndex","type":"codeVoice"},{"text":" for type id generation and lookup.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" is simply a"},{"text":" ","type":"text"},{"type":"text","text":"type alias to the generic type "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"type":"text","text":" that uses ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":") for type"},{"type":"text","text":" "},{"text":"handling and the key providers (","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"type":"text","text":") and ("},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","isActive":true},{"type":"text","text":") to provide"},{"type":"text","text":" "},{"type":"text","text":"the names of the fields. Similarly, "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference"},{"type":"text","text":" is a type alias to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform"},{"type":"text","text":" "},{"text":"to how your data needs to be structured.","type":"text"}],"type":"paragraph"},{"text":"Customizing Keys","level":3,"anchor":"Customizing-Keys","type":"heading"},{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"text":" uses “key providers” to determine the names of the fields to use during encoding and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"type":"text","text":" "},{"type":"text","text":"simple types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here is the definition of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"text":" that provides the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":"."}]},{"syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"],"type":"codeListing"},{"inlineContent":[{"text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value","type":"text"},{"text":" ","type":"text"},{"text":"field of a ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"type":"codeVoice","code":"UnderscoreRef"},{"text":" that uses the names ","type":"text"},{"type":"codeVoice","code":"_type"},{"text":" for the type id field","type":"text"},{"type":"text","text":" "},{"text":"and the name ","type":"text"},{"code":"_value","type":"codeVoice"},{"type":"text","text":" for the value field."}]},{"code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"For ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"type":"text","text":" only a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider"},{"type":"text","text":" is required because all fields"},{"type":"text","text":" "},{"type":"text","text":"are contained in the same container."}],"type":"paragraph"},{"inlineContent":[{"text":"An embedded ","type":"text"},{"type":"codeVoice","code":"UnderscoreEmbeddedRef"},{"type":"text","text":" similar to the above example would be created similarly."}],"type":"paragraph"},{"type":"codeListing","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"],"syntax":"swift"},{"text":"Customizing Type Lookup","type":"heading","level":3,"anchor":"Customizing-Type-Lookup"},{"type":"paragraph","inlineContent":[{"text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"type":"text","text":" "},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"type":"text","text":" "},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"type":"paragraph","inlineContent":[{"text":"The default type index, used by ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":", is","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"type":"text","text":". The index has a simple global map of allowed types and their type ids."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":" uses the simple module local type name."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"DefaultTypeIndex"},{"text":"’s map of allowed types is initially empty and will not allow any custom types during","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"before decoding values."}]}],"style":"note","name":"Note"},{"inlineContent":[{"type":"text","text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex"},{"type":"text","text":" and define a new reference type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code."}]},{"syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"type":"codeListing"}]}],"kind":"article","seeAlsoSections":[{"title":"Advanced","anchor":"Advanced","generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"]}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"sections":[],"metadata":{"roleHeading":"Article","role":"article","title":"Custom References","modules":[{"name":"PotentCodables"}]},"references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeKey","kind":"identifier"}],"abstract":[{"text":"Default type key provider using ","type":"text"},{"type":"codeVoice","code":"@type"},{"type":"text","text":" as the "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","type":"reference"}],"role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","title":"DefaultTypeKey","url":"\/documentation\/potentcodables\/defaulttypekey","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeKey"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"text":" system","type":"text"}],"type":"topic","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","role":"collection","url":"\/documentation\/potentcodables"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultValueKey"}],"abstract":[{"type":"text","text":"Default value key provider using "},{"code":"value","type":"codeVoice"},{"type":"text","text":" as the "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","type":"reference","isActive":true}],"role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","title":"DefaultValueKey","url":"\/documentation\/potentcodables\/defaultvaluekey","navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addAllowedTypes","kind":"identifier"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type])"}],"type":"topic","title":"addAllowedTypes(_:)","role":"symbol","abstract":[{"text":"Set the allowed types to the given array after mapping them using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","type":"reference"},{"type":"text","text":"."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"abstract":[],"title":"valueKey","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"valueKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"typeKey"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"abstract":[],"required":true,"role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","title":"typeKey","url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"url":"\/documentation\/potentcodables\/protocols","kind":"article","type":"topic","title":"Encoder\/Decoder Protocols","role":"article","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"text":"s implement.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"abstract":[{"text":"Learn how to implement new ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" data formats easily.","type":"text"}],"role":"article","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","title":"Implementing New Data Formats","url":"\/documentation\/potentcodables\/implementing-formats","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"mapAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"text":".Type]) -> [","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":" : "},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type]"}],"type":"topic","title":"mapAllowedTypes(_:)","role":"symbol","abstract":[{"text":"Maps the given array of types to their generated type id and returns the dictionary.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","title":"CustomEmbeddedRef","url":"\/documentation\/potentcodables\/customembeddedref","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomEmbeddedRef"}],"abstract":[{"text":"The implementation type for ","type":"text"},{"code":"EmbeddedRef","type":"codeVoice"},{"type":"text","text":" types."}],"type":"topic","navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeKeyProvider"}],"abstract":[{"text":"Provides a static ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey"},{"text":" property that ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" "},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"text":" ","type":"text"},{"type":"text","text":"type name."}],"role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","title":"TypeKeyProvider","url":"\/documentation\/potentcodables\/typekeyprovider","navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"url":"\/documentation\/potentcodables\/typeindex","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TypeIndex","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TypeIndex"}],"type":"topic","title":"TypeIndex","role":"symbol","abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"type":"text","text":" "},{"text":"and generating type ids for types during encoding.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"role":"article","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","title":"Polymorphic Encoding & Decoding","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"title":"EmbeddedRef","url":"\/documentation\/potentcodables\/embeddedref","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EmbeddedRef","kind":"identifier"}],"abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AnyCodingKey","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"type":"topic","title":"typeKey","role":"symbol","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Ref"}],"abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","title":"Ref","url":"\/documentation\/potentcodables\/ref","navigatorTitle":[{"text":"Ref","kind":"identifier"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"url":"\/documentation\/potentcodables\/defaulttypeindex","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"type":"topic","title":"DefaultTypeIndex","role":"symbol","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"text":"by clients.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}],"abstract":[{"text":"The implementation type for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" types."}],"role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","title":"CustomRef","url":"\/documentation\/potentcodables\/customref","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"kind":"symbol"}}}