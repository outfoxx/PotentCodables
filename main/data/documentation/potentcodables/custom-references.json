{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced","title":"Advanced"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Custom References","modules":[{"name":"PotentCodables"}],"role":"article","roleHeading":"Article"},"kind":"article","sections":[],"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic references for wrapped values (using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":") use the name "},{"code":"@type","type":"codeVoice"},{"text":" for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"field containing the type id and the name "},{"code":"value","type":"codeVoice"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"type":"text","text":" "},{"type":"text","text":"values (using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"text":") usethe name ","type":"text"},{"code":"@type","type":"codeVoice"},{"text":" for the field containing the type id. Both reference","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"structures use the "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" for type id generation and lookup."}]},{"inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" is simply a"},{"type":"text","text":" "},{"type":"text","text":"type alias to the generic type "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"reference","isActive":true},{"type":"text","text":" that uses ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"text":") for type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"handling and the key providers ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"text":") and (","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","isActive":true,"type":"reference"},{"type":"text","text":") to provide"},{"type":"text","text":" "},{"type":"text","text":"the names of the fields. Similarly, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":" is a type alias to","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform","type":"text"},{"text":" ","type":"text"},{"text":"to how your data needs to be structured.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Customizing-Keys","level":3,"text":"Customizing Keys"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"text":" ","type":"text"},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"type":"text","text":" "},{"text":"simple types.","type":"text"}]},{"inlineContent":[{"text":"Here is the definition of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","type":"reference"},{"text":" that provides the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"text":" for","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"text":" ","type":"text"},{"text":"field of a ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example creates a new reference type ","type":"text"},{"type":"codeVoice","code":"UnderscoreRef"},{"type":"text","text":" that uses the names "},{"type":"codeVoice","code":"_type"},{"text":" for the type id field","type":"text"},{"type":"text","text":" "},{"text":"and the name ","type":"text"},{"type":"codeVoice","code":"_value"},{"type":"text","text":" for the value field."}]},{"syntax":"swift","type":"codeListing","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"inlineContent":[{"text":"For ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true,"type":"reference"},{"text":" only a ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true,"type":"reference"},{"text":" is required because all fields","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are contained in the same container."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An embedded "},{"code":"UnderscoreEmbeddedRef","type":"codeVoice"},{"type":"text","text":" similar to the above example would be created similarly."}]},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"type":"heading","text":"Customizing Type Lookup","anchor":"Customizing-Type-Lookup","level":3},{"type":"paragraph","inlineContent":[{"text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are","type":"text"},{"type":"text","text":" "},{"text":"transformed back into the requested types. To enable extensability, and ensure security during","type":"text"},{"type":"text","text":" "},{"text":"decoding, type ids are looked up using a type index. A type index simply generates type ids","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"type":"paragraph","inlineContent":[{"text":"The default type index, used by ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":", is"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference"},{"type":"text","text":". The index has a simple global map of allowed types and their type ids."},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":" uses the simple module local type name."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"DefaultTypeIndex","type":"codeVoice"},{"text":"’s map of allowed types is initially empty and will not allow any custom types during","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"before decoding values."}]}],"style":"note","name":"Note"},{"type":"paragraph","inlineContent":[{"text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex"},{"text":" and define a new reference type.","type":"text"}]},{"inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}],"type":"paragraph"},{"code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"syntax":"swift","type":"codeListing"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},"references":{"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","url":"\/documentation\/potentcodables\/typekeyprovider","title":"TypeKeyProvider","kind":"symbol","navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"type":"topic","abstract":[{"text":"Provides a static ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","isActive":true},{"type":"text","text":" property that "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"text":" ","type":"text"},{"text":"type name.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TypeKeyProvider","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CustomRef","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/customref","abstract":[{"text":"The implementation type for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" types."}],"title":"CustomRef","role":"symbol","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"type":"topic","url":"\/documentation\/potentcodables","role":"collection","title":"PotentCodables"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","title":"typeKey","kind":"symbol","type":"topic","abstract":[],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier","text":"AnyCodingKey"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeKey","kind":"identifier"}],"url":"\/documentation\/potentcodables\/defaulttypekey","kind":"symbol","title":"DefaultTypeKey","type":"topic","abstract":[{"type":"text","text":"Default type key provider using "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" as the "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","isActive":true}],"navigatorTitle":[{"text":"DefaultTypeKey","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier"}],"url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","kind":"symbol","title":"typeKey","required":true,"type":"topic","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"text":" ","type":"text"},{"type":"text","text":"by clients."}],"url":"\/documentation\/potentcodables\/defaulttypeindex","title":"DefaultTypeIndex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","url":"\/documentation\/potentcodables\/typeindex","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeIndex"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"text":" ","type":"text"},{"type":"text","text":"and generating type ids for types during encoding."}],"navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}],"kind":"symbol","title":"TypeIndex"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomEmbeddedRef","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/customembeddedref","title":"CustomEmbeddedRef","abstract":[{"text":"The implementation type for ","type":"text"},{"type":"codeVoice","code":"EmbeddedRef"},{"type":"text","text":" types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","role":"symbol","type":"topic","navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"abstract":[],"title":"valueKey","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"valueKey","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey"}],"role":"symbol","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultValueKey","kind":"identifier"}],"url":"\/documentation\/potentcodables\/defaultvaluekey","kind":"symbol","title":"DefaultValueKey","type":"topic","abstract":[{"text":"Default value key provider using ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" as the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","type":"reference","isActive":true}],"navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"type":"topic","role":"article","kind":"article","title":"Polymorphic Encoding & Decoding"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","type":"topic","title":"Implementing New Data Formats","role":"article","abstract":[{"text":"Learn how to implement new ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","url":"\/documentation\/potentcodables\/implementing-formats"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"type":"topic","role":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","title":"addAllowedTypes(_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addAllowedTypes"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"text":".Type])","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","type":"reference","isActive":true},{"type":"text","text":"."}]},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"title":"EmbeddedRef","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddedRef","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"url":"\/documentation\/potentcodables\/embeddedref","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Ref"}],"kind":"symbol","url":"\/documentation\/potentcodables\/ref","abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}],"title":"Ref","role":"symbol","navigatorTitle":[{"text":"Ref","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"role":"symbol","title":"mapAllowedTypes(_:)","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mapAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"text":".Type]) -> [","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"text":".Type]","kind":"text"}],"abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}],"url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"title":"Encoder\/Decoder Protocols","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/potentcodables\/protocols","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article"}}}