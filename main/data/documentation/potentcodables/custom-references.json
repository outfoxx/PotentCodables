{"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"generated":true,"anchor":"Advanced","title":"Advanced"}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Polymorphic references for wrapped values (using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"text":") use the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"text":" for the","type":"text"},{"text":" ","type":"text"},{"text":"field containing the type id and the name ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" for the field containing the wrapped value. References for embedded","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values (using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":") usethe name "},{"type":"codeVoice","code":"@type"},{"text":" for the field containing the type id. Both reference","type":"text"},{"type":"text","text":" "},{"type":"text","text":"structures use the "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"text":" for type id generation and lookup.","type":"text"}]},{"inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" is simply a","type":"text"},{"text":" ","type":"text"},{"text":"type alias to the generic type ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":" that uses (","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference"},{"text":") for type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"handling and the key providers ("},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","type":"reference","isActive":true},{"text":") and (","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","isActive":true},{"type":"text","text":") to provide"},{"text":" ","type":"text"},{"text":"the names of the fields. Similarly, ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"text":" is a type alias to","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform"},{"text":" ","type":"text"},{"text":"to how your data needs to be structured.","type":"text"}]},{"level":3,"text":"Customizing Keys","anchor":"Customizing-Keys","type":"heading"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"text":" ","type":"text"},{"text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simple types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is the definition of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"text":" that provides the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"text":" for","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"text":" ","type":"text"},{"text":"field of a ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The following example creates a new reference type ","type":"text"},{"type":"codeVoice","code":"UnderscoreRef"},{"type":"text","text":" that uses the names "},{"code":"_type","type":"codeVoice"},{"text":" for the type id field","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the name "},{"type":"codeVoice","code":"_value"},{"text":" for the value field.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"inlineContent":[{"text":"For ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":" only a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","type":"reference","isActive":true},{"type":"text","text":" is required because all fields"},{"type":"text","text":" "},{"text":"are contained in the same container.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"An embedded ","type":"text"},{"code":"UnderscoreEmbeddedRef","type":"codeVoice"},{"type":"text","text":" similar to the above example would be created similarly."}],"type":"paragraph"},{"code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"],"type":"codeListing","syntax":"swift"},{"anchor":"Customizing-Type-Lookup","text":"Customizing Type Lookup","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"type":"text","text":" "},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"text":" ","type":"text"},{"text":"decoding, type ids are looked up using a type index. A type index simply generates type ids","type":"text"},{"text":" ","type":"text"},{"text":"for types and provides the ability to lookup a type for a matching id.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The default type index, used by "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":", is","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference","isActive":true},{"type":"text","text":". The index has a simple global map of allowed types and their type ids."},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":" uses the simple module local type name."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"DefaultTypeIndex","type":"codeVoice"},{"text":"’s map of allowed types is initially empty and will not allow any custom types during","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","isActive":true},{"text":" ","type":"text"},{"text":"before decoding values.","type":"text"}]}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true},{"type":"text","text":" and define a new reference type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code."}],"type":"paragraph"},{"syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"type":"codeListing"}],"kind":"content"}],"kind":"article","sections":[],"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Custom References"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},"references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","role":"symbol","abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"topic","kind":"symbol","title":"addAllowedTypes(_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"text":".Type])","kind":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"abstract":[],"type":"topic","kind":"symbol","required":true,"title":"typeKey","role":"symbol","url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"typeKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article","url":"\/documentation\/potentcodables\/protocols","kind":"article","title":"Encoder\/Decoder Protocols","abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"code":"Encoder","type":"codeVoice"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Decoder"},{"text":"s implement.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"role":"article","abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" data formats easily."}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","title":"Implementing New Data Formats","url":"\/documentation\/potentcodables\/implementing-formats","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"abstract":[{"type":"text","text":"Default type key provider using "},{"type":"codeVoice","code":"@type"},{"text":" as the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","type":"reference","isActive":true}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"DefaultTypeKey","kind":"identifier"}],"title":"DefaultTypeKey","role":"symbol","url":"\/documentation\/potentcodables\/defaulttypekey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","title":"Polymorphic Encoding & Decoding","abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}],"type":"topic","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","kind":"symbol","title":"mapAllowedTypes(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"mapAllowedTypes","kind":"identifier"},{"kind":"text","text":"(["},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"text":".Type]) -> [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":" : "},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"},{"text":".Type]","kind":"text"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"url":"\/documentation\/potentcodables\/typekeyprovider","abstract":[{"type":"text","text":"Provides a static "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","isActive":true,"type":"reference"},{"type":"text","text":" property that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"use to determine which key to use when encoding\/decoding the Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type name."}],"title":"TypeKeyProvider","role":"symbol","navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TypeKeyProvider","kind":"identifier"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"EmbeddedRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"title":"EmbeddedRef","role":"symbol","url":"\/documentation\/potentcodables\/embeddedref","navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"abstract":[{"type":"text","text":"The implementation type for "},{"code":"EmbeddedRef","type":"codeVoice"},{"type":"text","text":" types."}],"navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/potentcodables\/customembeddedref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","kind":"symbol","title":"CustomEmbeddedRef","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomEmbeddedRef"}]},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"title":"TypeIndex","navigatorTitle":[{"kind":"identifier","text":"TypeIndex"}],"type":"topic","abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"type":"text","text":" "},{"type":"text","text":"and generating type ids for types during encoding."}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TypeIndex","kind":"identifier"}],"url":"\/documentation\/potentcodables\/typeindex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","title":"valueKey","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"valueKey","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey"}],"role":"symbol","kind":"symbol","abstract":[]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","abstract":[],"title":"typeKey","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"title":"CustomRef","type":"topic","abstract":[{"type":"text","text":"The implementation type for "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"text":" types.","type":"text"}],"url":"\/documentation\/potentcodables\/customref","kind":"symbol","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables":{"title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"kind":"symbol","role":"collection","url":"\/documentation\/potentcodables","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"text":" ","type":"text"},{"type":"text","text":"by clients."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}],"kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex","title":"DefaultTypeIndex"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Ref"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"title":"Ref","role":"symbol","url":"\/documentation\/potentcodables\/ref","navigatorTitle":[{"text":"Ref","kind":"identifier"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"abstract":[{"text":"Default value key provider using ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" as the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","isActive":true}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"title":"DefaultValueKey","role":"symbol","url":"\/documentation\/potentcodables\/defaultvaluekey","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultValueKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey"}}}