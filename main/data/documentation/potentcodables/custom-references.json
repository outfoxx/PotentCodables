{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"sections":[],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},"seeAlsoSections":[{"title":"Advanced","anchor":"Advanced","generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"]}],"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"metadata":{"role":"article","title":"Custom References","modules":[{"name":"PotentCodables"}],"roleHeading":"Article"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Polymorphic references for wrapped values (using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"text":") use the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"text":" for the","type":"text"},{"type":"text","text":" "},{"text":"field containing the type id and the name ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"text":" ","type":"text"},{"text":"values (using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"text":") usethe name ","type":"text"},{"code":"@type","type":"codeVoice"},{"text":" for the field containing the type id. Both reference","type":"text"},{"text":" ","type":"text"},{"text":"structures use the ","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" for type id generation and lookup."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" is simply a"},{"text":" ","type":"text"},{"text":"type alias to the generic type ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"text":" that uses (","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference","isActive":true},{"type":"text","text":") for type"},{"type":"text","text":" "},{"type":"text","text":"handling and the key providers ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"text":") and (","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","isActive":true,"type":"reference"},{"type":"text","text":") to provide"},{"type":"text","text":" "},{"text":"the names of the fields. Similarly, ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":" is a type alias to"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform"},{"type":"text","text":" "},{"text":"to how your data needs to be structured.","type":"text"}]},{"type":"heading","level":3,"text":"Customizing Keys","anchor":"Customizing-Keys"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"type":"text","text":" "},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"type":"text","text":" "},{"type":"text","text":"simple types."}],"type":"paragraph"},{"inlineContent":[{"text":"Here is the definition of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"type":"text","text":" that provides the name "},{"type":"codeVoice","code":"@type"},{"text":" for","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"type":"text","text":" "},{"type":"text","text":"field of a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"type":"codeVoice","code":"UnderscoreRef"},{"type":"text","text":" that uses the names "},{"type":"codeVoice","code":"_type"},{"text":" for the type id field","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the name "},{"code":"_value","type":"codeVoice"},{"type":"text","text":" for the value field."}]},{"syntax":"swift","type":"codeListing","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"inlineContent":[{"type":"text","text":"For "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"type":"text","text":" only a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true,"type":"reference"},{"text":" is required because all fields","type":"text"},{"type":"text","text":" "},{"text":"are contained in the same container.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An embedded ","type":"text"},{"code":"UnderscoreEmbeddedRef","type":"codeVoice"},{"type":"text","text":" similar to the above example would be created similarly."}]},{"type":"codeListing","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"],"syntax":"swift"},{"type":"heading","anchor":"Customizing-Type-Lookup","level":3,"text":"Customizing Type Lookup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"type":"text","text":" "},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"text":" ","type":"text"},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"text":" ","type":"text"},{"text":"for types and provides the ability to lookup a type for a matching id.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The default type index, used by ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":", is"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"text":". The index has a simple global map of allowed types and their type ids.","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference"},{"type":"text","text":" uses the simple module local type name."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":"’s map of allowed types is initially empty and will not allow any custom types during"},{"text":" ","type":"text"},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},{"text":" ","type":"text"},{"text":"before decoding values.","type":"text"}]}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","type":"reference"},{"text":" and define a new reference type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}]},{"syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"type":"codeListing"}],"kind":"content"}],"references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","abstract":[],"type":"topic","url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","title":"typeKey","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"typeKey"},{"kind":"text","text":": "},{"text":"AnyCodingKey","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"type":"text","text":"s implement."}],"kind":"article","type":"topic","url":"\/documentation\/potentcodables\/protocols","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article","title":"Encoder\/Decoder Protocols"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"title":"Polymorphic Encoding & Decoding","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","kind":"article","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","role":"article"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addAllowedTypes","kind":"identifier"},{"kind":"text","text":"(["},{"preciseIdentifier":"s:Se","kind":"typeIdentifier","text":"Decodable"},{"kind":"text","text":".Type])"}],"type":"topic","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","kind":"symbol","title":"addAllowedTypes(_:)","role":"symbol","abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"navigatorTitle":[{"text":"EmbeddedRef","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"title":"EmbeddedRef","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","url":"\/documentation\/potentcodables\/embeddedref","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"EmbeddedRef","kind":"identifier"}],"role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"type":"topic","role":"symbol","title":"DefaultValueKey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","kind":"symbol","abstract":[{"type":"text","text":"Default value key provider using "},{"type":"codeVoice","code":"value"},{"type":"text","text":" as the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey"}],"url":"\/documentation\/potentcodables\/defaultvaluekey","navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultValueKey"}]},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"type":"topic","role":"symbol","title":"CustomRef","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","kind":"symbol","abstract":[{"type":"text","text":"The implementation type for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" types."}],"url":"\/documentation\/potentcodables\/customref","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CustomRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"role":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","title":"mapAllowedTypes(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"mapAllowedTypes","kind":"identifier"},{"kind":"text","text":"(["},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"},{"text":".Type]) -> [","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"text":".Type]","kind":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","abstract":[{"text":"Maps the given array of types to their generated type id and returns the dictionary.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"abstract":[{"text":"The implementation type for ","type":"text"},{"type":"codeVoice","code":"EmbeddedRef"},{"type":"text","text":" types."}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","title":"CustomEmbeddedRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"CustomEmbeddedRef","kind":"identifier"}],"navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/customembeddedref"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"title":"valueKey","kind":"symbol","abstract":[],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","type":"topic","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"valueKey"},{"text":": ","kind":"text"},{"text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","role":"symbol","title":"typeKey","kind":"symbol","type":"topic","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","required":true,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AnyCodingKey","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}]},"doc://PotentCodables/documentation/PotentCodables/Ref":{"url":"\/documentation\/potentcodables\/ref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","title":"Ref","navigatorTitle":[{"text":"Ref","kind":"identifier"}],"abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Ref"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TypeIndex","kind":"identifier"}],"kind":"symbol","title":"TypeIndex","abstract":[{"text":"Provides static functions for looking up types by id for decoding","type":"text"},{"text":" ","type":"text"},{"text":"and generating type ids for types during encoding.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}],"url":"\/documentation\/potentcodables\/typeindex","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"abstract":[{"type":"text","text":"Learn how to implement new "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" data formats easily."}],"role":"article","type":"topic","url":"\/documentation\/potentcodables\/implementing-formats","kind":"article","title":"Implementing New Data Formats","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"role":"symbol","url":"\/documentation\/potentcodables\/typekeyprovider","type":"topic","abstract":[{"text":"Provides a static ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","isActive":true,"type":"reference"},{"type":"text","text":" property that "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" "},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"text":" ","type":"text"},{"text":"type name.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TypeKeyProvider"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","title":"TypeKeyProvider","kind":"symbol","navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","abstract":[{"text":"Default type key provider using ","type":"text"},{"code":"@type","type":"codeVoice"},{"type":"text","text":" as the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"}],"type":"topic","url":"\/documentation\/potentcodables\/defaulttypekey","title":"DefaultTypeKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultTypeKey","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"DefaultTypeKey"}],"role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"url":"\/documentation\/potentcodables\/defaulttypeindex","title":"DefaultTypeIndex","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"type":"topic","abstract":[{"text":"Default type index that uses a simple global map that can be updated","type":"text"},{"text":" ","type":"text"},{"text":"by clients.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","kind":"symbol","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables":{"title":"PotentCodables","kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","url":"\/documentation\/potentcodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]}}}