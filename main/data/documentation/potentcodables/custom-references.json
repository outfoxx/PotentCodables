{"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"PotentCodables"}],"roleHeading":"Article","role":"article","title":"Custom References"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced","title":"Advanced","generated":true}],"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Polymorphic references for wrapped values (using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":") use the name "},{"code":"@type","type":"codeVoice"},{"type":"text","text":" for the"},{"text":" ","type":"text"},{"text":"field containing the type id and the name ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"type":"text","text":" "},{"type":"text","text":"values (using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"text":") usethe name ","type":"text"},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the field containing the type id. Both reference"},{"type":"text","text":" "},{"text":"structures use the ","type":"text"},{"code":"DefaultTypeIndex","type":"codeVoice"},{"type":"text","text":" for type id generation and lookup."}]},{"inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" is simply a"},{"text":" ","type":"text"},{"text":"type alias to the generic type ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"text":" that uses (","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"text":") for type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"handling and the key providers ("},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","type":"reference"},{"type":"text","text":") and ("},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","type":"reference"},{"text":") to provide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the names of the fields. Similarly, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":" is a type alias to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform"},{"type":"text","text":" "},{"type":"text","text":"to how your data needs to be structured."}],"type":"paragraph"},{"anchor":"Customizing-Keys","type":"heading","text":"Customizing Keys","level":3},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"text":" uses “key providers” to determine the names of the fields to use during encoding and","type":"text"},{"text":" ","type":"text"},{"text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"simple types."}]},{"inlineContent":[{"type":"text","text":"Here is the definition of the "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"text":" that provides the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"field of a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"code":"UnderscoreRef","type":"codeVoice"},{"type":"text","text":" that uses the names "},{"code":"_type","type":"codeVoice"},{"text":" for the type id field","type":"text"},{"type":"text","text":" "},{"text":"and the name ","type":"text"},{"type":"codeVoice","code":"_value"},{"text":" for the value field.","type":"text"}],"type":"paragraph"},{"code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"For ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"text":" only a ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true},{"text":" is required because all fields","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are contained in the same container."}],"type":"paragraph"},{"inlineContent":[{"text":"An embedded ","type":"text"},{"code":"UnderscoreEmbeddedRef","type":"codeVoice"},{"text":" similar to the above example would be created similarly.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"level":3,"text":"Customizing Type Lookup","anchor":"Customizing-Type-Lookup","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"text":" ","type":"text"},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"type":"text","text":" "},{"text":"decoding, type ids are looked up using a type index. A type index simply generates type ids","type":"text"},{"type":"text","text":" "},{"text":"for types and provides the ability to lookup a type for a matching id.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index, used by "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":", is"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference"},{"text":". The index has a simple global map of allowed types and their type ids.","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"text":" uses the simple module local type name.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex"},{"text":"’s map of allowed types is initially empty and will not allow any custom types during","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},{"text":" ","type":"text"},{"text":"before decoding values.","type":"text"}]}],"style":"note","type":"aside"},{"inlineContent":[{"type":"text","text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true},{"type":"text","text":" and define a new reference type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"]}]}],"sections":[],"kind":"article","references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","role":"symbol","title":"addAllowedTypes(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addAllowedTypes"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"text":".Type])","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)"},{"text":".","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"type":"text","text":" "},{"type":"text","text":"and generating type ids for types during encoding."}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","url":"\/documentation\/potentcodables\/typeindex","title":"TypeIndex","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeIndex"}],"navigatorTitle":[{"kind":"identifier","text":"TypeIndex"}]},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"role":"symbol","navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}],"kind":"symbol","title":"CustomEmbeddedRef","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","abstract":[{"type":"text","text":"The implementation type for "},{"type":"codeVoice","code":"EmbeddedRef"},{"text":" types.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomEmbeddedRef"}],"type":"topic","url":"\/documentation\/potentcodables\/customembeddedref"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"title":"Encoder\/Decoder Protocols","type":"topic","url":"\/documentation\/potentcodables\/protocols","kind":"article","abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"text":"s implement.","type":"text"}],"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Default value key provider using "},{"code":"value","type":"codeVoice"},{"text":" as the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey"}],"title":"DefaultValueKey","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultValueKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"role":"symbol","url":"\/documentation\/potentcodables\/defaultvaluekey"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","url":"\/documentation\/potentcodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","role":"collection","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}],"role":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","title":"mapAllowedTypes(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"mapAllowedTypes","kind":"identifier"},{"kind":"text","text":"(["},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"kind":"text","text":".Type]) -> ["},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"text":".Type]","kind":"text"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"title":"Polymorphic Encoding & Decoding","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","type":"topic","abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article","role":"article"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"navigatorTitle":[{"kind":"identifier","text":"DefaultTypeKey"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeKey","kind":"identifier"}],"type":"topic","url":"\/documentation\/potentcodables\/defaulttypekey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","kind":"symbol","abstract":[{"text":"Default type key provider using ","type":"text"},{"code":"@type","type":"codeVoice"},{"text":" as the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"}],"title":"DefaultTypeKey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"type":"topic","abstract":[],"url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","title":"typeKey","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeIndex"}],"url":"\/documentation\/potentcodables\/defaulttypeindex","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"title":"DefaultTypeIndex","role":"symbol","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","url":"\/documentation\/potentcodables\/implementing-formats","abstract":[{"text":"Learn how to implement new ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" data formats easily.","type":"text"}],"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","title":"Implementing New Data Formats","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"abstract":[{"type":"text","text":"The implementation type for "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"text":" types.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/customref","title":"CustomRef","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"kind":"symbol","title":"EmbeddedRef","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmbeddedRef"}],"type":"topic","url":"\/documentation\/potentcodables\/embeddedref"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"navigatorTitle":[{"text":"Ref","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Ref"}],"title":"Ref","abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","kind":"symbol","url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","abstract":[],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier","text":"AnyCodingKey"}],"required":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","kind":"symbol","type":"topic","role":"symbol","title":"typeKey"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"type":"topic","role":"symbol","title":"TypeKeyProvider","navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TypeKeyProvider","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Provides a static ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","type":"reference","isActive":true},{"text":" property that ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"text":" ","type":"text"},{"type":"text","text":"type name."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","url":"\/documentation\/potentcodables\/typekeyprovider"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"kind":"symbol","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","role":"symbol","title":"valueKey","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"valueKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"type":"topic","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey"}}}