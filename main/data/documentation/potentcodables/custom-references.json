{"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"title":"Advanced","anchor":"Advanced"}],"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"kind":"article","metadata":{"modules":[{"name":"PotentCodables"}],"roleHeading":"Article","role":"article","title":"Custom References"},"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic references for wrapped values (using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":") use the name "},{"code":"@type","type":"codeVoice"},{"type":"text","text":" for the"},{"text":" ","type":"text"},{"type":"text","text":"field containing the type id and the name "},{"type":"codeVoice","code":"value"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"text":" ","type":"text"},{"type":"text","text":"values (using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"text":") usethe name ","type":"text"},{"code":"@type","type":"codeVoice"},{"type":"text","text":" for the field containing the type id. Both reference"},{"text":" ","type":"text"},{"type":"text","text":"structures use the "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" for type id generation and lookup."}]},{"inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"text":" is simply a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type alias to the generic type "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":" that uses (","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":") for type"},{"text":" ","type":"text"},{"text":"handling and the key providers (","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"type":"text","text":") and ("},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","type":"reference"},{"type":"text","text":") to provide"},{"text":" ","type":"text"},{"text":"the names of the fields. Similarly, ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" is a type alias to"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to how your data needs to be structured."}],"type":"paragraph"},{"text":"Customizing Keys","level":3,"type":"heading","anchor":"Customizing-Keys"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"type":"text","text":" "},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"type":"text","text":" "},{"text":"simple types.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is the definition of the "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","type":"reference"},{"type":"text","text":" that provides the name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":".","type":"text"}]},{"syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"text":" ","type":"text"},{"type":"text","text":"field of a "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"code":"UnderscoreRef","type":"codeVoice"},{"type":"text","text":" that uses the names "},{"type":"codeVoice","code":"_type"},{"text":" for the type id field","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the name "},{"type":"codeVoice","code":"_value"},{"type":"text","text":" for the value field."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"inlineContent":[{"text":"For ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"type":"text","text":" only a "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true},{"text":" is required because all fields","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are contained in the same container."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An embedded "},{"code":"UnderscoreEmbeddedRef","type":"codeVoice"},{"text":" similar to the above example would be created similarly.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"level":3,"type":"heading","text":"Customizing Type Lookup","anchor":"Customizing-Type-Lookup"},{"inlineContent":[{"text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"text":" ","type":"text"},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"type":"text","text":" "},{"text":"for types and provides the ability to lookup a type for a matching id.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The default type index, used by ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":", is"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"type":"text","text":". The index has a simple global map of allowed types and their type ids."},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":" uses the simple module local type name."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"DefaultTypeIndex"},{"text":"’s map of allowed types is initially empty and will not allow any custom types during","type":"text"},{"type":"text","text":" "},{"text":"decoding. You must explicitly update the map of allowed types using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"before decoding values.","type":"text"}]}],"style":"note"},{"inlineContent":[{"type":"text","text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true},{"type":"text","text":" and define a new reference type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}]},{"code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"sections":[],"references":{"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","role":"article","title":"Polymorphic Encoding & Decoding"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"url":"\/documentation\/potentcodables\/defaulttypeindex","type":"topic","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultTypeIndex","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","title":"DefaultTypeIndex","abstract":[{"text":"Default type index that uses a simple global map that can be updated","type":"text"},{"type":"text","text":" "},{"text":"by clients.","type":"text"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","url":"\/documentation\/potentcodables\/ref","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Ref","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Ref"}],"title":"Ref","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"type":"topic","abstract":[{"text":"Default value key provider using ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" as the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultValueKey"}],"url":"\/documentation\/potentcodables\/defaultvaluekey","title":"DefaultValueKey","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"title":"Encoder\/Decoder Protocols","url":"\/documentation\/potentcodables\/protocols","kind":"article","type":"topic","abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"type":"codeVoice","code":"Encoder"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s implement."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","url":"\/documentation\/potentcodables","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"type":"topic","role":"collection"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"title":"CustomRef","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomRef"}],"kind":"symbol","url":"\/documentation\/potentcodables\/customref","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"The implementation type for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","url":"\/documentation\/potentcodables\/typekeyprovider","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TypeKeyProvider"}],"navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"title":"TypeKeyProvider","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Provides a static "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","isActive":true,"type":"reference"},{"type":"text","text":" property that "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" "},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"type":"text","text":" "},{"text":"type name.","type":"text"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"role":"symbol","abstract":[{"type":"text","text":"The implementation type for "},{"type":"codeVoice","code":"EmbeddedRef"},{"text":" types.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomEmbeddedRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/customembeddedref","type":"topic","title":"CustomEmbeddedRef","kind":"symbol","navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","kind":"article","role":"article","url":"\/documentation\/potentcodables\/implementing-formats","abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"type":"topic","title":"Implementing New Data Formats"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","title":"typeKey","abstract":[],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"required":true,"role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"typeKey"},{"kind":"text","text":": "},{"text":"AnyCodingKey","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","kind":"symbol","abstract":[],"title":"typeKey"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"url":"\/documentation\/potentcodables\/typeindex","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeIndex"}],"abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"text":" ","type":"text"},{"text":"and generating type ids for types during encoding.","type":"text"}],"title":"TypeIndex","type":"topic","role":"symbol","navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"role":"symbol","abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddedRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/embeddedref","type":"topic","title":"EmbeddedRef","kind":"symbol","navigatorTitle":[{"text":"EmbeddedRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"title":"mapAllowedTypes(_:)","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"mapAllowedTypes","kind":"identifier"},{"kind":"text","text":"(["},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"kind":"text","text":".Type]) -> ["},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"text":".Type]","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Maps the given array of types to their generated type id and returns the dictionary."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"abstract":[],"url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"valueKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"title":"valueKey","kind":"symbol","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addAllowedTypes"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"kind":"text","text":".Type])"}],"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","title":"addAllowedTypes(_:)","abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","isActive":true},{"text":".","type":"text"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"title":"DefaultTypeKey","url":"\/documentation\/potentcodables\/defaulttypekey","kind":"symbol","navigatorTitle":[{"text":"DefaultTypeKey","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultTypeKey"}],"type":"topic","abstract":[{"text":"Default type key provider using ","type":"text"},{"code":"@type","type":"codeVoice"},{"type":"text","text":" as the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","role":"symbol"}}}