{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Custom References"},"seeAlsoSections":[{"generated":true,"anchor":"Advanced","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"title":"Advanced"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic references for wrapped values (using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":") use the name "},{"type":"codeVoice","code":"@type"},{"text":" for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"field containing the type id and the name "},{"type":"codeVoice","code":"value"},{"type":"text","text":" for the field containing the wrapped value. References for embedded"},{"text":" ","type":"text"},{"type":"text","text":"values (using "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference"},{"text":") usethe name ","type":"text"},{"code":"@type","type":"codeVoice"},{"type":"text","text":" for the field containing the type id. Both reference"},{"type":"text","text":" "},{"text":"structures use the ","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex"},{"text":" for type id generation and lookup.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"These names and the type id generation and lookup are fully customizable. In fact, ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" is simply a"},{"type":"text","text":" "},{"type":"text","text":"type alias to the generic type "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"type":"text","text":" that uses ("},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"type":"text","text":") for type"},{"text":" ","type":"text"},{"type":"text","text":"handling and the key providers ("},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","type":"reference"},{"type":"text","text":") and ("},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","isActive":true,"type":"reference"},{"text":") to provide","type":"text"},{"text":" ","type":"text"},{"text":"the names of the fields. Similarly, ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" is a type alias to"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform","type":"text"},{"type":"text","text":" "},{"text":"to how your data needs to be structured.","type":"text"}]},{"level":3,"text":"Customizing Keys","type":"heading","anchor":"Customizing-Keys"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true,"type":"reference"},{"type":"text","text":" uses “key providers” to determine the names of the fields to use during encoding and"},{"text":" ","type":"text"},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"type":"text","text":" "},{"type":"text","text":"simple types."}]},{"inlineContent":[{"type":"text","text":"Here is the definition of the "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"text":" that provides the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"text":" for","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value","type":"text"},{"text":" ","type":"text"},{"text":"field of a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following example creates a new reference type ","type":"text"},{"code":"UnderscoreRef","type":"codeVoice"},{"type":"text","text":" that uses the names "},{"type":"codeVoice","code":"_type"},{"text":" for the type id field","type":"text"},{"text":" ","type":"text"},{"text":"and the name ","type":"text"},{"type":"codeVoice","code":"_value"},{"type":"text","text":" for the value field."}]},{"syntax":"swift","type":"codeListing","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"type":"paragraph","inlineContent":[{"text":"For ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","type":"reference"},{"text":" only a ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true},{"type":"text","text":" is required because all fields"},{"type":"text","text":" "},{"type":"text","text":"are contained in the same container."}]},{"inlineContent":[{"text":"An embedded ","type":"text"},{"type":"codeVoice","code":"UnderscoreEmbeddedRef"},{"type":"text","text":" similar to the above example would be created similarly."}],"type":"paragraph"},{"type":"codeListing","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"],"syntax":"swift"},{"text":"Customizing Type Lookup","anchor":"Customizing-Type-Lookup","type":"heading","level":3},{"inlineContent":[{"text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"type":"text","text":" "},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"type":"text","text":" "},{"text":"for types and provides the ability to lookup a type for a matching id.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The default type index, used by "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference"},{"type":"text","text":", is"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true,"type":"reference"},{"text":". The index has a simple global map of allowed types and their type ids.","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":" uses the simple module local type name."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex"},{"text":"’s map of allowed types is initially empty and will not allow any custom types during","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"before decoding values."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true,"type":"reference"},{"type":"text","text":" and define a new reference type."}]},{"inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}],"type":"paragraph"},{"code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"type":"codeListing","syntax":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"kind":"article","references":{"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"role":"symbol","title":"typeKey","required":true,"kind":"symbol","url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","abstract":[],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"typeKey"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier","text":"AnyCodingKey"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","role":"symbol","url":"\/documentation\/potentcodables\/customembeddedref","type":"topic","abstract":[{"type":"text","text":"The implementation type for "},{"code":"EmbeddedRef","type":"codeVoice"},{"type":"text","text":" types."}],"title":"CustomEmbeddedRef","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomEmbeddedRef"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CustomEmbeddedRef"}]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","abstract":[{"text":"Learn how to implement new ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"url":"\/documentation\/potentcodables\/implementing-formats","kind":"article","role":"article","title":"Implementing New Data Formats","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TypeIndex","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/typeindex","abstract":[{"text":"Provides static functions for looking up types by id for decoding","type":"text"},{"text":" ","type":"text"},{"text":"and generating type ids for types during encoding.","type":"text"}],"title":"TypeIndex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","type":"topic","navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","abstract":[],"role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"typeKey"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier","text":"AnyCodingKey"}],"title":"typeKey","url":"\/documentation\/potentcodables\/defaulttypekey\/typekey"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"title":"addAllowedTypes(_:)","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"preciseIdentifier":"s:Se","text":"Decodable","kind":"typeIdentifier"},{"kind":"text","text":".Type])"}],"abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"type":"topic","abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"title":"EmbeddedRef","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"EmbeddedRef","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedRef"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","url":"\/documentation\/potentcodables\/embeddedref"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"text":" system","type":"text"}],"url":"\/documentation\/potentcodables","title":"PotentCodables","role":"collection","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"type":"topic","abstract":[{"type":"text","text":"Provides a static "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","isActive":true},{"type":"text","text":" property that "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"use to determine which key to use when encoding\/decoding the Swift","type":"text"},{"type":"text","text":" "},{"text":"type name.","type":"text"}],"title":"TypeKeyProvider","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypeKeyProvider"}],"navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","url":"\/documentation\/potentcodables\/typekeyprovider"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"text":"by clients.","type":"text"}],"title":"DefaultTypeIndex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"topic","navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"type":"topic","abstract":[{"text":"The implementation type for ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"text":" types.","type":"text"}],"title":"CustomRef","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomRef"}],"navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","url":"\/documentation\/potentcodables\/customref"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","abstract":[{"type":"text","text":"Default value key provider using "},{"type":"codeVoice","code":"value"},{"type":"text","text":" as the "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","type":"reference"}],"role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultValueKey"}],"navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"title":"DefaultValueKey","url":"\/documentation\/potentcodables\/defaultvaluekey"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"valueKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier","text":"AnyCodingKey"}],"role":"symbol","title":"valueKey","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"mapAllowedTypes","kind":"identifier"},{"kind":"text","text":"(["},{"preciseIdentifier":"s:Se","kind":"typeIdentifier","text":"Decodable"},{"text":".Type]) -> [","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type]"}],"role":"symbol","title":"mapAllowedTypes(_:)","abstract":[{"text":"Maps the given array of types to their generated type id and returns the dictionary.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"type":"topic","abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"title":"Ref","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Ref","kind":"identifier"}],"navigatorTitle":[{"text":"Ref","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"abstract":[{"text":"Default type key provider using ","type":"text"},{"code":"@type","type":"codeVoice"},{"type":"text","text":" as the "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","type":"reference","isActive":true}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","url":"\/documentation\/potentcodables\/defaulttypekey","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultTypeKey"}],"role":"symbol","title":"DefaultTypeKey","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeKey"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"title":"Polymorphic Encoding & Decoding","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"url":"\/documentation\/potentcodables\/polymorphicencodingdecoding"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","abstract":[{"type":"text","text":"Details of all the protocols PotentCodables "},{"type":"codeVoice","code":"Encoder"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"text":"s implement.","type":"text"}],"url":"\/documentation\/potentcodables\/protocols","kind":"article","role":"article","title":"Encoder\/Decoder Protocols","type":"topic"}}}