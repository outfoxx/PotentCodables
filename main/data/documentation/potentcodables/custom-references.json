{"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"generated":true,"title":"Advanced","anchor":"Advanced"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"PotentCodables"}],"title":"Custom References"},"abstract":[{"text":"Polymorphic references tailored to your data.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Polymorphic references for wrapped values (using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":") use the name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for the"},{"type":"text","text":" "},{"type":"text","text":"field containing the type id and the name "},{"code":"value","type":"codeVoice"},{"text":" for the field containing the wrapped value. References for embedded","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values (using "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":") usethe name "},{"type":"codeVoice","code":"@type"},{"text":" for the field containing the type id. Both reference","type":"text"},{"type":"text","text":" "},{"type":"text","text":"structures use the "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"text":" for type id generation and lookup.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference","isActive":true},{"type":"text","text":" is simply a"},{"text":" ","type":"text"},{"type":"text","text":"type alias to the generic type "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":" that uses (","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true,"type":"reference"},{"type":"text","text":") for type"},{"type":"text","text":" "},{"type":"text","text":"handling and the key providers ("},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","isActive":true},{"type":"text","text":") and ("},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","type":"reference"},{"type":"text","text":") to provide"},{"text":" ","type":"text"},{"type":"text","text":"the names of the fields. Similarly, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" is a type alias to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform"},{"text":" ","type":"text"},{"type":"text","text":"to how your data needs to be structured."}]},{"text":"Customizing Keys","type":"heading","level":3,"anchor":"Customizing-Keys"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"text":" uses “key providers” to determine the names of the fields to use during encoding and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"text":" ","type":"text"},{"text":"simple types.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here is the definition of the "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","type":"reference"},{"type":"text","text":" that provides the name "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" for"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value"},{"text":" ","type":"text"},{"type":"text","text":"field of a "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The following example creates a new reference type ","type":"text"},{"type":"codeVoice","code":"UnderscoreRef"},{"text":" that uses the names ","type":"text"},{"code":"_type","type":"codeVoice"},{"type":"text","text":" for the type id field"},{"type":"text","text":" "},{"text":"and the name ","type":"text"},{"code":"_value","type":"codeVoice"},{"type":"text","text":" for the value field."}]},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"type":"paragraph","inlineContent":[{"text":"For ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true,"type":"reference"},{"text":" only a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","type":"reference"},{"type":"text","text":" is required because all fields"},{"type":"text","text":" "},{"text":"are contained in the same container.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An embedded "},{"type":"codeVoice","code":"UnderscoreEmbeddedRef"},{"type":"text","text":" similar to the above example would be created similarly."}]},{"syntax":"swift","type":"codeListing","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"]},{"type":"heading","text":"Customizing Type Lookup","anchor":"Customizing-Type-Lookup","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"text":" ","type":"text"},{"text":"transformed back into the requested types. To enable extensability, and ensure security during","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"text":" ","type":"text"},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"type":"paragraph","inlineContent":[{"text":"The default type index, used by ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":", is"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex"},{"type":"text","text":". The index has a simple global map of allowed types and their type ids."},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"type":"text","text":" uses the simple module local type name."}]},{"type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":""},{"code":"DefaultTypeIndex","type":"codeVoice"},{"type":"text","text":"’s map of allowed types is initially empty and will not allow any custom types during"},{"type":"text","text":" "},{"text":"decoding. You must explicitly update the map of allowed types using ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","isActive":true},{"type":"text","text":" "},{"type":"text","text":"before decoding values."}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true},{"text":" and define a new reference type.","type":"text"}]},{"inlineContent":[{"text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"type":"codeListing"}],"kind":"content"}],"references":{"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"kind":"article","abstract":[{"type":"text","text":"Learn how to implement new "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" data formats easily."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","type":"topic","title":"Implementing New Data Formats","role":"article","url":"\/documentation\/potentcodables\/implementing-formats"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"url":"\/documentation\/potentcodables\/ref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","kind":"symbol","role":"symbol","title":"Ref","navigatorTitle":[{"text":"Ref","kind":"identifier"}],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Ref","kind":"identifier"}],"abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"abstract":[{"text":"Default type key provider using ","type":"text"},{"code":"@type","type":"codeVoice"},{"type":"text","text":" as the "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","isActive":true}],"title":"DefaultTypeKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","navigatorTitle":[{"text":"DefaultTypeKey","kind":"identifier"}],"url":"\/documentation\/potentcodables\/defaulttypekey","kind":"symbol","role":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","navigatorTitle":[{"text":"TypeIndex","kind":"identifier"}],"url":"\/documentation\/potentcodables\/typeindex","kind":"symbol","title":"TypeIndex","abstract":[{"text":"Provides static functions for looking up types by id for decoding","type":"text"},{"text":" ","type":"text"},{"text":"and generating type ids for types during encoding.","type":"text"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TypeIndex","kind":"identifier"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"abstract":[],"title":"valueKey","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"valueKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","kind":"symbol","role":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables":{"type":"topic","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" system"}],"url":"\/documentation\/potentcodables","role":"collection"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"abstract":[{"text":"Default value key provider using ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey"}],"title":"DefaultValueKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultValueKey","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"url":"\/documentation\/potentcodables\/defaultvaluekey","kind":"symbol","role":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"type":"topic","url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","required":true,"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"typeKey"},{"text":": ","kind":"text"},{"text":"AnyCodingKey","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"title":"typeKey","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"abstract":[{"text":"Maps the given array of types to their generated type id and returns the dictionary.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","kind":"symbol","title":"mapAllowedTypes(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"mapAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"kind":"text","text":".Type]) -> ["},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":" : "},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"},{"text":".Type]","kind":"text"}],"url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"title":"addAllowedTypes(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","type":"topic","abstract":[{"text":"Set the allowed types to the given array after mapping them using ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","type":"reference","isActive":true},{"type":"text","text":"."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addAllowedTypes"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Se","text":"Decodable"},{"text":".Type])","kind":"text"}]},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"kind":"article","abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"code":"Decoder","type":"codeVoice"},{"type":"text","text":"s implement."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","type":"topic","url":"\/documentation\/potentcodables\/protocols","title":"Encoder\/Decoder Protocols","role":"article"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","navigatorTitle":[{"text":"EmbeddedRef","kind":"identifier"}],"abstract":[{"text":"A decodable type for decoding polymorphic types that include an embedded type name value.","type":"text"}],"url":"\/documentation\/potentcodables\/embeddedref","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddedRef","kind":"identifier"}],"role":"symbol","title":"EmbeddedRef","type":"topic","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"url":"\/documentation\/potentcodables\/customref","navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"title":"CustomRef","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"topic","role":"symbol","abstract":[{"text":"The implementation type for ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" types.","type":"text"}]},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"role":"symbol","type":"topic","url":"\/documentation\/potentcodables\/customembeddedref","kind":"symbol","abstract":[{"type":"text","text":"The implementation type for "},{"type":"codeVoice","code":"EmbeddedRef"},{"type":"text","text":" types."}],"title":"CustomEmbeddedRef","navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomEmbeddedRef"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"title":"TypeKeyProvider","navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"url":"\/documentation\/potentcodables\/typekeyprovider","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Provides a static "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","type":"reference"},{"text":" property that ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"use to determine which key to use when encoding\/decoding the Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type name."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TypeKeyProvider","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypeindex","role":"symbol","title":"DefaultTypeIndex","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultTypeIndex","kind":"identifier"}],"abstract":[{"text":"Default type index that uses a simple global map that can be updated","type":"text"},{"type":"text","text":" "},{"text":"by clients.","type":"text"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}],"role":"article","type":"topic","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","kind":"article","title":"Polymorphic Encoding & Decoding"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","kind":"symbol","url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","role":"symbol","title":"typeKey","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"typeKey","kind":"identifier"},{"kind":"text","text":": "},{"text":"AnyCodingKey","kind":"typeIdentifier","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}],"abstract":[],"type":"topic"}}}