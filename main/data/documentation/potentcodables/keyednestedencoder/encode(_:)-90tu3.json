{"abstract":[{"text":"Encodes a single value of the given type.","type":"text"}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-90tu3"]}],"kind":"symbol","metadata":{"externalID":"s:14PotentCodables18KeyedNestedEncoderC6encodeyys6UInt64VKF","role":"symbol","modules":[{"name":"PotentCodables"}],"title":"encode(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"kind":"text","text":"("},{"text":"UInt64","preciseIdentifier":"s:s6UInt64V","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"roleHeading":"Instance Method","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables","doc:\/\/PotentCodables\/documentation\/PotentCodables\/KeyedNestedEncoder"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt64V","kind":"typeIdentifier","text":"UInt64"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"The value to encode.","type":"text"}],"type":"paragraph"}],"name":"value"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"style":"note","name":"Throws","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"EncodingError.invalidValue"},{"text":" if the given value is invalid in","type":"text"},{"text":" ","type":"text"},{"text":"the current context for this format.","type":"text"}]}]},{"name":"Precondition","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"May not be called after a previous "},{"code":"self.encode(_:)","type":"codeVoice"},{"type":"text","text":" "},{"text":"call.","type":"text"}]}]}]}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/KeyedNestedEncoder\/encode(_:)-90tu3","interfaceLanguage":"swift"},"references":{"doc://PotentCodables/documentation/PotentCodables/KeyedNestedEncoder/encode(_:)-90tu3":{"abstract":[{"type":"text","text":"Encodes a single value of the given type."}],"title":"encode(_:)","role":"symbol","url":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-90tu3","kind":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/KeyedNestedEncoder\/encode(_:)-90tu3","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s6UInt64V","kind":"typeIdentifier","text":"UInt64"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}]},"doc://PotentCodables/documentation/PotentCodables/KeyedNestedEncoder":{"role":"symbol","abstract":[],"kind":"symbol","type":"topic","url":"\/documentation\/potentcodables\/keyednestedencoder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"KeyedNestedEncoder","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"KeyedNestedEncoder"}],"title":"KeyedNestedEncoder","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/KeyedNestedEncoder"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","url":"\/documentation\/potentcodables","title":"PotentCodables","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"code":"Codable","type":"codeVoice"},{"text":" system","type":"text"}],"type":"topic","role":"collection"}}}