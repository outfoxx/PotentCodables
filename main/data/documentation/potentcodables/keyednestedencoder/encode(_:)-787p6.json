{"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to encode."}]}],"name":"value"}],"kind":"parameters"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"name":"Throws","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"EncodingError.invalidValue"},{"text":" if the given value is invalid in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the current context for this format."}],"type":"paragraph"}]},{"name":"Precondition","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"May not be called after a previous ","type":"text"},{"type":"codeVoice","code":"self.encode(_:)"},{"type":"text","text":" "},{"type":"text","text":"call."}]}],"style":"note"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Encodes a single value of the given type.","type":"text"}],"metadata":{"role":"symbol","title":"encode(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"externalID":"s:14PotentCodables18KeyedNestedEncoderC6encodeyys6UInt32VKF","roleHeading":"Instance Method","modules":[{"name":"PotentCodables"}],"symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables","doc:\/\/PotentCodables\/documentation\/PotentCodables\/KeyedNestedEncoder"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/KeyedNestedEncoder\/encode(_:)-787p6"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-787p6"]}],"references":{"doc://PotentCodables/documentation/PotentCodables/KeyedNestedEncoder":{"role":"symbol","navigatorTitle":[{"text":"KeyedNestedEncoder","kind":"identifier"}],"title":"KeyedNestedEncoder","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"KeyedNestedEncoder","kind":"identifier"}],"url":"\/documentation\/potentcodables\/keyednestedencoder","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/KeyedNestedEncoder","kind":"symbol","abstract":[]},"doc://PotentCodables/documentation/PotentCodables/KeyedNestedEncoder/encode(_:)-787p6":{"role":"symbol","title":"encode(_:)","url":"\/documentation\/potentcodables\/keyednestedencoder\/encode(_:)-787p6","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/KeyedNestedEncoder\/encode(_:)-787p6","abstract":[{"type":"text","text":"Encodes a single value of the given type."}],"type":"topic","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables":{"kind":"symbol","role":"collection","type":"topic","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","title":"PotentCodables","url":"\/documentation\/potentcodables"}}}