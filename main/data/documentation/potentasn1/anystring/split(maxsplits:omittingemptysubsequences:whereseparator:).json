{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" = true, "},{"text":"whereSeparator","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"isSeparator"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"},{"kind":"text","text":"]"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"maxSplits","content":[{"inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original collection containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"type":"text","text":" "},{"type":"text","text":"satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" predicate and for each element at the"},{"type":"text","text":" "},{"type":"text","text":"start or end of the collection satisfying the "},{"code":"isSeparator","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"predicate. The default value is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"omittingEmptySubsequences"},{"content":[{"inlineContent":[{"text":"A closure that takes an element as an argument and","type":"text"},{"type":"text","text":" "},{"text":"returns a Boolean value indicating whether the collection should be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"split at that element."}],"type":"paragraph"}],"name":"isSeparator"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"An array of subsequences, split from this collection’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"The resulting array consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Elements that are used to split the sequence are not returned as part of"},{"type":"text","text":" "},{"type":"text","text":"any subsequence."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"type":"text","text":" "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a string using a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"closure that matches spaces. The first use of "},{"type":"codeVoice","code":"split"},{"type":"text","text":" returns each word"},{"type":"text","text":" "},{"text":"that was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second example passes "},{"type":"codeVoice","code":"1"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" parameter, so the","type":"text"},{"type":"text","text":" "},{"text":"original string is split just once, into two new strings.","type":"text"}]},{"code":["print(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The final example passes "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" ","type":"text"},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"were repeated."}],"type":"paragraph"},{"type":"codeListing","code":["print(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"syntax":null},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of the collection."}],"type":"paragraph"}],"name":"Complexity"}],"kind":"content"}],"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"type":"text","text":" "},{"text":"that don’t contain elements satisfying the given predicate.","type":"text"}],"metadata":{"externalID":"s:SlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF::SYNTHESIZED::s:10PotentASN19AnyStringV","role":"symbol","extendedModule":"Swift","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"roleHeading":"Instance Method","modules":[{"name":"PotentASN1","relatedModules":["Swift"]}],"symbolKind":"method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentASN1","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://PotentCodables/documentation/PotentASN1":{"abstract":[{"type":"text","text":"Reading and writing ASN.1 encoded data, as well as schema oriented support for encoding and decoding."}],"type":"topic","kind":"symbol","role":"collection","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1","title":"PotentASN1","url":"\/documentation\/potentasn1"},"doc://PotentCodables/documentation/PotentASN1/AnyString/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"url":"\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"kind":"symbol","abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"text":" ","type":"text"},{"text":"that don’t contain elements satisfying the given predicate.","type":"text"}],"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)"},"doc://PotentCodables/documentation/PotentASN1/AnyString":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","url":"\/documentation\/potentasn1\/anystring","type":"topic","abstract":[{"type":"text","text":"Allows encoding "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" ASN.1 string value while allowing control of the"},{"type":"text","text":" "},{"text":"specific ASN.1 tag.","type":"text"}],"title":"AnyString","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyString"}],"navigatorTitle":[{"kind":"identifier","text":"AnyString"}]},"doc://PotentCodables/documentation/PotentASN1/AnyString/Collection-Implementations":{"url":"\/documentation\/potentasn1\/anystring\/collection-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations","kind":"article","title":"Collection Implementations","type":"topic"}}}