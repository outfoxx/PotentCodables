{"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"text":" ","type":"text"},{"text":"that don’t contain elements satisfying the given predicate.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" = true, "},{"kind":"externalParam","text":"whereSeparator"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"isSeparator"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"},{"text":"]","kind":"text"}],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original collection containing the remaining elements.","type":"text"},{"type":"text","text":" "},{"code":"maxSplits","type":"codeVoice"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is "},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"maxSplits"},{"name":"omittingEmptySubsequences","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"type":"text","text":" "},{"type":"text","text":"satisfying the "},{"code":"isSeparator","type":"codeVoice"},{"type":"text","text":" predicate and for each element at the"},{"type":"text","text":" "},{"text":"start or end of the collection satisfying the ","type":"text"},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" "},{"type":"text","text":"predicate. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"A closure that takes an element as an argument and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"returns a Boolean value indicating whether the collection should be"},{"type":"text","text":" "},{"type":"text","text":"split at that element."}],"type":"paragraph"}],"name":"isSeparator"}],"kind":"parameters"},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"An array of subsequences, split from this collection’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"The resulting array consists of at most "},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Elements that are used to split the sequence are not returned as part of"},{"text":" ","type":"text"},{"text":"any subsequence.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"type":"codeVoice","code":"maxSplits"},{"text":" and","type":"text"},{"type":"text","text":" "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a string using a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closure that matches spaces. The first use of "},{"code":"split","type":"codeVoice"},{"text":" returns each word","type":"text"},{"type":"text","text":" "},{"text":"that was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}],"type":"paragraph"},{"code":["print(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final example passes "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" "},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"text":" ","type":"text"},{"text":"were repeated.","type":"text"}]},{"type":"codeListing","code":["print(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"syntax":null},{"type":"aside","name":"Complexity","style":"note","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of the collection."}],"type":"paragraph"}]}]}],"variants":[{"paths":["\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"relatedModules":["Swift"],"name":"PotentASN1"}],"role":"symbol","extendedModule":"Swift","symbolKind":"method","externalID":"s:SlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF::SYNTHESIZED::s:10PotentASN19AnyStringV","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"whereSeparator"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"},{"text":"]","kind":"text"}],"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentASN1","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations"]]},"references":{"doc://PotentCodables/documentation/PotentASN1/AnyString":{"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","url":"\/documentation\/potentasn1\/anystring","title":"AnyString","abstract":[{"text":"Allows encoding ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" ASN.1 string value while allowing control of the"},{"type":"text","text":" "},{"type":"text","text":"specific ASN.1 tag."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyString","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"AnyString","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentASN1/AnyString/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"kind":"symbol","abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that don’t contain elements satisfying the given predicate."}],"url":"\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"type":"topic","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","role":"symbol"},"doc://PotentCodables/documentation/PotentASN1":{"kind":"symbol","title":"PotentASN1","role":"collection","abstract":[{"text":"Reading and writing ASN.1 encoded data, as well as schema oriented support for encoding and decoding.","type":"text"}],"url":"\/documentation\/potentasn1","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1"},"doc://PotentCodables/documentation/PotentASN1/AnyString/Collection-Implementations":{"abstract":[],"title":"Collection Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/potentasn1\/anystring\/collection-implementations","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations","kind":"article"}}}