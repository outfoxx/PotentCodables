{"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"PotentASN1"}],"roleHeading":"Instance Method","role":"symbol","externalID":"s:SlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF::SYNTHESIZED::s:10PotentASN19AnyStringV","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","symbolKind":"method"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentASN1","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":" = Int.max, ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":" = true, ","kind":"text"},{"kind":"externalParam","text":"whereSeparator"},{"text":" ","kind":"text"},{"text":"isSeparator","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"maxSplits","content":[{"inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"type":"text","text":" "},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"type":"text","text":" "},{"text":"of the original collection containing the remaining elements.","type":"text"},{"type":"text","text":" "},{"code":"maxSplits","type":"codeVoice"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"type":"text","text":" "},{"text":"is ","type":"text"},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"code":"false","type":"codeVoice"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"text":"returned in the result for each pair of consecutive elements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" predicate and for each element at the"},{"type":"text","text":" "},{"type":"text","text":"start or end of the collection satisfying the "},{"code":"isSeparator","type":"codeVoice"},{"type":"text","text":" "},{"text":"predicate. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"omittingEmptySubsequences"},{"name":"isSeparator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element as an argument and"},{"text":" ","type":"text"},{"type":"text","text":"returns a Boolean value indicating whether the collection should be"},{"type":"text","text":" "},{"text":"split at that element.","type":"text"}]}]}]},{"content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"text":"An array of subsequences, split from this collection’s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting array consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" subsequences.","type":"text"},{"text":" ","type":"text"},{"text":"Elements that are used to split the sequence are not returned as part of","type":"text"},{"type":"text","text":" "},{"text":"any subsequence.","type":"text"}]},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a string using a"},{"type":"text","text":" "},{"type":"text","text":"closure that matches spaces. The first use of "},{"code":"split","type":"codeVoice"},{"text":" returns each word","type":"text"},{"type":"text","text":" "},{"text":"that was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing"},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}],"type":"paragraph"},{"syntax":null,"code":["print(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The final example passes ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" ","type":"text"},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"type":"text","text":" "},{"type":"text","text":"were repeated."}]},{"syntax":null,"code":["print(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing"},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the collection."}],"type":"paragraph"}],"name":"Complexity"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that don’t contain elements satisfying the given predicate."}],"references":{"doc://PotentCodables/documentation/PotentASN1":{"type":"topic","kind":"symbol","title":"PotentASN1","role":"collection","url":"\/documentation\/potentasn1","abstract":[{"type":"text","text":"Reading and writing ASN.1 encoded data, as well as schema oriented support for encoding and decoding."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1"},"doc://PotentCodables/documentation/PotentASN1/AnyString/Collection-Implementations":{"role":"collectionGroup","type":"topic","url":"\/documentation\/potentasn1\/anystring\/collection-implementations","title":"Collection Implementations","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations","abstract":[],"kind":"article"},"doc://PotentCodables/documentation/PotentASN1/AnyString":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","url":"\/documentation\/potentasn1\/anystring","abstract":[{"text":"Allows encoding ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" ASN.1 string value while allowing control of the"},{"type":"text","text":" "},{"text":"specific ASN.1 tag.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyString"}],"title":"AnyString","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyString","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentASN1/AnyString/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"type":"topic","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","url":"\/documentation\/potentasn1\/anystring\/split(maxsplits:omittingemptysubsequences:whereseparator:)","abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"type":"text","text":" "},{"text":"that don’t contain elements satisfying the given predicate.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","role":"symbol"}}}