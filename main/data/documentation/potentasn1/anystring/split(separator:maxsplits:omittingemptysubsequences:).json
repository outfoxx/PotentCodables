{"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"type":"text","text":" "},{"text":"around elements equal to the given element.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(separator:maxSplits:omittingEmptySubsequences:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":" = true) -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa","kind":"typeIdentifier"},{"text":"]","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"text":"The element that should be split upon.","type":"text"}]}]},{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"text":" ","type":"text"},{"type":"text","text":"of the original collection containing the remaining elements."},{"text":" ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}]}]},{"name":"omittingEmptySubsequences","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"false","type":"codeVoice"},{"type":"text","text":", an empty subsequence is"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"elements in the collection and for each instance of "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" at"},{"text":" ","type":"text"},{"type":"text","text":"the start or end of the collection. If "},{"type":"codeVoice","code":"true"},{"text":", only nonempty","type":"text"},{"type":"text","text":" "},{"text":"subsequences are returned. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An array of subsequences, split from this collection’s"},{"text":" ","type":"text"},{"type":"text","text":"elements."}]}]},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting array consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" subsequences.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Elements that are used to split the collection are not returned as part"},{"text":" ","type":"text"},{"text":"of any subsequence.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" parameters when splitting a string at each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"space character (” “). The first use of "},{"code":"split","type":"codeVoice"},{"text":" returns each word that","type":"text"},{"type":"text","text":" "},{"text":"was originally separated by one or more spaces.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(separator: \" \"))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" parameter, so the"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}],"type":"paragraph"},{"code":["print(line.split(separator: \" \", maxSplits: 1))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final example passes "},{"type":"codeVoice","code":"false"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" ","type":"text"},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"type":"text","text":" "},{"text":"were repeated.","type":"text"}]},{"code":["print(line.split(separator: \" \", omittingEmptySubsequences: false))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"syntax":null,"type":"codeListing"},{"type":"aside","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the collection."}]}],"style":"note"}],"kind":"content"}],"metadata":{"roleHeading":"Instance Method","extendedModule":"Swift","role":"symbol","symbolKind":"method","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"},{"kind":"text","text":"]"}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)","externalID":"s:SlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF::SYNTHESIZED::s:10PotentASN19AnyStringV","modules":[{"name":"PotentASN1","relatedModules":["Swift"]}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentASN1","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/potentasn1\/anystring\/split(separator:maxsplits:omittingemptysubsequences:)"]}],"kind":"symbol","references":{"doc://PotentCodables/documentation/PotentASN1/AnyString":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","url":"\/documentation\/potentasn1\/anystring","type":"topic","abstract":[{"type":"text","text":"Allows encoding "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" ASN.1 string value while allowing control of the"},{"type":"text","text":" "},{"text":"specific ASN.1 tag.","type":"text"}],"title":"AnyString","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyString"}],"navigatorTitle":[{"kind":"identifier","text":"AnyString"}]},"doc://PotentCodables/documentation/PotentASN1/AnyString/Collection-Implementations":{"url":"\/documentation\/potentasn1\/anystring\/collection-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Collection-Implementations","kind":"article","title":"Collection Implementations","type":"topic"},"doc://PotentCodables/documentation/PotentASN1/AnyString/split(separator:maxSplits:omittingEmptySubsequences:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"kind":"symbol","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/potentasn1\/anystring\/split(separator:maxsplits:omittingemptysubsequences:)","role":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around elements equal to the given element."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/split(separator:maxSplits:omittingEmptySubsequences:)"},"doc://PotentCodables/documentation/PotentASN1":{"abstract":[{"type":"text","text":"Reading and writing ASN.1 encoded data, as well as schema oriented support for encoding and decoding."}],"type":"topic","kind":"symbol","role":"collection","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1","title":"PotentASN1","url":"\/documentation\/potentasn1"}}}