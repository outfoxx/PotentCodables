{"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..<"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"minimum","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"internalParam","text":"maximum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"Range","preciseIdentifier":"s:Sn","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The lower bound for the range.","type":"text"}],"type":"paragraph"}],"name":"minimum"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The upper bound for the range.","type":"text"}]}],"name":"maximum"}],"kind":"parameters"},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the half-open range operator ("},{"type":"codeVoice","code":"..<"},{"type":"text","text":") to create a range of any type"},{"text":" ","type":"text"},{"text":"that conforms to the ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol. This example creates a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Range<Double>"},{"text":" from zero up to, but not including, 5.0.","type":"text"}]},{"type":"codeListing","code":["let lessThanFive = 0.0..<5.0","print(lessThanFive.contains(3.14))  \/\/ Prints \"true\"","print(lessThanFive.contains(5.0))   \/\/ Prints \"false\""],"syntax":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"minimum <= maximum"},{"type":"text","text":"."}]}],"style":"note","name":"Precondition","type":"aside"}],"kind":"content"}],"metadata":{"externalID":"s:SLsE3zzloiySnyxGx_xtFZ::SYNTHESIZED::s:10PotentASN19AnyStringV","role":"symbol","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"PotentASN1"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"..<(_:_:)","roleHeading":"Operator","symbolKind":"op"},"abstract":[{"text":"Returns a half-open range that contains its lower bound but not its upper","type":"text"},{"text":" ","type":"text"},{"text":"bound.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentASN1","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Comparable-Implementations"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/potentasn1\/anystring\/'.._(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/.._(_:_:)"},"references":{"doc://PotentCodables/documentation/PotentASN1/AnyString/Comparable-Implementations":{"type":"topic","kind":"article","url":"\/documentation\/potentasn1\/anystring\/comparable-implementations","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Comparable-Implementations","title":"Comparable Implementations","role":"collectionGroup"},"doc://PotentCodables/documentation/PotentASN1/AnyString/.._(_:_:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/potentasn1\/anystring\/'.._(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"..<(_:_:)","type":"topic","abstract":[{"text":"Returns a half-open range that contains its lower bound but not its upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/.._(_:_:)"},"doc://PotentCodables/documentation/PotentASN1/AnyString":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","url":"\/documentation\/potentasn1\/anystring","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AnyString","kind":"identifier"}],"title":"AnyString","type":"topic","navigatorTitle":[{"text":"AnyString","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Allows encoding ","type":"text"},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" ASN.1 string value while allowing control of the"},{"text":" ","type":"text"},{"type":"text","text":"specific ASN.1 tag."}]},"doc://PotentCodables/documentation/PotentASN1":{"type":"topic","kind":"symbol","url":"\/documentation\/potentasn1","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1","role":"collection","abstract":[{"type":"text","text":"Reading and writing ASN.1 encoded data, as well as schema oriented support for encoding and decoding."}],"title":"PotentASN1"}}}