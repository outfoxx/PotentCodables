{"abstract":[{"type":"text","text":"Returns an array containing the non-"},{"type":"codeVoice","code":"nil"},{"text":" results of calling the given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformation with each element of this sequence."}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/compactMap(_:)","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"compactMap","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ElementOfResult","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"transform","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that accepts an element of this"},{"text":" ","type":"text"},{"text":"sequence as its argument and returns an optional value.","type":"text"}]}]}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An array of the non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" results of calling "},{"type":"codeVoice","code":"transform"},{"text":" ","type":"text"},{"type":"text","text":"with each element of the sequence."}]}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"Use this method to receive an array of non-optional values when your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformation produces an optional value."}]},{"inlineContent":[{"text":"In this example, note the difference in the result of using ","type":"text"},{"code":"map","type":"codeVoice"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"compactMap"},{"type":"text","text":" with a transformation that returns an optional "},{"code":"Int","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let possibleNumbers = [\"1\", \"2\", \"three\", \"\/\/\/4\/\/\/\", \"5\"]","","let mapped: [Int?] = possibleNumbers.map { str in Int(str) }","\/\/ [1, 2, nil, nil, 5]","","let compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }","\/\/ [1, 2, 5]"],"type":"codeListing"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of this sequence.","type":"text"}]}],"name":"Complexity","style":"note"}]}],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ElementOfResult"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"modules":[{"name":"PotentASN1","relatedModules":["Swift"]}],"title":"compactMap(_:)","roleHeading":"Instance Method","symbolKind":"method","externalID":"s:STsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF::SYNTHESIZED::s:10PotentASN19AnyStringV","extendedModule":"Swift"},"variants":[{"paths":["\/documentation\/potentasn1\/anystring\/compactmap(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentASN1","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Sequence-Implementations"]]},"references":{"doc://PotentCodables/documentation/PotentASN1/AnyString/compactMap(_:)":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/compactMap(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"compactMap"},{"text":"<","kind":"text"},{"text":"ElementOfResult","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"ElementOfResult"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"text":"ElementOfResult","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"url":"\/documentation\/potentasn1\/anystring\/compactmap(_:)","abstract":[{"text":"Returns an array containing the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" results of calling the given"},{"type":"text","text":" "},{"type":"text","text":"transformation with each element of this sequence."}],"title":"compactMap(_:)","role":"symbol"},"doc://PotentCodables/documentation/PotentASN1":{"type":"topic","title":"PotentASN1","abstract":[{"text":"Reading and writing ASN.1 encoded data, as well as schema oriented support for encoding and decoding.","type":"text"}],"url":"\/documentation\/potentasn1","role":"collection","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1"},"doc://PotentCodables/documentation/PotentASN1/AnyString":{"navigatorTitle":[{"kind":"identifier","text":"AnyString"}],"abstract":[{"text":"Allows encoding ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" ASN.1 string value while allowing control of the"},{"type":"text","text":" "},{"text":"specific ASN.1 tag.","type":"text"}],"role":"symbol","url":"\/documentation\/potentasn1\/anystring","title":"AnyString","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyString","kind":"identifier"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentASN1/AnyString/Sequence-Implementations":{"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/AnyString\/Sequence-Implementations","kind":"article","type":"topic","url":"\/documentation\/potentasn1\/anystring\/sequence-implementations","role":"collectionGroup","title":"Sequence Implementations"}}}