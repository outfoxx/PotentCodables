{"metadata":{"externalID":"s:SQsE2neoiySbx_xtFZ::SYNTHESIZED::s:10PotentASN16SchemaO","roleHeading":"Operator","extendedModule":"Swift","title":"!=(_:_:)","symbolKind":"op","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"modules":[{"name":"PotentASN1","relatedModules":["Swift"]}],"role":"symbol"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"internalParam","text":"rhs"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"inlineContent":[{"type":"text","text":"A value to compare."}],"type":"paragraph"}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Another value to compare."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inequality is the inverse of equality. For any values "},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":", "},{"type":"codeVoice","code":"a != b"},{"text":" ","type":"text"},{"type":"text","text":"implies that "},{"type":"codeVoice","code":"a == b"},{"type":"text","text":" is "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"This is the default implementation of the not-equal-to operator (","type":"text"},{"type":"codeVoice","code":"!="},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for any type that conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]}]}],"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/Schema\/!=(_:_:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/potentasn1\/schema\/!=(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentASN1","doc:\/\/PotentCodables\/documentation\/PotentASN1\/Schema","doc:\/\/PotentCodables\/documentation\/PotentASN1\/Schema\/Equatable-Implementations"]]},"kind":"symbol","abstract":[{"text":"Returns a Boolean value indicating whether two values are not equal.","type":"text"}],"references":{"doc://PotentCodables/documentation/PotentASN1/Schema/Equatable-Implementations":{"kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/Schema\/Equatable-Implementations","role":"collectionGroup","url":"\/documentation\/potentasn1\/schema\/equatable-implementations","title":"Equatable Implementations","abstract":[],"type":"topic"},"doc://PotentCodables/documentation/PotentASN1/Schema/!=(_:_:)":{"url":"\/documentation\/potentasn1\/schema\/!=(_:_:)","title":"!=(_:_:)","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/Schema\/!=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are not equal."}],"kind":"symbol","role":"symbol"},"doc://PotentCodables/documentation/PotentASN1/Schema":{"url":"\/documentation\/potentasn1\/schema","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1\/Schema","title":"Schema","abstract":[{"type":"text","text":"ASN.1 schema specification DSL."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Schema"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Schema"}]},"doc://PotentCodables/documentation/PotentASN1":{"url":"\/documentation\/potentasn1","type":"topic","title":"PotentASN1","abstract":[{"type":"text","text":"Reading and writing ASN.1 encoded data, as well as schema oriented support for encoding and decoding."}],"role":"collection","identifier":"doc:\/\/PotentCodables\/documentation\/PotentASN1","kind":"symbol"}}}