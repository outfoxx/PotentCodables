{"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"symbolKind":"op","roleHeading":"Operator","title":"!=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"role":"symbol","externalID":"s:SQsE2neoiySbx_xtFZ::SYNTHESIZED::s:10PotentYAML0B0O15CollectionStyleO","modules":[{"name":"PotentYAML","relatedModules":["Swift"]}],"extendedModule":"Swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"!="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"rhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value to compare."}]}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"text":"Another value to compare.","type":"text"}]}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Inequality is the inverse of equality. For any values "},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"a != b"},{"type":"text","text":" "},{"type":"text","text":"implies that "},{"code":"a == b","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This is the default implementation of the not-equal-to operator (","type":"text"},{"code":"!=","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"for any type that conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"type":"paragraph"}]}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/potentyaml\/yaml\/collectionstyle\/!=(_:_:)"]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentYAML","doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML","doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/CollectionStyle","doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/CollectionStyle\/Equatable-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/CollectionStyle\/!=(_:_:)"},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are not equal."}],"references":{"doc://PotentCodables/documentation/PotentYAML/YAML/CollectionStyle/Equatable-Implementations":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/CollectionStyle\/Equatable-Implementations","role":"collectionGroup","url":"\/documentation\/potentyaml\/yaml\/collectionstyle\/equatable-implementations","abstract":[],"kind":"article","title":"Equatable Implementations","type":"topic"},"doc://PotentCodables/documentation/PotentYAML/YAML/CollectionStyle/!=(_:_:)":{"url":"\/documentation\/potentyaml\/yaml\/collectionstyle\/!=(_:_:)","title":"!=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/CollectionStyle\/!=(_:_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are not equal."}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentYAML/YAML":{"type":"topic","url":"\/documentation\/potentyaml\/yaml","abstract":[{"text":"General YAML value.","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML","navigatorTitle":[{"text":"YAML","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"YAML","kind":"identifier"}],"title":"YAML","kind":"symbol","role":"symbol"},"doc://PotentCodables/documentation/PotentYAML":{"type":"topic","url":"\/documentation\/potentyaml","title":"PotentYAML","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML","role":"collection","abstract":[{"text":"YAML 1.2 support for both YAML & JSON in a single framework.","type":"text"}],"kind":"symbol"},"doc://PotentCodables/documentation/PotentYAML/YAML/CollectionStyle":{"kind":"symbol","abstract":[],"type":"topic","url":"\/documentation\/potentyaml\/yaml\/collectionstyle","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CollectionStyle"}],"navigatorTitle":[{"text":"CollectionStyle","kind":"identifier"}],"title":"YAML.CollectionStyle","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/CollectionStyle","role":"symbol"}}}