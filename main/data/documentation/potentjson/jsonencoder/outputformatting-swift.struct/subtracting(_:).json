{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentJSON","doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder","doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct","doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct\/SetAlgebra-Implementations"]]},"sections":[],"variants":[{"paths":["\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/subtracting(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct\/subtracting(_:)"},"metadata":{"roleHeading":"Instance Method","extendedModule":"Swift","role":"symbol","modules":[{"relatedModules":["Swift"],"name":"PotentJSON"}],"externalID":"s:s10SetAlgebraPsE11subtractingyxxF::SYNTHESIZED::s:10PotentJSON11JSONEncoderC16OutputFormattingV","title":"subtracting(_:)","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"subtracting"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]},"abstract":[{"text":"Returns a new set containing the elements of this set that do not occur","type":"text"},{"text":" ","type":"text"},{"text":"in the given set.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"subtracting","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"other","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"other","content":[{"inlineContent":[{"type":"text","text":"A set of the same type as the current set."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"A new set.","type":"text"}]}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"In the following example, the ","type":"text"},{"type":"codeVoice","code":"nonNeighbors"},{"type":"text","text":" set is made up of the"},{"type":"text","text":" "},{"type":"text","text":"elements of the "},{"type":"codeVoice","code":"employees"},{"text":" set that are not elements of ","type":"text"},{"code":"neighbors","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let employees: Set = [\"Alicia\", \"Bethany\", \"Chris\", \"Diana\", \"Eric\"]","let neighbors: Set = [\"Bethany\", \"Eric\", \"Forlani\", \"Greta\"]","let nonNeighbors = employees.subtracting(neighbors)","print(nonNeighbors)","\/\/ Prints \"[\"Diana\", \"Chris\", \"Alicia\"]\""],"type":"codeListing"}],"kind":"content"}],"references":{"doc://PotentCodables/documentation/PotentJSON/JSONEncoder/OutputFormatting-swift.struct":{"abstract":[{"text":"The formatting of the output JSON data.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct","title":"JSONEncoder.OutputFormatting","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"OutputFormatting","kind":"identifier"}],"navigatorTitle":[{"text":"OutputFormatting","kind":"identifier"}],"url":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct"},"doc://PotentCodables/documentation/PotentJSON/JSONEncoder/OutputFormatting-swift.struct/subtracting(_:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"subtracting"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct\/subtracting(_:)","type":"topic","title":"subtracting(_:)","url":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/subtracting(_:)","abstract":[{"type":"text","text":"Returns a new set containing the elements of this set that do not occur"},{"text":" ","type":"text"},{"text":"in the given set.","type":"text"}],"role":"symbol"},"doc://PotentCodables/documentation/PotentJSON":{"type":"topic","url":"\/documentation\/potentjson","role":"collection","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON","title":"PotentJSON","kind":"symbol","abstract":[{"text":"Enhanced, drop-in replacement for Foundationâ€™s JSON support in pure Swift.","type":"text"}]},"doc://PotentCodables/documentation/PotentJSON/JSONEncoder":{"navigatorTitle":[{"text":"JSONEncoder","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder","abstract":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder","type":"reference","isActive":true},{"type":"text","text":" facilitates the encoding of "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" values into JSON values."}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"JSONEncoder","kind":"identifier"}],"title":"JSONEncoder","url":"\/documentation\/potentjson\/jsonencoder"},"doc://PotentCodables/documentation/PotentJSON/JSONEncoder/OutputFormatting-swift.struct/SetAlgebra-Implementations":{"title":"SetAlgebra Implementations","url":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/setalgebra-implementations","kind":"article","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct\/SetAlgebra-Implementations","type":"topic"}}}