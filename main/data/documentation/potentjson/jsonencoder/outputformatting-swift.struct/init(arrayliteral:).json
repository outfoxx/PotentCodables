{"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct\/init(arrayLiteral:)"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentJSON","doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder","doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct","doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct\/SetAlgebra-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/init(arrayliteral:)"]}],"abstract":[{"text":"Creates a set containing the elements of the given array literal.","type":"text"}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"kind":"text","text":"("},{"text":"arrayLiteral","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:s10SetAlgebraP7ElementQa"},{"text":"...)","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"arrayLiteral","content":[{"inlineContent":[{"type":"text","text":"A list of elements of the new set."}],"type":"paragraph"}]}]},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"Do not call this initializer directly. It is used by the compiler when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you use an array literal. Instead, create a new set using an array"},{"text":" ","type":"text"},{"type":"text","text":"literal as its value by enclosing a comma-separated list of values in"},{"type":"text","text":" "},{"text":"square brackets. You can use an array literal anywhere a set is expected","type":"text"},{"text":" ","type":"text"},{"text":"by the type context.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Here, a set of strings is created from an array literal holding only","type":"text"},{"type":"text","text":" "},{"text":"strings:","type":"text"}],"type":"paragraph"},{"code":["let ingredients: Set = [\"cocoa beans\", \"sugar\", \"cocoa butter\", \"salt\"]","if ingredients.isSuperset(of: [\"sugar\", \"salt\"]) {","    print(\"Whatever it is, it's bound to be delicious!\")","}","\/\/ Prints \"Whatever it is, it's bound to be delicious!\""],"syntax":null,"type":"codeListing"}],"kind":"content"}],"metadata":{"externalID":"s:s10SetAlgebraPs7ElementQz012ArrayLiteralC0RtzrlE05arrayE0xAFd_tcfc::SYNTHESIZED::s:10PotentJSON11JSONEncoderC16OutputFormattingV","conformance":{"constraints":[{"type":"codeVoice","code":"ArrayLiteralElement"},{"text":" is ","type":"text"},{"code":"Self.Element","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"arrayLiteral"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:s10SetAlgebraP7ElementQa"},{"text":"...)","kind":"text"}],"extendedModule":"Swift","roleHeading":"Initializer","symbolKind":"init","title":"init(arrayLiteral:)","role":"symbol","modules":[{"name":"PotentJSON","relatedModules":["Swift"]}]},"references":{"doc://PotentCodables/documentation/PotentJSON/JSONEncoder/OutputFormatting-swift.struct/init(arrayLiteral:)":{"kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct\/init(arrayLiteral:)","url":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/init(arrayliteral:)","type":"topic","title":"init(arrayLiteral:)","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"ArrayLiteralElement","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Self.Element","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"Creates a set containing the elements of the given array literal."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"arrayLiteral"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:s10SetAlgebraP7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":"...)"}]},"doc://PotentCodables/documentation/PotentJSON/JSONEncoder/OutputFormatting-swift.struct/SetAlgebra-Implementations":{"title":"SetAlgebra Implementations","kind":"article","abstract":[],"url":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct\/setalgebra-implementations","role":"collectionGroup","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct\/SetAlgebra-Implementations","type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSONEncoder/OutputFormatting-swift.struct":{"kind":"symbol","abstract":[{"type":"text","text":"The formatting of the output JSON data."}],"title":"JSONEncoder.OutputFormatting","type":"topic","role":"symbol","url":"\/documentation\/potentjson\/jsonencoder\/outputformatting-swift.struct","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder\/OutputFormatting-swift.struct","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"OutputFormatting","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"OutputFormatting"}]},"doc://PotentCodables/documentation/PotentJSON/JSONEncoder":{"abstract":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder","isActive":true,"type":"reference"},{"type":"text","text":" facilitates the encoding of "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" values into JSON values."}],"role":"symbol","navigatorTitle":[{"text":"JSONEncoder","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JSONEncoder"}],"url":"\/documentation\/potentjson\/jsonencoder","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSONEncoder","title":"JSONEncoder","kind":"symbol"},"doc://PotentCodables/documentation/PotentJSON":{"kind":"symbol","title":"PotentJSON","role":"collection","abstract":[{"type":"text","text":"Enhanced, drop-in replacement for Foundationâ€™s JSON support in pure Swift."}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON","url":"\/documentation\/potentjson"}}}