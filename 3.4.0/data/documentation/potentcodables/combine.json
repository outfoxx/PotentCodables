{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When used on Apple platforms where the Combine framework is available, all the encoders conform to Combine’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"TopLevelEncoder"},{"type":"text","text":" and all decoders conform to its "},{"type":"codeVoice","code":"TopLevelDecoder"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to providing compatibility with Swift’s Combine framework these protocols are an easy way to allow"},{"type":"text","text":" "},{"type":"text","text":"interchanging support for data formats or frameworks without rewriting code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"TopLevelDecoder"},{"type":"text","text":" instead of a specific framework decoder would allow your code to work with whatever framework"},{"type":"text","text":" "},{"type":"text","text":"you need."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the following generic function"}]},{"type":"codeListing","syntax":"swift","code":["","func decodeFromNetwork<T: Decodable, D: TopLevelDecoder>(url: URL, decoder: D) async throws -> T where D.Input == Data {","  let (data, _) = try await URLSession.shared.data(from: url)","  return try decoder.decode(T.self, from: data)","}",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then use any PotentCodables data format decoder to decode values from the network request."}]},{"type":"codeListing","syntax":"swift","code":["import PotentCBOR","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.cbor\"), CBOR.Decoder.default)"]},{"type":"codeListing","syntax":"swift","code":["import PotentYAML","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.yaml\"), YAML.Decoder.default)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally "},{"type":"codeVoice","code":"decodeFromNetwork"},{"type":"text","text":" can be called with any conforming decoder from other frameworks, like"},{"type":"text","text":" "},{"type":"text","text":"Foundation’s "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.json\"), JSONDecoder())"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Combine","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Integration with Combine Framework."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Combine","role":"article","modules":[{"name":"PotentCodables"}]},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"references":{"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","title":"PotentCodables","abstract":[{"type":"text","text":"A potent set of implementations and extensions to the Swift "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables"}}}