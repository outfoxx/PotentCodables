{"kind":"article","sections":[],"metadata":{"modules":[{"name":"PotentCodables"}],"role":"article","roleHeading":"Article","title":"Combine"},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Combine","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Integration with Combine Framework."}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"When used on Apple platforms where the Combine framework is available, all the encoders conform to Combine’s","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"TopLevelEncoder"},{"type":"text","text":" and all decoders conform to its "},{"code":"TopLevelDecoder","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"In addition to providing compatibility with Swift’s Combine framework these protocols are an easy way to allow","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interchanging support for data formats or frameworks without rewriting code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"TopLevelDecoder"},{"type":"text","text":" instead of a specific framework decoder would allow your code to work with whatever framework"},{"text":" ","type":"text"},{"text":"you need.","type":"text"}]},{"inlineContent":[{"text":"Given the following generic function","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["","func decodeFromNetwork<T: Decodable, D: TopLevelDecoder>(url: URL, decoder: D) async throws -> T where D.Input == Data {","  let (data, _) = try await URLSession.shared.data(from: url)","  return try decoder.decode(T.self, from: data)","}",""]},{"type":"paragraph","inlineContent":[{"text":"You can then use any PotentCodables data format decoder to decode values from the network request.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import PotentCBOR","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.cbor\"), CBOR.Decoder.default)"]},{"code":["import PotentYAML","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.yaml\"), YAML.Decoder.default)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Additionally ","type":"text"},{"type":"codeVoice","code":"decodeFromNetwork"},{"text":" can be called with any conforming decoder from other frameworks, like","type":"text"},{"text":" ","type":"text"},{"text":"Foundation’s ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["import Foundation","","let engine: Engine = decodeFromNetwork(URL(string: \"https:\/\/example.com\/engine\/1.json\"), JSONDecoder())"],"syntax":"swift","type":"codeListing"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"role":"collection","title":"PotentCodables","url":"\/documentation\/potentcodables","kind":"symbol","type":"topic"}}}