{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"Each decoder has an in memory representation known as the “tree” value. The great thing about tree values is that they","type":"text"},{"type":"text","text":" "},{"type":"text","text":"hold the values in their exact serialized representation.  For example, "},{"code":"JSON","type":"codeVoice"},{"type":"text","text":" tree values store numbers as a"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number"},{"type":"text","text":" that stores the exact number value as a string along with a number of other"},{"text":" ","type":"text"},{"text":"properties for helping the conversion of strings to integer or floating point numbers. Accessing this","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","isActive":true,"type":"reference"},{"text":" and reading the exact decimal value serialized in JSON is available from tree values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The decoders support accessing the tree value using specializations of the protocol"},{"text":" ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference","isActive":true},{"text":" which extends the  ","type":"text"},{"code":"SingleValueDecodingContainer","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"text":"Decoding ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true},{"text":" values using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer"},{"text":" as follows:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.jsonValue = try treeContainer.decodeTreeValue() as! JSON","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each tree value has the ability to “unwrap” itself (using it’s "},{"type":"codeVoice","code":"unwrapped"},{"type":"text","text":" property) into it’s the best available"},{"type":"text","text":" "},{"text":"standard Swift type, returned as an  ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":". As an example, unwrappingthe the JSON value ","type":"text"},{"type":"codeVoice","code":"123.456"},{"text":" result in a Swift","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Tree values are returned as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":" to allow easy support any possible tree value. For this reason the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","isActive":true},{"text":" has a convenience method to access the unwrapped tree value without","type":"text"},{"type":"text","text":" "},{"text":"excessive casting.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Decoding unwrapped ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","type":"reference"},{"text":" values using the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","type":"reference","isActive":true},{"type":"text","text":" as follows:"}]},{"code":["func init(from decoder: Decoder) throws {","  let treeContainer = try decoder.singleValuedContainer() as! TreeValueDecodingContainer","  self.value = try treeContainer.decodeUnwrappedValue()","}"],"type":"codeListing","syntax":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"PotentCodables"}],"title":"Tree Values"},"kind":"article","abstract":[{"text":"What are “tree values”?","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"],"generated":true,"title":"Usage","anchor":"Usage"}],"references":{"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"url":"\/documentation\/potentcodables\/data-formats","role":"article","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","kind":"article","title":"Data Formats"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"url":"\/documentation\/potentcodables\/anyvalue","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","kind":"symbol","title":"AnyValue","navigatorTitle":[{"kind":"identifier","text":"AnyValue"}],"abstract":[{"text":"A ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AnyValue","kind":"identifier"}],"type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSON/Number":{"abstract":[],"title":"JSON.Number","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Number"}],"url":"\/documentation\/potentjson\/json\/number","navigatorTitle":[{"kind":"identifier","text":"Number"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON\/Number","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"url":"\/documentation\/potentcodables\/using-anyvalue","kind":"article","role":"article","title":"Using AnyValue","type":"topic","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"},"doc://PotentCodables/documentation/PotentCodables/TreeValueDecodingContainer":{"url":"\/documentation\/potentcodables\/treevaluedecodingcontainer","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"TreeValueDecodingContainer"}],"title":"TreeValueDecodingContainer","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValueDecodingContainer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TreeValueDecodingContainer","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"role":"collection","title":"PotentCodables","url":"\/documentation\/potentcodables","kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentJSON/JSON":{"abstract":[{"type":"text","text":"General JSON value."}],"navigatorTitle":[{"text":"JSON","kind":"identifier"}],"kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSON","kind":"identifier"}],"title":"JSON","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","url":"\/documentation\/potentjson\/json"},"doc://PotentCodables/documentation/PotentCodables/GettingStarted":{"url":"\/documentation\/potentcodables\/gettingstarted","kind":"article","role":"article","title":"Getting Started with Potent Codables","type":"topic","abstract":[{"type":"text","text":"Get started using the powerful potent data formats "},{"inlineContent":[{"text":"JSON","type":"text"}],"type":"strong"},{"type":"text","text":", "},{"inlineContent":[{"text":"YAML","type":"text"}],"type":"strong"},{"type":"text","text":", "},{"inlineContent":[{"text":"CBOR","type":"text"}],"type":"strong"},{"type":"text","text":" & "},{"type":"strong","inlineContent":[{"text":"ASN.1","type":"text"}]},{"text":".","type":"text"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted"}}}