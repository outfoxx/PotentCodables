{"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"Getting Started with Potent Codables","modules":[{"name":"PotentCodables"}],"roleHeading":"Article","role":"article"},"sections":[],"seeAlsoSections":[{"title":"Usage","identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue","doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues"],"anchor":"Usage","generated":true}],"abstract":[{"text":"Get started using the powerful potent data formats ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"JSON"}]},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"YAML"}]},{"text":", ","type":"text"},{"type":"strong","inlineContent":[{"text":"CBOR","type":"text"}]},{"type":"text","text":" & "},{"inlineContent":[{"type":"text","text":"ASN.1"}],"type":"strong"},{"text":".","type":"text"}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/GettingStarted","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"PotentCodables provide standard ","type":"text"},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s for the Swift "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" framework. Additionally all"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"code":"Encoder","type":"codeVoice"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s provide ehanched capabilities to make working with data formats easier and more"},{"type":"text","text":" "},{"type":"text","text":"powerful."}]},{"anchor":"Standard-EncodersDecoders","type":"heading","text":"Standard Encoders\/Decoders","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are looking to use one of the powerful PotentCodables provided formats for encoding & decoding you only"},{"type":"text","text":" "},{"type":"text","text":"need to import the format you want to use and use the familiar "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" APIs as you would for"},{"text":" ","type":"text"},{"text":"any other ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" framework.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example encoding to YAML is essentially the same as encoding with Swift’s standard "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":". You just need"},{"text":" ","type":"text"},{"type":"text","text":"to use "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLEncoder","isActive":true,"type":"reference"}]},{"type":"codeListing","code":["import PotentYAML","","struct Engine {","  var name: String","  var cylinders: Int","}","","let v8Engine = Engine(name: \"V8\", cylinders: 8)","","let yamlData = try YAML.Encoder.default.encode(v8Engine)","print(String(data: yamlData, encoding: .utf8)!)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Produces the following YAML:","type":"text"}]},{"code":["---","name: V8","cylinders: 8","..."],"type":"codeListing","syntax":"yaml"},{"type":"paragraph","inlineContent":[{"text":"Similarly, to decode the YAML produced in the previous example you only need to use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLDecoder"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["import PotentYAML","","let someEngine = YAML.Encoder.default.decode(yamlData)"]},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"All provided Encoders and Decoders from a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" for easy access to an encoder or decoder initialized"},{"type":"text","text":" "},{"type":"text","text":"with default options. These are used througout the documentation."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You may have noticed you can use either "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/Encoder","isActive":true},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLEncoder","isActive":true},{"text":" to reference","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the YAML encoder’s type. This is true for all PotentCodables formats and allows easy disambiguation when mixing with"},{"text":" ","type":"text"},{"type":"text","text":"other codable frameworks encoders & decoders like Foundation’s "},{"code":"JSONEncoder","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":"."}]}],"name":"Tip","style":"tip","type":"aside"},{"text":"Ecoding\/Decoding from Strings","anchor":"EcodingDecoding-from-Strings","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"All PotentCodables text based data formats like "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON","isActive":true},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML"},{"text":" can encode directly to and from","type":"text"},{"type":"text","text":" "},{"text":"Strings in addition to the standard ","type":"text"},{"code":"Data","type":"codeVoice"},{"type":"text","text":" encoding; this can save you the hassle of converting "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" to "},{"type":"codeVoice","code":"String"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"many cases."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The previous encoding example could be rewritten as follows:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import PotentYAML","","struct Engine {","  var name: String","  var cylinders: Int","}","","let v8Engine = Engine(name: \"V8\", cylinders: 8)","","let yamlData = try YAML.Encoder.default.encodeString(v8Engine)","print(String(data: yamlData, encoding: .utf8)!)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of PotentCodables text based formats provided "},{"code":"String","type":"codeVoice"},{"type":"text","text":" support via the following protocols."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EncodesToString"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DecodesFromString"}],"type":"paragraph"}]}]},{"level":3,"type":"heading","anchor":"EcodingDecoding-from-Tree-values","text":"Ecoding\/Decoding from Tree values."},{"inlineContent":[{"type":"text","text":"PotentCodables data formats are required to provide an in-memory representation known as a “tree value”. Tree values"},{"type":"text","text":" "},{"type":"text","text":"are Swift values that represent the natively encoded data. See "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","isActive":true,"type":"reference"},{"text":" to learn more about tree values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"All PotentCodables encoders and decoders have the ability to encode to or decode from tree values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Reading our previous example ","type":"text"},{"type":"codeVoice","code":"Engine"},{"type":"text","text":" struct from a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","isActive":true,"type":"reference"},{"text":" tree value is easy.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import PotentJSON","","struct Engine {","  var name: String","  var cylinders: Int","}","","let json: JSON = [","  \"name\": \"V8\",","  \"cylinders\": 8","]","","let someEngine = JSON.Decoder.default.decodeTree(Engine.self, from: json)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All PotentCodables data formats provided support for tree values via the following protocols."}]},{"items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EncodesToTree","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DecodesFromTree"}]}]}],"type":"unorderedList"}],"kind":"content"}],"references":{"doc://PotentCodables/documentation/PotentCodables/EncodesToTree":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EncodesToTree"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EncodesToTree","navigatorTitle":[{"kind":"identifier","text":"EncodesToTree"}],"abstract":[{"text":"All encoders support encoding to their native values.","type":"text"}],"title":"EncodesToTree","url":"\/documentation\/potentcodables\/encodestotree","type":"topic"},"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"role":"collection","title":"PotentCodables","url":"\/documentation\/potentcodables","kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentYAML/YAMLEncoder":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLEncoder","role":"symbol","title":"YAMLEncoder","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"YAMLEncoder","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"YAMLEncoder"}],"abstract":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLEncoder"},{"type":"text","text":" facilitates the encoding of "},{"type":"codeVoice","code":"Encodable"},{"text":" values into YAML values.","type":"text"}],"url":"\/documentation\/potentyaml\/yamlencoder","type":"topic","kind":"symbol"},"doc://PotentCodables/documentation/PotentYAML/YAMLDecoder":{"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLDecoder","abstract":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAMLDecoder","isActive":true},{"text":" facilitates the decoding of YAML into semantic ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" types.","type":"text"}],"title":"YAMLDecoder","url":"\/documentation\/potentyaml\/yamldecoder","kind":"symbol","navigatorTitle":[{"text":"YAMLDecoder","kind":"identifier"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"YAMLDecoder","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentYAML/YAML/Encoder":{"navigatorTitle":[{"kind":"identifier","text":"Encoder"}],"kind":"symbol","title":"YAML.Encoder","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Encoder","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML\/YAML\/Encoder","type":"topic","role":"symbol","url":"\/documentation\/potentyaml\/yaml\/encoder"},"doc://PotentCodables/documentation/PotentCodables/DecodesFromString":{"role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DecodesFromString","abstract":[{"type":"text","text":"Decoders for text formats support decoding from strings and from"},{"text":" ","type":"text"},{"type":"text","text":"data using a string encoding."}],"title":"DecodesFromString","url":"\/documentation\/potentcodables\/decodesfromstring","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DecodesFromString"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DecodesFromString"}]},"doc://PotentCodables/documentation/PotentJSON/JSON":{"abstract":[{"type":"text","text":"General JSON value."}],"navigatorTitle":[{"text":"JSON","kind":"identifier"}],"kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JSON","kind":"identifier"}],"title":"JSON","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON\/JSON","url":"\/documentation\/potentjson\/json"},"doc://PotentCodables/documentation/PotentYAML":{"kind":"symbol","title":"PotentYAML","abstract":[{"text":"YAML 1.2 support for both YAML & JSON in a single framework.","type":"text"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentYAML","role":"collection","url":"\/documentation\/potentyaml"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"url":"\/documentation\/potentcodables\/anyvalue","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","kind":"symbol","title":"AnyValue","navigatorTitle":[{"kind":"identifier","text":"AnyValue"}],"abstract":[{"text":"A ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AnyValue","kind":"identifier"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/EncodesToString":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EncodesToString"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EncodesToString","navigatorTitle":[{"kind":"identifier","text":"EncodesToString"}],"abstract":[{"type":"text","text":"Encoders that target text formats support encoding to strings"},{"text":" ","type":"text"},{"type":"text","text":"and encoding to data using a default string encoding."}],"title":"EncodesToString","url":"\/documentation\/potentcodables\/encodestostring","type":"topic"},"doc://PotentCodables/documentation/PotentJSON":{"abstract":[{"text":"Enhanced, drop-in replacement for Foundation’s JSON support in pure Swift.","type":"text"}],"url":"\/documentation\/potentjson","kind":"symbol","role":"collection","title":"PotentJSON","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentJSON"},"doc://PotentCodables/documentation/PotentCodables/TreeValues":{"url":"\/documentation\/potentcodables\/treevalues","kind":"article","title":"Tree Values","role":"article","abstract":[{"type":"text","text":"What are “tree values”?"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TreeValues","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Using-AnyValue":{"url":"\/documentation\/potentcodables\/using-anyvalue","kind":"article","role":"article","title":"Using AnyValue","type":"topic","abstract":[{"text":"Decode and encode “any” structured value using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Using-AnyValue"},"doc://PotentCodables/documentation/PotentCodables/Data-Formats":{"abstract":[{"type":"text","text":"All data formats provided by PotentCodables"}],"url":"\/documentation\/potentcodables\/data-formats","role":"article","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Data-Formats","kind":"article","title":"Data Formats"},"doc://PotentCodables/documentation/PotentCodables/DecodesFromTree":{"navigatorTitle":[{"text":"DecodesFromTree","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DecodesFromTree","url":"\/documentation\/potentcodables\/decodesfromtree","abstract":[{"type":"text","text":"All encoders support decoding from their native values."}],"role":"symbol","title":"DecodesFromTree","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DecodesFromTree","kind":"identifier"}]}}}