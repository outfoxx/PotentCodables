{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},"seeAlsoSections":[{"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"anchor":"Advanced","generated":true,"title":"Advanced"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Polymorphic references for wrapped values (using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":") use the name "},{"code":"@type","type":"codeVoice"},{"text":" for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"field containing the type id and the name "},{"code":"value","type":"codeVoice"},{"text":" for the field containing the wrapped value. References for embedded","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values (using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":") usethe name "},{"code":"@type","type":"codeVoice"},{"text":" for the field containing the type id. Both reference","type":"text"},{"text":" ","type":"text"},{"text":"structures use the ","type":"text"},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" for type id generation and lookup."}]},{"inlineContent":[{"type":"text","text":"These names and the type id generation and lookup are fully customizable. In fact, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":" is simply a"},{"type":"text","text":" "},{"type":"text","text":"type alias to the generic type "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","type":"reference","isActive":true},{"type":"text","text":" that uses ("},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"type":"text","text":") for type"},{"text":" ","type":"text"},{"text":"handling and the key providers (","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey"},{"text":") and (","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","type":"reference","isActive":true},{"type":"text","text":") to provide"},{"type":"text","text":" "},{"text":"the names of the fields. Similarly, ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"text":" is a type alias to","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By defining your own key providers and\/or type handlers your can customize create custom reference types that conform"},{"type":"text","text":" "},{"type":"text","text":"to how your data needs to be structured."}]},{"type":"heading","anchor":"Customizing-Keys","level":3,"text":"Customizing Keys"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"text":" uses “key providers” to determine the names of the fields to use during encoding and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decoding. A key provider is a simple structure with a static property providing the name of the field. They are very"},{"type":"text","text":" "},{"text":"simple types.","type":"text"}]},{"inlineContent":[{"text":"Here is the definition of the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","type":"reference","isActive":true},{"text":" that provides the name ","type":"text"},{"type":"codeVoice","code":"@type"},{"text":" for","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public struct DefaultTypeKey: TypeKeyProvider {","  public static var typeKey: AnyCodingKey = \"@type\"","}"]},{"type":"paragraph","inlineContent":[{"text":"By defining your own key providers you dictate the name of encoded fields for both the type id field and the value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"field of a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example creates a new reference type "},{"code":"UnderscoreRef","type":"codeVoice"},{"type":"text","text":" that uses the names "},{"type":"codeVoice","code":"_type"},{"text":" for the type id field","type":"text"},{"text":" ","type":"text"},{"text":"and the name ","type":"text"},{"code":"_value","type":"codeVoice"},{"type":"text","text":" for the value field."}]},{"type":"codeListing","syntax":"swift","code":["struct UnderscoreRefKeys: TypeKeyProvider, ValueKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","  static var valueKey: AnyCodingKey = \"_value\"","}","","typealias UnderscoreRef = CustomRef<UnderscoreRefKeys, UnderscoreRefKeys, DefaultTypeIndex>","","let myValue = container.decode(UnderscoreRef.self).value"]},{"type":"paragraph","inlineContent":[{"text":"For ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","type":"reference","isActive":true},{"type":"text","text":" only a "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","isActive":true,"type":"reference"},{"type":"text","text":" is required because all fields"},{"text":" ","type":"text"},{"type":"text","text":"are contained in the same container."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An embedded "},{"code":"UnderscoreEmbeddedRef","type":"codeVoice"},{"type":"text","text":" similar to the above example would be created similarly."}]},{"syntax":"swift","code":["struct UnderscoreEmbeddedRefKey: TypeKeyProvider {","  static var typeKey: AnyCodingKey = \"_type\"","}","","typealias UnderscoreEmbeddedRef = CustomRef<UnderscoreEmbeddedRefKey, DefaultTypeIndex>"],"type":"codeListing"},{"anchor":"Customizing-Type-Lookup","text":"Customizing Type Lookup","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming a value’s type type into a string id. During decoding by type ids are"},{"text":" ","type":"text"},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"type":"text","text":" "},{"text":"decoding, type ids are looked up using a type index. A type index simply generates type ids","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index, used by "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":", is"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"type":"text","text":". The index has a simple global map of allowed types and their type ids."},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","isActive":true},{"text":" uses the simple module local type name.","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":"’s map of allowed types is initially empty and will not allow any custom types during"},{"type":"text","text":" "},{"type":"text","text":"decoding. You must explicitly update the map of allowed types using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)"},{"text":" ","type":"text"},{"type":"text","text":"before decoding values."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want or your data requires an alternate type handling strategy you can create a new implementation of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","isActive":true},{"text":" and define a new reference type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example uses a custom (imaginary) numeric type index and creates a new type alias to use throughout code."}]},{"code":["struct NumericTypeIndex: TypeIndex {","  ","}","typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"],"syntax":"swift","type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"kind":"article","abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"modules":[{"name":"PotentCodables"}],"role":"article","roleHeading":"Article","title":"Custom References"},"references":{"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"abstract":[{"type":"text","text":"Default type key provider using "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey"}],"title":"DefaultTypeKey","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeKey"}],"url":"\/documentation\/potentcodables\/defaulttypekey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DefaultTypeKey","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/CustomEmbeddedRef":{"url":"\/documentation\/potentcodables\/customembeddedref","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomEmbeddedRef"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomEmbeddedRef","title":"CustomEmbeddedRef","kind":"symbol","abstract":[{"type":"text","text":"The implementation type for "},{"code":"EmbeddedRef","type":"codeVoice"},{"type":"text","text":" types."}],"navigatorTitle":[{"text":"CustomEmbeddedRef","kind":"identifier"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider":{"abstract":[{"type":"text","text":"Provides a static "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","isActive":true},{"type":"text","text":" property that "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" "},{"type":"text","text":"use to determine which key to use when encoding\/decoding the Swift"},{"type":"text","text":" "},{"type":"text","text":"type name."}],"title":"TypeKeyProvider","navigatorTitle":[{"text":"TypeKeyProvider","kind":"identifier"}],"url":"\/documentation\/potentcodables\/typekeyprovider","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TypeKeyProvider"}],"kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/TypeIndex":{"navigatorTitle":[{"kind":"identifier","text":"TypeIndex"}],"url":"\/documentation\/potentcodables\/typeindex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeIndex","abstract":[{"type":"text","text":"Provides static functions for looking up types by id for decoding"},{"type":"text","text":" "},{"type":"text","text":"and generating type ids for types during encoding."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TypeIndex"}],"type":"topic","title":"TypeIndex","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","url":"\/documentation\/potentcodables\/customref","type":"topic","abstract":[{"text":"The implementation type for ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" types.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}],"navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"title":"CustomRef","role":"symbol","kind":"symbol"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey/typeKey":{"url":"\/documentation\/potentcodables\/defaulttypekey\/typekey","abstract":[],"title":"typeKey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey\/typeKey","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","kind":"typeIdentifier","text":"AnyCodingKey"}]},"doc://PotentCodables/documentation/PotentCodables/TypeKeyProvider/typeKey":{"url":"\/documentation\/potentcodables\/typekeyprovider\/typekey","abstract":[],"required":true,"title":"typeKey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/TypeKeyProvider\/typeKey","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"typeKey","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AnyCodingKey","preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey/valueKey":{"abstract":[],"url":"\/documentation\/potentcodables\/defaultvaluekey\/valuekey","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"valueKey","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14PotentCodables12AnyCodingKeyV","text":"AnyCodingKey","kind":"typeIdentifier"}],"title":"valueKey","kind":"symbol","type":"topic","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding":{"title":"Polymorphic Encoding & Decoding","kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding","role":"article","type":"topic","abstract":[{"type":"text","text":"Utilities to simplify polymorphic encoding and decoding."}]},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"code":"Encoder","type":"codeVoice"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s implement."}],"kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article","url":"\/documentation\/potentcodables\/protocols","title":"Encoder\/Decoder Protocols","type":"topic"},"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"role":"collection","title":"PotentCodables","url":"\/documentation\/potentcodables","kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/mapAllowedTypes(_:)":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mapAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":".Type]) -> ["},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":" : ","kind":"text"},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"text":".Type]","kind":"text"}],"url":"\/documentation\/potentcodables\/defaulttypeindex\/mapallowedtypes(_:)","kind":"symbol","title":"mapAllowedTypes(_:)","abstract":[{"text":"Maps the given array of types to their generated type id and returns the dictionary.","type":"text"}],"role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"kind":"symbol","abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}],"type":"topic","title":"Ref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","navigatorTitle":[{"kind":"identifier","text":"Ref"}],"role":"symbol","url":"\/documentation\/potentcodables\/ref","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"title":"DefaultTypeIndex","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"url":"\/documentation\/potentcodables\/defaulttypeindex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","role":"symbol","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}],"navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex/addAllowedTypes(_:)":{"type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/addAllowedTypes(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addAllowedTypes","kind":"identifier"},{"text":"([","kind":"text"},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"},{"text":".Type])","kind":"text"}],"url":"\/documentation\/potentcodables\/defaulttypeindex\/addallowedtypes(_:)","kind":"symbol","title":"addAllowedTypes(_:)","abstract":[{"type":"text","text":"Set the allowed types to the given array after mapping them using "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex\/mapAllowedTypes(_:)","isActive":true},{"type":"text","text":"."}],"role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"navigatorTitle":[{"text":"EmbeddedRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/embeddedref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedRef"}],"type":"topic","title":"EmbeddedRef","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","type":"topic","abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"url":"\/documentation\/potentcodables\/implementing-formats","title":"Implementing New Data Formats","kind":"article"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"title":"DefaultValueKey","abstract":[{"type":"text","text":"Default value key provider using "},{"type":"codeVoice","code":"value"},{"text":" as the ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey\/valueKey","isActive":true,"type":"reference"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","kind":"symbol","url":"\/documentation\/potentcodables\/defaultvaluekey","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DefaultValueKey","kind":"identifier"}],"navigatorTitle":[{"text":"DefaultValueKey","kind":"identifier"}],"type":"topic"}}}