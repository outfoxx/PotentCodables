{"metadata":{"role":"symbol","symbolKind":"op","roleHeading":"Operator","extendedModule":"Swift","title":"!=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"externalID":"s:SQsE2neoiySbx_xtFZ::SYNTHESIZED::s:14PotentCodables8AnyValueO","modules":[{"name":"PotentCodables","relatedModules":["Swift"]}]},"kind":"symbol","abstract":[{"text":"Returns a Boolean value indicating whether two values are not equal.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/potentcodables\/anyvalue\/!=(_:_:)"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"internalParam","text":"lhs"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"A value to compare.","type":"text"}],"type":"paragraph"}],"name":"lhs"},{"content":[{"inlineContent":[{"text":"Another value to compare.","type":"text"}],"type":"paragraph"}],"name":"rhs"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Inequality is the inverse of equality. For any values ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"code":"b","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"a != b"},{"text":" ","type":"text"},{"text":"implies that ","type":"text"},{"type":"codeVoice","code":"a == b"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This is the default implementation of the not-equal-to operator (","type":"text"},{"code":"!=","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for any type that conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables","doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/Equatable-Implementations"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/!=(_:_:)","interfaceLanguage":"swift"},"references":{"doc://PotentCodables/documentation/PotentCodables/AnyValue/!=(_:_:)":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are not equal."}],"title":"!=(_:_:)","type":"topic","url":"\/documentation\/potentcodables\/anyvalue\/!=(_:_:)","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/!=(_:_:)","kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}]},"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"role":"collection","title":"PotentCodables","url":"\/documentation\/potentcodables","kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/AnyValue/Equatable-Implementations":{"title":"Equatable Implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue\/Equatable-Implementations","kind":"article","abstract":[],"url":"\/documentation\/potentcodables\/anyvalue\/equatable-implementations"},"doc://PotentCodables/documentation/PotentCodables/AnyValue":{"url":"\/documentation\/potentcodables\/anyvalue","role":"symbol","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/AnyValue","kind":"symbol","title":"AnyValue","navigatorTitle":[{"kind":"identifier","text":"AnyValue"}],"abstract":[{"text":"A ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value that allows encoding\/decoding values of any type or structure."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"AnyValue","kind":"identifier"}],"type":"topic"}}}