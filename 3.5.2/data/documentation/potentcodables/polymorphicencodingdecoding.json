{"metadata":{"roleHeading":"Article","modules":[{"name":"PotentCodables"}],"role":"article","title":"Polymorphic Encoding & Decoding"},"abstract":[{"text":"Utilities to simplify polymorphic encoding and decoding.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Polymorphic encoding refers to being able to encode a value with a Swift type identifier that can be used to determine","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the correct type to decode."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"type":"text","text":" are provided to make encoding polymorphic values easier."},{"text":" ","type":"text"},{"type":"text","text":"These “reference types” are designed to work with with decoding concrete types like classes and structs as well as"},{"type":"text","text":" "},{"text":"protocols.","type":"text"}]},{"level":3,"anchor":"Wrapped-Values","text":"Wrapped Values","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":" is used to decode values that are “wrapped” with a type name. For example, given JSON similar"},{"type":"text","text":" "},{"type":"text","text":"to the following:"}]},{"type":"codeListing","syntax":"javascript","code":["{ \"@type\" : \"MyApp.Foo\", \"value\" : { \"name\" : \"A Value\" } }"]},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"type":"text","text":" can be used to decode a value with a little extra code. Here we decode implementations of a"},{"text":" ","type":"text"},{"text":"protocol ","type":"text"},{"code":"FooBar","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["protocol FooBar {","  var name: String { get }","}","","struct Foo: FooBar, Codable {","  let name: String","}","","struct Bar: FooBar, Codable {","  let count: Int","}","","DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self]) \/\/ Allow types for polymorphic decoding","","let val = try JSONDecoder.default.decode(Ref.self).as(FooBar.self)  \/\/ Decode a `FooBar` and use `as` to cast or throw an error."]},{"style":"important","name":"Important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution"},{"type":"text","text":" to learn why"},{"type":"text","text":" "},{"type":"codeVoice","code":"DefaultTypeIndex.addAllowedTypes"},{"type":"text","text":" is required and about security issues related to decoding."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"Conversley to encode a value wrapped with an object containg the Swift type name simply use "},{"code":"Ref.Value","type":"codeVoice"},{"text":" during","type":"text"},{"text":" ","type":"text"},{"text":"encoding:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let data = try JSONEncoder.default.encode(Ref.Value(val))"],"type":"codeListing"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"text":" is a type alias for the generic type ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","isActive":true},{"text":" that uses the","type":"text"},{"type":"text","text":" "},{"text":"looks up type using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","type":"reference"},{"type":"text","text":" and the default type and value keys. To customize keys"},{"text":" ","type":"text"},{"type":"text","text":"or use a customized type index see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References"},{"type":"text","text":"."}]}],"type":"aside"},{"anchor":"Embedded-Values","type":"heading","text":"Embedded Values","level":3},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"text":", which includes ","type":"text"},{"type":"codeVoice","code":"EmbeddedRef.Value"},{"type":"text","text":", is also"},{"text":" ","type":"text"},{"type":"text","text":"provided and is used the exact same way as "},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"type":"text","text":". The difference is that"},{"type":"text","text":" "},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true,"type":"reference"},{"type":"text","text":" embeds the type name along side the encoded value’s other keys."}]},{"inlineContent":[{"type":"text","text":"For example, the example JSON above would resemble the following with the key embedded:"}],"type":"paragraph"},{"type":"codeListing","code":["{ \"@type\" : \"MyApp.Foo\", \"name\" : \"A Value\" }"],"syntax":"javascript"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"isActive":true,"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef"},{"text":" requires the value it encodes to use a keyed-container.  Unkeyed and","type":"text"},{"type":"text","text":" "},{"text":"single-value containers cannot be used with it, but they can be used with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"type":"text","text":"."}]}],"name":"Note","style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"See the documentation for ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","type":"reference","isActive":true},{"type":"text","text":" for a lot of details on their usage"},{"text":" ","type":"text"},{"text":"as well as documentation of how to customize the keys used during encoding\/decoding.","type":"text"}]},{"text":"Nested Values","anchor":"Nested-Values","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"When a struct or class needs to reference a polymorphic type (e.g. via a protocol) you will need to implement"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Encodable.encode(to:)"},{"type":"text","text":" and "},{"code":"Decodable.init(from:)","type":"codeVoice"},{"type":"text","text":". In this scenario your can still use "},{"isActive":true,"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","type":"reference"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","isActive":true},{"type":"text","text":" in your provided implementations."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We can store a value confornming to "},{"type":"codeVoice","code":"FooBar"},{"text":" (from the previous examples) in a struct in the following way:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct TestValue: Codable {","  var fooBar: FooBar","","  init(fooBar: FooBar) {","    self.fooBar = fooBar","  }","","  enum CodingKeys: CodingKey {","    case fooBar","  }","","  init(from decoder: Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","    self.fooBar = try container.decode(Ref.self, forKey: .fooBar).as(FooBar.self)","  }","","  func encode(to encoder: Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(Ref.Value(fooBar), forKey: .fooBar)","  }","}"],"type":"codeListing"},{"level":2,"anchor":"Type-ID-Serialization-and-Type-Resolution","type":"heading","text":"Type ID Serialization and Type Resolution"},{"inlineContent":[{"type":"text","text":"By default the type serialization & resolution mechanism disallows all types to be"},{"type":"text","text":" "},{"type":"text","text":"decoded. This is to ensure that decoding is secure and only authorized types can be decoded. Additionally, the index"},{"text":" ","type":"text"},{"text":"mechanism, by default, uses a type id that does not include your application or module’s the Swift module name so as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to ensure stable type ids across modules and frameworks."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The means that you must explicity allow classes prior to using polymorphic decoding. This is done as simply as:"}],"type":"paragraph"},{"type":"codeListing","code":["DefaultTypeIndex.addAllowedTypes([Foo.self, Bar.self])"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This generates a type id for each type ("},{"code":"Foo","type":"codeVoice"},{"text":" & ","type":"text"},{"type":"codeVoice","code":"Bar"},{"text":") and upates the map of allowed types to include the types","type":"text"},{"type":"text","text":" "},{"text":"provided.","type":"text"}]},{"anchor":"Custom-Type-Index","level":3,"text":"Custom Type Index","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Alternatively you can implement and provide a custom type index and define your own reference type (see","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","isActive":true},{"text":") . If you have an alternate means of looking up types and\/or generating type ids.","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":"The default type index is designed to be safe by default. This means Swift Packages and Xcode Frameworks"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"must"}],"type":"strong"},{"type":"text","text":" use a custom type index to ensure the types it expects are registered and reduce the chance of inadvertantly"},{"type":"text","text":" "},{"type":"text","text":"creating security vulnerabilities in adopting applications."}],"type":"paragraph"}],"type":"aside","name":"Important","style":"important"}]}],"seeAlsoSections":[{"anchor":"Advanced","generated":true,"identifiers":["doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols"],"title":"Advanced"}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"references":{"doc://PotentCodables/documentation/PotentCodables/Custom-References":{"abstract":[{"type":"text","text":"Polymorphic references tailored to your data."}],"kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Custom-References","role":"article","url":"\/documentation\/potentcodables\/custom-references","title":"Custom References","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution":{"kind":"section","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/PolymorphicEncodingDecoding#Type-ID-Serialization-and-Type-Resolution","type":"topic","title":"Type ID Serialization and Type Resolution","url":"\/documentation\/potentcodables\/polymorphicencodingdecoding#Type-ID-Serialization-and-Type-Resolution","abstract":[]},"doc://PotentCodables/documentation/PotentCodables/Implementing-Formats":{"role":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Implementing-Formats","type":"topic","abstract":[{"type":"text","text":"Learn how to implement new "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" data formats easily."}],"url":"\/documentation\/potentcodables\/implementing-formats","title":"Implementing New Data Formats","kind":"article"},"doc://PotentCodables/documentation/PotentCodables":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","abstract":[{"text":"A potent set of implementations and extensions to the Swift ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" system"}],"role":"collection","title":"PotentCodables","url":"\/documentation\/potentcodables","kind":"symbol","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/Protocols":{"abstract":[{"text":"Details of all the protocols PotentCodables ","type":"text"},{"code":"Encoder","type":"codeVoice"},{"text":"s and ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"s implement."}],"kind":"article","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Protocols","role":"article","url":"\/documentation\/potentcodables\/protocols","title":"Encoder\/Decoder Protocols","type":"topic"},"doc://PotentCodables/documentation/PotentCodables/EmbeddedRef":{"navigatorTitle":[{"text":"EmbeddedRef","kind":"identifier"}],"url":"\/documentation\/potentcodables\/embeddedref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/EmbeddedRef","abstract":[{"type":"text","text":"A decodable type for decoding polymorphic types that include an embedded type name value."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedRef"}],"type":"topic","title":"EmbeddedRef","role":"symbol"},"doc://PotentCodables/documentation/PotentCodables/Ref":{"kind":"symbol","abstract":[{"text":"A decodable type for decoding general polymorphic types.","type":"text"}],"type":"topic","title":"Ref","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","navigatorTitle":[{"kind":"identifier","text":"Ref"}],"role":"symbol","url":"\/documentation\/potentcodables\/ref","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"}]},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"title":"DefaultTypeIndex","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultTypeIndex","kind":"identifier"}],"url":"\/documentation\/potentcodables\/defaulttypeindex","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","role":"symbol","abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}],"navigatorTitle":[{"text":"DefaultTypeIndex","kind":"identifier"}],"type":"topic"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","url":"\/documentation\/potentcodables\/customref","type":"topic","abstract":[{"text":"The implementation type for ","type":"text"},{"type":"reference","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","isActive":true},{"text":" types.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CustomRef","kind":"identifier"}],"navigatorTitle":[{"text":"CustomRef","kind":"identifier"}],"title":"CustomRef","role":"symbol","kind":"symbol"}}}