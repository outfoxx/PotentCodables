{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"},{"kind":"text","text":" = "},{"kind":"typeIdentifier","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","preciseIdentifier":"s:14PotentCodables9CustomRefV","text":"CustomRef"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","preciseIdentifier":"s:14PotentCodables14DefaultTypeKeyV","text":"DefaultTypeKey"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","preciseIdentifier":"s:14PotentCodables15DefaultValueKeyV","text":"DefaultValueKey"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","preciseIdentifier":"s:14PotentCodables16DefaultTypeIndexV","text":"DefaultTypeIndex"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Ref"},{"type":"text","text":" relies upon the encoded value being wrapped in a keyed container that contains a"},{"type":"text","text":" "},{"type":"text","text":"Swift type name in its key-value pairs. By default the key "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" is used but this can be"},{"type":"text","text":" "},{"type":"text","text":"customized."}]},{"anchor":"Expected-Encoded-Structure-JSON","level":1,"type":"heading","text":"Expected Encoded Structure (JSON):"},{"type":"codeListing","syntax":"javascript","code":["{\"@type\" : \"MyValue\", \"value\": {\"name\" : \"Foo\"}}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decoding a "},{"type":"codeVoice","code":"Ref"},{"type":"text","text":" instance will decode the value to its "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which can then be accesed in a number of ways."}]},{"anchor":"Example","level":1,"type":"heading","text":"Example:"},{"type":"codeListing","syntax":null,"code":["DefaultTypeIndex.setAllowedTypes([MyValue.self])","","myValue = container.decode(Ref.self).value as! MyValue"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example, "},{"type":"codeVoice","code":"MyValue"},{"type":"text","text":" can be a concrete type or protocol, either works fine. Alternatively, the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Ref.as(: Any.Type)"},{"type":"text","text":" method can be used to require the value be of a specific"},{"type":"text","text":" "},{"type":"text","text":"type and throw a decoding error if it is not, as in:"}]},{"type":"codeListing","syntax":null,"code":["myValue = container.decode(Ref.self).as(MyValue.self)"]},{"anchor":"Customizing-Keys","level":1,"type":"heading","text":"Customizing Keys:"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key used to store the type name defaults to "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" and the key used to store the value"},{"type":"text","text":" "},{"type":"text","text":"defaults to "},{"type":"codeVoice","code":"value"},{"type":"text","text":". These can be customized by using the implementation type ("},{"type":"codeVoice","code":"CustomRef"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"directly, passing a "},{"type":"codeVoice","code":"TypeKeyProvider"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"ValueKeyProvider"},{"type":"text","text":" for each of the required keys:"}]},{"type":"codeListing","syntax":null,"code":["typealias MyRef = CustomRef<MyTypeKey, MyValueKey>","myValue = container.decode(My.self).value"]},{"anchor":"Customizing-Type-Lookup","level":1,"type":"heading","text":"Customizing Type Lookup:"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types are saved by transforming them into a type id (aka name). During decoding by type ids are"},{"type":"text","text":" "},{"type":"text","text":"transformed back into the requested types. To enable extensability, and ensure security during"},{"type":"text","text":" "},{"type":"text","text":"decoding, type ids are looked up using a type index. A type index simply generates type ids"},{"type":"text","text":" "},{"type":"text","text":"for types and provides the ability to lookup a type for a matching id."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default type index, used by "},{"type":"codeVoice","code":"Ref"},{"type":"text","text":", is "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":". The index has a simple global map"},{"type":"text","text":" "},{"type":"text","text":"of allowed types to their type ids. "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" uses the simple module local type name"},{"type":"text","text":" "},{"type":"text","text":"for each type (see "},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":" for specifics)."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"DefaultTypeIndex"},{"type":"text","text":"â€™s map of allowed types is initially empty and will not provide any"},{"type":"text","text":" "},{"type":"text","text":"types during decoding. You must explicitly updated the map of allowed types using"},{"type":"text","text":" "},{"type":"codeVoice","code":"DefaultTypeIndex.setAllowedTypes(:)"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new type index implementation can be provided by using "},{"type":"codeVoice","code":"CustomRef"},{"type":"text","text":" explicity and providing a"},{"type":"text","text":" "},{"type":"text","text":"cusom type index:"}]},{"type":"codeListing","syntax":null,"code":["typealias MyRef = CustomRef<DefaultTypeKey, DefaultValueKey, MyTypeIndex>"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See Also: "},{"type":"codeVoice","code":"Ref.Value"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See Also: "},{"type":"codeVoice","code":"EmbeddedRef"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See Also: "},{"type":"codeVoice","code":"CustomRef<>"}]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/potentcodables\/ref"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"}],"title":"Ref","roleHeading":"Type Alias","role":"symbol","symbolKind":"typealias","externalID":"s:14PotentCodables3Refa","modules":[{"name":"PotentCodables"}],"navigatorTitle":[{"kind":"identifier","text":"Ref"}]},"hierarchy":{"paths":[["doc:\/\/PotentCodables\/documentation\/PotentCodables"]]},"references":{"doc://PotentCodables/documentation/PotentCodables/Ref":{"role":"symbol","title":"Ref","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Ref"}],"abstract":[{"type":"text","text":"A decodable type for decoding general polymorphic types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/Ref","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Ref"}],"url":"\/documentation\/potentcodables\/ref"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeKey":{"role":"symbol","title":"DefaultTypeKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeKey"}],"abstract":[{"type":"text","text":"Default type key provider using "},{"type":"codeVoice","code":"@type"},{"type":"text","text":" as the "},{"type":"codeVoice","code":"typeKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeKey"}],"url":"\/documentation\/potentcodables\/defaulttypekey"},"doc://PotentCodables/documentation/PotentCodables/CustomRef":{"role":"symbol","title":"CustomRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomRef"}],"abstract":[{"type":"text","text":"The implementation type for "},{"type":"codeVoice","code":"Ref"},{"type":"text","text":" types."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/CustomRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CustomRef"}],"url":"\/documentation\/potentcodables\/customref"},"doc://PotentCodables/documentation/PotentCodables":{"role":"collection","title":"PotentCodables","abstract":[],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables","kind":"symbol","type":"topic","url":"\/documentation\/potentcodables"},"doc://PotentCodables/documentation/PotentCodables/DefaultTypeIndex":{"role":"symbol","title":"DefaultTypeIndex","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultTypeIndex"}],"abstract":[{"type":"text","text":"Default type index that uses a simple global map that can be updated"},{"type":"text","text":" "},{"type":"text","text":"by clients."}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultTypeIndex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DefaultTypeIndex"}],"url":"\/documentation\/potentcodables\/defaulttypeindex"},"doc://PotentCodables/documentation/PotentCodables/DefaultValueKey":{"role":"symbol","title":"DefaultValueKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultValueKey"}],"abstract":[{"type":"text","text":"Default value key provider using "},{"type":"codeVoice","code":"value"},{"type":"text","text":" as the "},{"type":"codeVoice","code":"valueKey"}],"identifier":"doc:\/\/PotentCodables\/documentation\/PotentCodables\/DefaultValueKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DefaultValueKey"}],"url":"\/documentation\/potentcodables\/defaultvaluekey"}}}